using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Migration.SqlServer.Data.Models;

public partial class MigrationSqlDbContext : DbContext
{
    public MigrationSqlDbContext(DbContextOptions<MigrationSqlDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Account { get; set; }

    public virtual DbSet<Accounts> Accounts { get; set; }

    public virtual DbSet<Acquaint> Acquaint { get; set; }

    public virtual DbSet<AcquaintAssign> AcquaintAssign { get; set; }

    public virtual DbSet<AcquaintAssigns> AcquaintAssigns { get; set; }

    public virtual DbSet<Acquaints> Acquaints { get; set; }

    public virtual DbSet<ActionReport> ActionReport { get; set; }

    public virtual DbSet<ActionReports> ActionReports { get; set; }

    public virtual DbSet<ActiveLearning> ActiveLearning { get; set; }

    public virtual DbSet<ActiveLearnings> ActiveLearnings { get; set; }

    public virtual DbSet<ActiveNotification> ActiveNotification { get; set; }

    public virtual DbSet<ActiveNotifications> ActiveNotifications { get; set; }

    public virtual DbSet<ActiveTestLearning> ActiveTestLearning { get; set; }

    public virtual DbSet<ActiveTestLearnings> ActiveTestLearnings { get; set; }

    public virtual DbSet<ActiveWebTemplate> ActiveWebTemplate { get; set; }

    public virtual DbSet<ActiveWebTemplates> ActiveWebTemplates { get; set; }

    public virtual DbSet<Activity> Activity { get; set; }

    public virtual DbSet<ActivityState> ActivityState { get; set; }

    public virtual DbSet<ActivityStates> ActivityStates { get; set; }

    public virtual DbSet<Activitys> Activitys { get; set; }

    public virtual DbSet<Article> Article { get; set; }

    public virtual DbSet<Articles> Articles { get; set; }

    public virtual DbSet<Assessment> Assessment { get; set; }

    public virtual DbSet<AssessmentAppraise> AssessmentAppraise { get; set; }

    public virtual DbSet<AssessmentAppraiseMatrix> AssessmentAppraiseMatrix { get; set; }

    public virtual DbSet<AssessmentAppraiseMatrixs> AssessmentAppraiseMatrixs { get; set; }

    public virtual DbSet<AssessmentAppraises> AssessmentAppraises { get; set; }

    public virtual DbSet<AssessmentCollaborators> AssessmentCollaborators { get; set; }

    public virtual DbSet<AssessmentPlan> AssessmentPlan { get; set; }

    public virtual DbSet<AssessmentPlans> AssessmentPlans { get; set; }

    public virtual DbSet<AssessmentResultRecommend> AssessmentResultRecommend { get; set; }

    public virtual DbSet<AssessmentResultRecommends> AssessmentResultRecommends { get; set; }

    public virtual DbSet<Assessments> Assessments { get; set; }

    public virtual DbSet<AvailabilityPlan> AvailabilityPlan { get; set; }

    public virtual DbSet<AvailabilityPlans> AvailabilityPlans { get; set; }

    public virtual DbSet<Banner> Banner { get; set; }

    public virtual DbSet<Banners> Banners { get; set; }

    public virtual DbSet<Basket> Basket { get; set; }

    public virtual DbSet<Baskets> Baskets { get; set; }

    public virtual DbSet<Benefit> Benefit { get; set; }

    public virtual DbSet<BenefitItem> BenefitItem { get; set; }

    public virtual DbSet<BenefitItems> BenefitItems { get; set; }

    public virtual DbSet<Benefits> Benefits { get; set; }

    public virtual DbSet<Blog> Blog { get; set; }

    public virtual DbSet<BlogAuthors> BlogAuthors { get; set; }

    public virtual DbSet<BlogEntry> BlogEntry { get; set; }

    public virtual DbSet<BlogEntryComment> BlogEntryComment { get; set; }

    public virtual DbSet<BlogEntryComments> BlogEntryComments { get; set; }

    public virtual DbSet<BlogEntrys> BlogEntrys { get; set; }

    public virtual DbSet<Blogs> Blogs { get; set; }

    public virtual DbSet<BonusItem> BonusItem { get; set; }

    public virtual DbSet<BonusItems> BonusItems { get; set; }

    public virtual DbSet<BonusProfile> BonusProfile { get; set; }

    public virtual DbSet<BonusProfiles> BonusProfiles { get; set; }

    public virtual DbSet<Book> Book { get; set; }

    public virtual DbSet<Books> Books { get; set; }

    public virtual DbSet<BossType> BossType { get; set; }

    public virtual DbSet<BossTypes> BossTypes { get; set; }

    public virtual DbSet<Bp> Bp { get; set; }

    public virtual DbSet<BpRole> BpRole { get; set; }

    public virtual DbSet<BpRoles> BpRoles { get; set; }

    public virtual DbSet<BprocessRoles> BprocessRoles { get; set; }

    public virtual DbSet<BproleCollaborators> BproleCollaborators { get; set; }

    public virtual DbSet<Bps> Bps { get; set; }

    public virtual DbSet<Budget> Budget { get; set; }

    public virtual DbSet<BudgetObjects> BudgetObjects { get; set; }

    public virtual DbSet<BudgetPeriod> BudgetPeriod { get; set; }

    public virtual DbSet<BudgetPeriods> BudgetPeriods { get; set; }

    public virtual DbSet<BudgetType> BudgetType { get; set; }

    public virtual DbSet<BudgetTypes> BudgetTypes { get; set; }

    public virtual DbSet<Budgets> Budgets { get; set; }

    public virtual DbSet<CaApprove> CaApprove { get; set; }

    public virtual DbSet<CaPlan> CaPlan { get; set; }

    public virtual DbSet<CaPlanUpdates> CaPlanUpdates { get; set; }

    public virtual DbSet<CaPlanUpdatesCost> CaPlanUpdatesCost { get; set; }

    public virtual DbSet<CaPlanUpdatesDuration> CaPlanUpdatesDuration { get; set; }

    public virtual DbSet<CandidateSource> CandidateSource { get; set; }

    public virtual DbSet<CandidateSources> CandidateSources { get; set; }

    public virtual DbSet<CandidateStatusType> CandidateStatusType { get; set; }

    public virtual DbSet<CandidateStatusTypes> CandidateStatusTypes { get; set; }

    public virtual DbSet<CareerReserve> CareerReserve { get; set; }

    public virtual DbSet<CareerReserveTutors> CareerReserveTutors { get; set; }

    public virtual DbSet<CareerReserveType> CareerReserveType { get; set; }

    public virtual DbSet<CareerReserveTypes> CareerReserveTypes { get; set; }

    public virtual DbSet<CareerReserves> CareerReserves { get; set; }

    public virtual DbSet<CareerTrees> CareerTrees { get; set; }

    public virtual DbSet<CcAccessDivison> CcAccessDivison { get; set; }

    public virtual DbSet<CcAccessDivisons> CcAccessDivisons { get; set; }

    public virtual DbSet<CcAccessElement> CcAccessElement { get; set; }

    public virtual DbSet<CcAccessElements> CcAccessElements { get; set; }

    public virtual DbSet<CcAccessPeriod> CcAccessPeriod { get; set; }

    public virtual DbSet<CcAccessPeriods> CcAccessPeriods { get; set; }

    public virtual DbSet<CcAccessTemplate> CcAccessTemplate { get; set; }

    public virtual DbSet<CcAccessTemplates> CcAccessTemplates { get; set; }

    public virtual DbSet<CcAppCourse> CcAppCourse { get; set; }

    public virtual DbSet<CcAppCourses> CcAppCourses { get; set; }

    public virtual DbSet<CcAttestation> CcAttestation { get; set; }

    public virtual DbSet<CcAttestations> CcAttestations { get; set; }

    public virtual DbSet<CcCollaborator> CcCollaborator { get; set; }

    public virtual DbSet<CcCollaborators> CcCollaborators { get; set; }

    public virtual DbSet<CcContragentImport> CcContragentImport { get; set; }

    public virtual DbSet<CcContragentImports> CcContragentImports { get; set; }

    public virtual DbSet<CcCostHistory> CcCostHistory { get; set; }

    public virtual DbSet<CcCostHistorys> CcCostHistorys { get; set; }

    public virtual DbSet<CcCourseDate> CcCourseDate { get; set; }

    public virtual DbSet<CcCourseDates> CcCourseDates { get; set; }

    public virtual DbSet<CcCourseOrg> CcCourseOrg { get; set; }

    public virtual DbSet<CcCourseOrgs> CcCourseOrgs { get; set; }

    public virtual DbSet<CcDirect> CcDirect { get; set; }

    public virtual DbSet<CcDirects> CcDirects { get; set; }

    public virtual DbSet<CcDocField> CcDocField { get; set; }

    public virtual DbSet<CcDocFields> CcDocFields { get; set; }

    public virtual DbSet<CcDocSetting> CcDocSetting { get; set; }

    public virtual DbSet<CcDocSettings> CcDocSettings { get; set; }

    public virtual DbSet<CcEditLog> CcEditLog { get; set; }

    public virtual DbSet<CcEditLogs> CcEditLogs { get; set; }

    public virtual DbSet<CcEduField> CcEduField { get; set; }

    public virtual DbSet<CcEduFieldType> CcEduFieldType { get; set; }

    public virtual DbSet<CcEduFieldTypes> CcEduFieldTypes { get; set; }

    public virtual DbSet<CcEduFields> CcEduFields { get; set; }

    public virtual DbSet<CcEduOrgCode> CcEduOrgCode { get; set; }

    public virtual DbSet<CcEduOrgCodes> CcEduOrgCodes { get; set; }

    public virtual DbSet<CcEduTheme> CcEduTheme { get; set; }

    public virtual DbSet<CcEduThemes> CcEduThemes { get; set; }

    public virtual DbSet<CcEduType> CcEduType { get; set; }

    public virtual DbSet<CcEduTypes> CcEduTypes { get; set; }

    public virtual DbSet<CcEduapp> CcEduapp { get; set; }

    public virtual DbSet<CcEduapps> CcEduapps { get; set; }

    public virtual DbSet<CcEducation> CcEducation { get; set; }

    public virtual DbSet<CcEducations> CcEducations { get; set; }

    public virtual DbSet<CcEdufieldApp> CcEdufieldApp { get; set; }

    public virtual DbSet<CcEdufieldApps> CcEdufieldApps { get; set; }

    public virtual DbSet<CcEventPresence> CcEventPresence { get; set; }

    public virtual DbSet<CcEventPresences> CcEventPresences { get; set; }

    public virtual DbSet<CcEventTheme> CcEventTheme { get; set; }

    public virtual DbSet<CcEventThemeCompl> CcEventThemeCompl { get; set; }

    public virtual DbSet<CcEventThemeCompls> CcEventThemeCompls { get; set; }

    public virtual DbSet<CcEventThemes> CcEventThemes { get; set; }

    public virtual DbSet<CcFlow> CcFlow { get; set; }

    public virtual DbSet<CcFlows> CcFlows { get; set; }

    public virtual DbSet<CcGroupCount> CcGroupCount { get; set; }

    public virtual DbSet<CcGroupCounts> CcGroupCounts { get; set; }

    public virtual DbSet<CcIndProgramTheme> CcIndProgramTheme { get; set; }

    public virtual DbSet<CcIndProgramThemes> CcIndProgramThemes { get; set; }

    public virtual DbSet<CcInoutControl> CcInoutControl { get; set; }

    public virtual DbSet<CcInoutControls> CcInoutControls { get; set; }

    public virtual DbSet<CcKcPerson> CcKcPerson { get; set; }

    public virtual DbSet<CcKcPersons> CcKcPersons { get; set; }

    public virtual DbSet<CcKnowledgeClassifier> CcKnowledgeClassifier { get; set; }

    public virtual DbSet<CcKnowledgeClassifiers> CcKnowledgeClassifiers { get; set; }

    public virtual DbSet<CcLocalStorage> CcLocalStorage { get; set; }

    public virtual DbSet<CcLocalStorages> CcLocalStorages { get; set; }

    public virtual DbSet<CcLogExport> CcLogExport { get; set; }

    public virtual DbSet<CcLogExports> CcLogExports { get; set; }

    public virtual DbSet<CcLogImport> CcLogImport { get; set; }

    public virtual DbSet<CcLogImports> CcLogImports { get; set; }

    public virtual DbSet<CcOrg> CcOrg { get; set; }

    public virtual DbSet<CcOrgs> CcOrgs { get; set; }

    public virtual DbSet<CcOssImport> CcOssImport { get; set; }

    public virtual DbSet<CcOssImports> CcOssImports { get; set; }

    public virtual DbSet<CcPeriodType> CcPeriodType { get; set; }

    public virtual DbSet<CcPeriodTypes> CcPeriodTypes { get; set; }

    public virtual DbSet<CcPfoAssessmentCriteria> CcPfoAssessmentCriteria { get; set; }

    public virtual DbSet<CcPfoAssessmentCriterias> CcPfoAssessmentCriterias { get; set; }

    public virtual DbSet<CcPfoDiv> CcPfoDiv { get; set; }

    public virtual DbSet<CcPfoDivs> CcPfoDivs { get; set; }

    public virtual DbSet<CcPfoGrafic> CcPfoGrafic { get; set; }

    public virtual DbSet<CcPfoGrafics> CcPfoGrafics { get; set; }

    public virtual DbSet<CcPfoMethod> CcPfoMethod { get; set; }

    public virtual DbSet<CcPfoMethodResult> CcPfoMethodResult { get; set; }

    public virtual DbSet<CcPfoMethodResults> CcPfoMethodResults { get; set; }

    public virtual DbSet<CcPfoMethodScale> CcPfoMethodScale { get; set; }

    public virtual DbSet<CcPfoMethodScales> CcPfoMethodScales { get; set; }

    public virtual DbSet<CcPfoMethods> CcPfoMethods { get; set; }

    public virtual DbSet<CcPfoPassword> CcPfoPassword { get; set; }

    public virtual DbSet<CcPfoPasswords> CcPfoPasswords { get; set; }

    public virtual DbSet<CcPfoPoll> CcPfoPoll { get; set; }

    public virtual DbSet<CcPfoPollProcedure> CcPfoPollProcedure { get; set; }

    public virtual DbSet<CcPfoPollProcedures> CcPfoPollProcedures { get; set; }

    public virtual DbSet<CcPfoPollResult> CcPfoPollResult { get; set; }

    public virtual DbSet<CcPfoPollResults> CcPfoPollResults { get; set; }

    public virtual DbSet<CcPfoPolls> CcPfoPolls { get; set; }

    public virtual DbSet<CcPfoPositionGroup> CcPfoPositionGroup { get; set; }

    public virtual DbSet<CcPfoPositionGroups> CcPfoPositionGroups { get; set; }

    public virtual DbSet<CcPfoQualCourseOrder> CcPfoQualCourseOrder { get; set; }

    public virtual DbSet<CcPfoQualCourseOrders> CcPfoQualCourseOrders { get; set; }

    public virtual DbSet<CcPfoQualificationCourse> CcPfoQualificationCourse { get; set; }

    public virtual DbSet<CcPfoQualificationCourses> CcPfoQualificationCourses { get; set; }

    public virtual DbSet<CcPfoQualificationPosition> CcPfoQualificationPosition { get; set; }

    public virtual DbSet<CcPfoQualificationPositions> CcPfoQualificationPositions { get; set; }

    public virtual DbSet<CcPfoRequest> CcPfoRequest { get; set; }

    public virtual DbSet<CcPfoRequestMethod> CcPfoRequestMethod { get; set; }

    public virtual DbSet<CcPfoRequestMethods> CcPfoRequestMethods { get; set; }

    public virtual DbSet<CcPfoRequestToLearning> CcPfoRequestToLearning { get; set; }

    public virtual DbSet<CcPfoRequestToLearnings> CcPfoRequestToLearnings { get; set; }

    public virtual DbSet<CcPfoRequestTransfer> CcPfoRequestTransfer { get; set; }

    public virtual DbSet<CcPfoRequestTransfers> CcPfoRequestTransfers { get; set; }

    public virtual DbSet<CcPfoRequests> CcPfoRequests { get; set; }

    public virtual DbSet<CcPfoResultGroup> CcPfoResultGroup { get; set; }

    public virtual DbSet<CcPfoResultGroups> CcPfoResultGroups { get; set; }

    public virtual DbSet<CcPfoScaleResult> CcPfoScaleResult { get; set; }

    public virtual DbSet<CcPfoScaleResults> CcPfoScaleResults { get; set; }

    public virtual DbSet<CcPmtoNppBlock> CcPmtoNppBlock { get; set; }

    public virtual DbSet<CcPmtoNppBlocks> CcPmtoNppBlocks { get; set; }

    public virtual DbSet<CcPmtoObservation> CcPmtoObservation { get; set; }

    public virtual DbSet<CcPmtoObservationDirector> CcPmtoObservationDirector { get; set; }

    public virtual DbSet<CcPmtoObservationDirectors> CcPmtoObservationDirectors { get; set; }

    public virtual DbSet<CcPmtoObservationEmployee> CcPmtoObservationEmployee { get; set; }

    public virtual DbSet<CcPmtoObservationEmployees> CcPmtoObservationEmployees { get; set; }

    public virtual DbSet<CcPmtoObservationResult> CcPmtoObservationResult { get; set; }

    public virtual DbSet<CcPmtoObservationResults> CcPmtoObservationResults { get; set; }

    public virtual DbSet<CcPmtoObservationSpecialist> CcPmtoObservationSpecialist { get; set; }

    public virtual DbSet<CcPmtoObservationSpecialists> CcPmtoObservationSpecialists { get; set; }

    public virtual DbSet<CcPmtoObservations> CcPmtoObservations { get; set; }

    public virtual DbSet<CcPmtoPosition> CcPmtoPosition { get; set; }

    public virtual DbSet<CcPmtoPositionShort> CcPmtoPositionShort { get; set; }

    public virtual DbSet<CcPmtoPositionShorts> CcPmtoPositionShorts { get; set; }

    public virtual DbSet<CcPmtoPositions> CcPmtoPositions { get; set; }

    public virtual DbSet<CcPmtoShift> CcPmtoShift { get; set; }

    public virtual DbSet<CcPmtoShifts> CcPmtoShifts { get; set; }

    public virtual DbSet<CcPollProcedure> CcPollProcedure { get; set; }

    public virtual DbSet<CcPollProcedures> CcPollProcedures { get; set; }

    public virtual DbSet<CcPrevWork> CcPrevWork { get; set; }

    public virtual DbSet<CcPrevWorks> CcPrevWorks { get; set; }

    public virtual DbSet<CcProgramDate> CcProgramDate { get; set; }

    public virtual DbSet<CcProgramDates> CcProgramDates { get; set; }

    public virtual DbSet<CcQualification> CcQualification { get; set; }

    public virtual DbSet<CcQualifications> CcQualifications { get; set; }

    public virtual DbSet<CcQuiz> CcQuiz { get; set; }

    public virtual DbSet<CcQuizs> CcQuizs { get; set; }

    public virtual DbSet<CcRejectReason> CcRejectReason { get; set; }

    public virtual DbSet<CcRejectReasons> CcRejectReasons { get; set; }

    public virtual DbSet<CcReqDateHistory> CcReqDateHistory { get; set; }

    public virtual DbSet<CcReqDateHistorys> CcReqDateHistorys { get; set; }

    public virtual DbSet<CcRequestReason> CcRequestReason { get; set; }

    public virtual DbSet<CcRequestReasons> CcRequestReasons { get; set; }

    public virtual DbSet<CcResultHistory> CcResultHistory { get; set; }

    public virtual DbSet<CcResultHistorys> CcResultHistorys { get; set; }

    public virtual DbSet<CcRtn> CcRtn { get; set; }

    public virtual DbSet<CcRtnActivity> CcRtnActivity { get; set; }

    public virtual DbSet<CcRtnActivitys> CcRtnActivitys { get; set; }

    public virtual DbSet<CcRtnApplication> CcRtnApplication { get; set; }

    public virtual DbSet<CcRtnApplicationType> CcRtnApplicationType { get; set; }

    public virtual DbSet<CcRtnApplicationTypes> CcRtnApplicationTypes { get; set; }

    public virtual DbSet<CcRtnApplications> CcRtnApplications { get; set; }

    public virtual DbSet<CcRtnControlKind> CcRtnControlKind { get; set; }

    public virtual DbSet<CcRtnControlKinds> CcRtnControlKinds { get; set; }

    public virtual DbSet<CcRtnControlResultType> CcRtnControlResultType { get; set; }

    public virtual DbSet<CcRtnControlResultTypes> CcRtnControlResultTypes { get; set; }

    public virtual DbSet<CcRtnControlType> CcRtnControlType { get; set; }

    public virtual DbSet<CcRtnControlTypes> CcRtnControlTypes { get; set; }

    public virtual DbSet<CcRtnDuty> CcRtnDuty { get; set; }

    public virtual DbSet<CcRtnDutys> CcRtnDutys { get; set; }

    public virtual DbSet<CcRtnExamMedical> CcRtnExamMedical { get; set; }

    public virtual DbSet<CcRtnExamMedicals> CcRtnExamMedicals { get; set; }

    public virtual DbSet<CcRtnExamPsychical> CcRtnExamPsychical { get; set; }

    public virtual DbSet<CcRtnExamPsychicals> CcRtnExamPsychicals { get; set; }

    public virtual DbSet<CcRtnFault> CcRtnFault { get; set; }

    public virtual DbSet<CcRtnFaults> CcRtnFaults { get; set; }

    public virtual DbSet<CcRtnKnowledge> CcRtnKnowledge { get; set; }

    public virtual DbSet<CcRtnKnowledgeSafety> CcRtnKnowledgeSafety { get; set; }

    public virtual DbSet<CcRtnKnowledgeSafetys> CcRtnKnowledgeSafetys { get; set; }

    public virtual DbSet<CcRtnKnowledgeTheory> CcRtnKnowledgeTheory { get; set; }

    public virtual DbSet<CcRtnKnowledgeTheorys> CcRtnKnowledgeTheorys { get; set; }

    public virtual DbSet<CcRtnKnowledges> CcRtnKnowledges { get; set; }

    public virtual DbSet<CcRtnLicense> CcRtnLicense { get; set; }

    public virtual DbSet<CcRtnLicense2> CcRtnLicense2 { get; set; }

    public virtual DbSet<CcRtnLicense2s> CcRtnLicense2s { get; set; }

    public virtual DbSet<CcRtnLicenseActivity> CcRtnLicenseActivity { get; set; }

    public virtual DbSet<CcRtnLicenseActivityResult> CcRtnLicenseActivityResult { get; set; }

    public virtual DbSet<CcRtnLicenseActivityResults> CcRtnLicenseActivityResults { get; set; }

    public virtual DbSet<CcRtnLicenseActivitys> CcRtnLicenseActivitys { get; set; }

    public virtual DbSet<CcRtnLicenseControl> CcRtnLicenseControl { get; set; }

    public virtual DbSet<CcRtnLicenseControlResult> CcRtnLicenseControlResult { get; set; }

    public virtual DbSet<CcRtnLicenseControlResults> CcRtnLicenseControlResults { get; set; }

    public virtual DbSet<CcRtnLicenseControls> CcRtnLicenseControls { get; set; }

    public virtual DbSet<CcRtnLicenseDoubling> CcRtnLicenseDoubling { get; set; }

    public virtual DbSet<CcRtnLicenseDoublings> CcRtnLicenseDoublings { get; set; }

    public virtual DbSet<CcRtnLicenseFault> CcRtnLicenseFault { get; set; }

    public virtual DbSet<CcRtnLicenseFaults> CcRtnLicenseFaults { get; set; }

    public virtual DbSet<CcRtnLicenseHolder> CcRtnLicenseHolder { get; set; }

    public virtual DbSet<CcRtnLicenseHolderType> CcRtnLicenseHolderType { get; set; }

    public virtual DbSet<CcRtnLicenseHolderTypes> CcRtnLicenseHolderTypes { get; set; }

    public virtual DbSet<CcRtnLicenseHolders> CcRtnLicenseHolders { get; set; }

    public virtual DbSet<CcRtnLicensePerm> CcRtnLicensePerm { get; set; }

    public virtual DbSet<CcRtnLicensePermState> CcRtnLicensePermState { get; set; }

    public virtual DbSet<CcRtnLicensePermStates> CcRtnLicensePermStates { get; set; }

    public virtual DbSet<CcRtnLicensePerms> CcRtnLicensePerms { get; set; }

    public virtual DbSet<CcRtnLicensePost> CcRtnLicensePost { get; set; }

    public virtual DbSet<CcRtnLicensePost2> CcRtnLicensePost2 { get; set; }

    public virtual DbSet<CcRtnLicensePost2s> CcRtnLicensePost2s { get; set; }

    public virtual DbSet<CcRtnLicensePostHistory> CcRtnLicensePostHistory { get; set; }

    public virtual DbSet<CcRtnLicensePostHistorys> CcRtnLicensePostHistorys { get; set; }

    public virtual DbSet<CcRtnLicensePosts> CcRtnLicensePosts { get; set; }

    public virtual DbSet<CcRtnLicensePrepareState> CcRtnLicensePrepareState { get; set; }

    public virtual DbSet<CcRtnLicensePrepareStates> CcRtnLicensePrepareStates { get; set; }

    public virtual DbSet<CcRtnLicenseQual> CcRtnLicenseQual { get; set; }

    public virtual DbSet<CcRtnLicenseQuals> CcRtnLicenseQuals { get; set; }

    public virtual DbSet<CcRtnLicenseSkill> CcRtnLicenseSkill { get; set; }

    public virtual DbSet<CcRtnLicenseSkillResult> CcRtnLicenseSkillResult { get; set; }

    public virtual DbSet<CcRtnLicenseSkillResults> CcRtnLicenseSkillResults { get; set; }

    public virtual DbSet<CcRtnLicenseSkills> CcRtnLicenseSkills { get; set; }

    public virtual DbSet<CcRtnLicenseState> CcRtnLicenseState { get; set; }

    public virtual DbSet<CcRtnLicenseStates> CcRtnLicenseStates { get; set; }

    public virtual DbSet<CcRtnLicenseTraining> CcRtnLicenseTraining { get; set; }

    public virtual DbSet<CcRtnLicenseTraining2> CcRtnLicenseTraining2 { get; set; }

    public virtual DbSet<CcRtnLicenseTraining2s> CcRtnLicenseTraining2s { get; set; }

    public virtual DbSet<CcRtnLicenseTrainings> CcRtnLicenseTrainings { get; set; }

    public virtual DbSet<CcRtnLicenses> CcRtnLicenses { get; set; }

    public virtual DbSet<CcRtnNppBlock> CcRtnNppBlock { get; set; }

    public virtual DbSet<CcRtnNppBlockStage> CcRtnNppBlockStage { get; set; }

    public virtual DbSet<CcRtnNppBlockStages> CcRtnNppBlockStages { get; set; }

    public virtual DbSet<CcRtnNppBlocks> CcRtnNppBlocks { get; set; }

    public virtual DbSet<CcRtnPermission> CcRtnPermission { get; set; }

    public virtual DbSet<CcRtnPermissionStatusType> CcRtnPermissionStatusType { get; set; }

    public virtual DbSet<CcRtnPermissionStatusTypes> CcRtnPermissionStatusTypes { get; set; }

    public virtual DbSet<CcRtnPermissionStop> CcRtnPermissionStop { get; set; }

    public virtual DbSet<CcRtnPermissionStops> CcRtnPermissionStops { get; set; }

    public virtual DbSet<CcRtnPermissions> CcRtnPermissions { get; set; }

    public virtual DbSet<CcRtnPostApproved> CcRtnPostApproved { get; set; }

    public virtual DbSet<CcRtnPostApproveds> CcRtnPostApproveds { get; set; }

    public virtual DbSet<CcRtnPostCategory> CcRtnPostCategory { get; set; }

    public virtual DbSet<CcRtnPostCategorys> CcRtnPostCategorys { get; set; }

    public virtual DbSet<CcRtnPostLicensed> CcRtnPostLicensed { get; set; }

    public virtual DbSet<CcRtnPostLicenseds> CcRtnPostLicenseds { get; set; }

    public virtual DbSet<CcRtnPostOperative> CcRtnPostOperative { get; set; }

    public virtual DbSet<CcRtnPostOperativeBlock> CcRtnPostOperativeBlock { get; set; }

    public virtual DbSet<CcRtnPostOperativeBlocks> CcRtnPostOperativeBlocks { get; set; }

    public virtual DbSet<CcRtnPostOperatives> CcRtnPostOperatives { get; set; }

    public virtual DbSet<CcRtnPostStation> CcRtnPostStation { get; set; }

    public virtual DbSet<CcRtnPostStationActivity> CcRtnPostStationActivity { get; set; }

    public virtual DbSet<CcRtnPostStationActivitys> CcRtnPostStationActivitys { get; set; }

    public virtual DbSet<CcRtnPostStationLicensed> CcRtnPostStationLicensed { get; set; }

    public virtual DbSet<CcRtnPostStationLicenseds> CcRtnPostStationLicenseds { get; set; }

    public virtual DbSet<CcRtnPostStations> CcRtnPostStations { get; set; }

    public virtual DbSet<CcRtnPostStructure> CcRtnPostStructure { get; set; }

    public virtual DbSet<CcRtnPostStructureControl> CcRtnPostStructureControl { get; set; }

    public virtual DbSet<CcRtnPostStructureControls> CcRtnPostStructureControls { get; set; }

    public virtual DbSet<CcRtnPostStructures> CcRtnPostStructures { get; set; }

    public virtual DbSet<CcRtnPostSubcategory> CcRtnPostSubcategory { get; set; }

    public virtual DbSet<CcRtnPostSubcategorys> CcRtnPostSubcategorys { get; set; }

    public virtual DbSet<CcRtnSkill> CcRtnSkill { get; set; }

    public virtual DbSet<CcRtnSkills> CcRtnSkills { get; set; }

    public virtual DbSet<CcRtns> CcRtns { get; set; }

    public virtual DbSet<CcScmtAssign> CcScmtAssign { get; set; }

    public virtual DbSet<CcScmtAssignAnswer> CcScmtAssignAnswer { get; set; }

    public virtual DbSet<CcScmtAssignAnswers> CcScmtAssignAnswers { get; set; }

    public virtual DbSet<CcScmtAssignGroup> CcScmtAssignGroup { get; set; }

    public virtual DbSet<CcScmtAssignGroupList> CcScmtAssignGroupList { get; set; }

    public virtual DbSet<CcScmtAssignGroupLists> CcScmtAssignGroupLists { get; set; }

    public virtual DbSet<CcScmtAssignGroups> CcScmtAssignGroups { get; set; }

    public virtual DbSet<CcScmtAssigns> CcScmtAssigns { get; set; }

    public virtual DbSet<CcScmtOption> CcScmtOption { get; set; }

    public virtual DbSet<CcScmtOptions> CcScmtOptions { get; set; }

    public virtual DbSet<CcSelftestCode> CcSelftestCode { get; set; }

    public virtual DbSet<CcSelftestCodes> CcSelftestCodes { get; set; }

    public virtual DbSet<CcSelftestDb> CcSelftestDb { get; set; }

    public virtual DbSet<CcSelftestDbs> CcSelftestDbs { get; set; }

    public virtual DbSet<CcSelftestExpert> CcSelftestExpert { get; set; }

    public virtual DbSet<CcSelftestExperts> CcSelftestExperts { get; set; }

    public virtual DbSet<CcSelftestModel> CcSelftestModel { get; set; }

    public virtual DbSet<CcSelftestModels> CcSelftestModels { get; set; }

    public virtual DbSet<CcSkvzActivity> CcSkvzActivity { get; set; }

    public virtual DbSet<CcSkvzActivitys> CcSkvzActivitys { get; set; }

    public virtual DbSet<CcSkvzBpApprovedObject> CcSkvzBpApprovedObject { get; set; }

    public virtual DbSet<CcSkvzBpApprovedObjects> CcSkvzBpApprovedObjects { get; set; }

    public virtual DbSet<CcSkvzCouncilMember> CcSkvzCouncilMember { get; set; }

    public virtual DbSet<CcSkvzCouncilMemberDiv> CcSkvzCouncilMemberDiv { get; set; }

    public virtual DbSet<CcSkvzCouncilMemberDivs> CcSkvzCouncilMemberDivs { get; set; }

    public virtual DbSet<CcSkvzCouncilMembers> CcSkvzCouncilMembers { get; set; }

    public virtual DbSet<CcSkvzCritPosition> CcSkvzCritPosition { get; set; }

    public virtual DbSet<CcSkvzCritPositions> CcSkvzCritPositions { get; set; }

    public virtual DbSet<CcSkvzCriteriaActivity> CcSkvzCriteriaActivity { get; set; }

    public virtual DbSet<CcSkvzCriteriaActivitys> CcSkvzCriteriaActivitys { get; set; }

    public virtual DbSet<CcSkvzCriticalityPosFactor> CcSkvzCriticalityPosFactor { get; set; }

    public virtual DbSet<CcSkvzCriticalityPosFactors> CcSkvzCriticalityPosFactors { get; set; }

    public virtual DbSet<CcSkvzDiv> CcSkvzDiv { get; set; }

    public virtual DbSet<CcSkvzDivs> CcSkvzDivs { get; set; }

    public virtual DbSet<CcSkvzEv> CcSkvzEv { get; set; }

    public virtual DbSet<CcSkvzEvs> CcSkvzEvs { get; set; }

    public virtual DbSet<CcSkvzExtractKvzType> CcSkvzExtractKvzType { get; set; }

    public virtual DbSet<CcSkvzExtractKvzTypes> CcSkvzExtractKvzTypes { get; set; }

    public virtual DbSet<CcSkvzKmap> CcSkvzKmap { get; set; }

    public virtual DbSet<CcSkvzKmapItem> CcSkvzKmapItem { get; set; }

    public virtual DbSet<CcSkvzKmapItems> CcSkvzKmapItems { get; set; }

    public virtual DbSet<CcSkvzKmaps> CcSkvzKmaps { get; set; }

    public virtual DbSet<CcSkvzKnowledgeDocsFactor> CcSkvzKnowledgeDocsFactor { get; set; }

    public virtual DbSet<CcSkvzKnowledgeDocsFactors> CcSkvzKnowledgeDocsFactors { get; set; }

    public virtual DbSet<CcSkvzMovedStage> CcSkvzMovedStage { get; set; }

    public virtual DbSet<CcSkvzMovedStages> CcSkvzMovedStages { get; set; }

    public virtual DbSet<CcSkvzPlanEv> CcSkvzPlanEv { get; set; }

    public virtual DbSet<CcSkvzPlanEvEvent> CcSkvzPlanEvEvent { get; set; }

    public virtual DbSet<CcSkvzPlanEvEvents> CcSkvzPlanEvEvents { get; set; }

    public virtual DbSet<CcSkvzPlanEvs> CcSkvzPlanEvs { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvz> CcSkvzPlanExtractKvz { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzExp> CcSkvzPlanExtractKvzExp { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzExps> CcSkvzPlanExtractKvzExps { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzFile> CcSkvzPlanExtractKvzFile { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzFiles> CcSkvzPlanExtractKvzFiles { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzWg> CcSkvzPlanExtractKvzWg { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzWgs> CcSkvzPlanExtractKvzWgs { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzs> CcSkvzPlanExtractKvzs { get; set; }

    public virtual DbSet<CcSkvzPlanInstallKvz> CcSkvzPlanInstallKvz { get; set; }

    public virtual DbSet<CcSkvzPlanInstallKvzs> CcSkvzPlanInstallKvzs { get; set; }

    public virtual DbSet<CcSkvzPollActivity> CcSkvzPollActivity { get; set; }

    public virtual DbSet<CcSkvzPollActivityCr> CcSkvzPollActivityCr { get; set; }

    public virtual DbSet<CcSkvzPollActivityCrs> CcSkvzPollActivityCrs { get; set; }

    public virtual DbSet<CcSkvzPollActivitys> CcSkvzPollActivitys { get; set; }

    public virtual DbSet<CcSkvzPollKvzPersonResult> CcSkvzPollKvzPersonResult { get; set; }

    public virtual DbSet<CcSkvzPollKvzPersonResults> CcSkvzPollKvzPersonResults { get; set; }

    public virtual DbSet<CcSkvzPollSpFinalResult> CcSkvzPollSpFinalResult { get; set; }

    public virtual DbSet<CcSkvzPollSpFinalResults> CcSkvzPollSpFinalResults { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstCr> CcSkvzPollSpFirstCr { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstCrs> CcSkvzPollSpFirstCrs { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstResult> CcSkvzPollSpFirstResult { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstResults> CcSkvzPollSpFirstResults { get; set; }

    public virtual DbSet<CcSkvzReadyReservFactor> CcSkvzReadyReservFactor { get; set; }

    public virtual DbSet<CcSkvzReadyReservFactors> CcSkvzReadyReservFactors { get; set; }

    public virtual DbSet<CcSkvzRiskFreePosFactor> CcSkvzRiskFreePosFactor { get; set; }

    public virtual DbSet<CcSkvzRiskFreePosFactors> CcSkvzRiskFreePosFactors { get; set; }

    public virtual DbSet<CcSkvzSp> CcSkvzSp { get; set; }

    public virtual DbSet<CcSkvzSpActivityCr> CcSkvzSpActivityCr { get; set; }

    public virtual DbSet<CcSkvzSpActivityCrs> CcSkvzSpActivityCrs { get; set; }

    public virtual DbSet<CcSkvzSps> CcSkvzSps { get; set; }

    public virtual DbSet<CcSkvzStation> CcSkvzStation { get; set; }

    public virtual DbSet<CcSkvzStationBlock> CcSkvzStationBlock { get; set; }

    public virtual DbSet<CcSkvzStationBlockType> CcSkvzStationBlockType { get; set; }

    public virtual DbSet<CcSkvzStationBlockTypes> CcSkvzStationBlockTypes { get; set; }

    public virtual DbSet<CcSkvzStationBlocks> CcSkvzStationBlocks { get; set; }

    public virtual DbSet<CcSkvzStations> CcSkvzStations { get; set; }

    public virtual DbSet<CcSkvzSuccessor> CcSkvzSuccessor { get; set; }

    public virtual DbSet<CcSkvzSuccessors> CcSkvzSuccessors { get; set; }

    public virtual DbSet<CcSkvzWgMember> CcSkvzWgMember { get; set; }

    public virtual DbSet<CcSkvzWgMemberToType> CcSkvzWgMemberToType { get; set; }

    public virtual DbSet<CcSkvzWgMemberToTypes> CcSkvzWgMemberToTypes { get; set; }

    public virtual DbSet<CcSkvzWgMemberType> CcSkvzWgMemberType { get; set; }

    public virtual DbSet<CcSkvzWgMemberTypes> CcSkvzWgMemberTypes { get; set; }

    public virtual DbSet<CcSkvzWgMembers> CcSkvzWgMembers { get; set; }

    public virtual DbSet<CcSkvzYearPlan> CcSkvzYearPlan { get; set; }

    public virtual DbSet<CcSkvzYearPlanEvent> CcSkvzYearPlanEvent { get; set; }

    public virtual DbSet<CcSkvzYearPlanEvents> CcSkvzYearPlanEvents { get; set; }

    public virtual DbSet<CcSkvzYearPlans> CcSkvzYearPlans { get; set; }

    public virtual DbSet<CcStaffevalAgentManagment> CcStaffevalAgentManagment { get; set; }

    public virtual DbSet<CcStaffevalAgentManagments> CcStaffevalAgentManagments { get; set; }

    public virtual DbSet<CcStaffevalAttestation> CcStaffevalAttestation { get; set; }

    public virtual DbSet<CcStaffevalAttestations> CcStaffevalAttestations { get; set; }

    public virtual DbSet<CcStaffevalColsCategorie> CcStaffevalColsCategorie { get; set; }

    public virtual DbSet<CcStaffevalColsCategories> CcStaffevalColsCategories { get; set; }

    public virtual DbSet<CcStaffevalCorrection> CcStaffevalCorrection { get; set; }

    public virtual DbSet<CcStaffevalCorrectionDiv> CcStaffevalCorrectionDiv { get; set; }

    public virtual DbSet<CcStaffevalCorrectionDivs> CcStaffevalCorrectionDivs { get; set; }

    public virtual DbSet<CcStaffevalCorrections> CcStaffevalCorrections { get; set; }

    public virtual DbSet<CcStaffevalCurator> CcStaffevalCurator { get; set; }

    public virtual DbSet<CcStaffevalCurators> CcStaffevalCurators { get; set; }

    public virtual DbSet<CcStaffevalDirection> CcStaffevalDirection { get; set; }

    public virtual DbSet<CcStaffevalDirections> CcStaffevalDirections { get; set; }

    public virtual DbSet<CcStaffevalDocument> CcStaffevalDocument { get; set; }

    public virtual DbSet<CcStaffevalDocumentCode> CcStaffevalDocumentCode { get; set; }

    public virtual DbSet<CcStaffevalDocumentCodes> CcStaffevalDocumentCodes { get; set; }

    public virtual DbSet<CcStaffevalDocuments> CcStaffevalDocuments { get; set; }

    public virtual DbSet<CcStaffevalEduHour> CcStaffevalEduHour { get; set; }

    public virtual DbSet<CcStaffevalEduHours> CcStaffevalEduHours { get; set; }

    public virtual DbSet<CcStaffevalFile> CcStaffevalFile { get; set; }

    public virtual DbSet<CcStaffevalFiles> CcStaffevalFiles { get; set; }

    public virtual DbSet<CcStaffevalFirstDocument> CcStaffevalFirstDocument { get; set; }

    public virtual DbSet<CcStaffevalFirstDocuments> CcStaffevalFirstDocuments { get; set; }

    public virtual DbSet<CcStaffevalFirstQual> CcStaffevalFirstQual { get; set; }

    public virtual DbSet<CcStaffevalFirstQuals> CcStaffevalFirstQuals { get; set; }

    public virtual DbSet<CcStaffevalInsPeriod> CcStaffevalInsPeriod { get; set; }

    public virtual DbSet<CcStaffevalInsPeriods> CcStaffevalInsPeriods { get; set; }

    public virtual DbSet<CcStaffevalInsQualification> CcStaffevalInsQualification { get; set; }

    public virtual DbSet<CcStaffevalInsQualifications> CcStaffevalInsQualifications { get; set; }

    public virtual DbSet<CcStaffevalInstructor> CcStaffevalInstructor { get; set; }

    public virtual DbSet<CcStaffevalInstructors> CcStaffevalInstructors { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsPerekr> CcStaffevalLogAgntsPerekr { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsPerekrs> CcStaffevalLogAgntsPerekrs { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsQual> CcStaffevalLogAgntsQual { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsQuals> CcStaffevalLogAgntsQuals { get; set; }

    public virtual DbSet<CcStaffevalPgPerekrest> CcStaffevalPgPerekrest { get; set; }

    public virtual DbSet<CcStaffevalPgPerekrests> CcStaffevalPgPerekrests { get; set; }

    public virtual DbSet<CcStaffevalPollProcedure> CcStaffevalPollProcedure { get; set; }

    public virtual DbSet<CcStaffevalPollProcedures> CcStaffevalPollProcedures { get; set; }

    public virtual DbSet<CcStaffevalPollsItem> CcStaffevalPollsItem { get; set; }

    public virtual DbSet<CcStaffevalPollsItems> CcStaffevalPollsItems { get; set; }

    public virtual DbSet<CcStaffevalPollsPUser> CcStaffevalPollsPUser { get; set; }

    public virtual DbSet<CcStaffevalPollsPUsers> CcStaffevalPollsPUsers { get; set; }

    public virtual DbSet<CcStaffevalPollsResult> CcStaffevalPollsResult { get; set; }

    public virtual DbSet<CcStaffevalPollsResults> CcStaffevalPollsResults { get; set; }

    public virtual DbSet<CcStaffevalPollsType> CcStaffevalPollsType { get; set; }

    public virtual DbSet<CcStaffevalPollsTypes> CcStaffevalPollsTypes { get; set; }

    public virtual DbSet<CcStaffevalPosition> CcStaffevalPosition { get; set; }

    public virtual DbSet<CcStaffevalPositionCa> CcStaffevalPositionCa { get; set; }

    public virtual DbSet<CcStaffevalPositionCas> CcStaffevalPositionCas { get; set; }

    public virtual DbSet<CcStaffevalPositions> CcStaffevalPositions { get; set; }

    public virtual DbSet<CcStaffevalPpdCa> CcStaffevalPpdCa { get; set; }

    public virtual DbSet<CcStaffevalPpdCaFirstPlan> CcStaffevalPpdCaFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalPpdCaFirstPlans> CcStaffevalPpdCaFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalPpdCas> CcStaffevalPpdCas { get; set; }

    public virtual DbSet<CcStaffevalPpdFixedCa> CcStaffevalPpdFixedCa { get; set; }

    public virtual DbSet<CcStaffevalPpdFixedCas> CcStaffevalPpdFixedCas { get; set; }

    public virtual DbSet<CcStaffevalPpdSp> CcStaffevalPpdSp { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFirstPlan> CcStaffevalPpdSpFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFirstPlans> CcStaffevalPpdSpFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFixed> CcStaffevalPpdSpFixed { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFixeds> CcStaffevalPpdSpFixeds { get; set; }

    public virtual DbSet<CcStaffevalPpdSps> CcStaffevalPpdSps { get; set; }

    public virtual DbSet<CcStaffevalPpk> CcStaffevalPpk { get; set; }

    public virtual DbSet<CcStaffevalPpkCa> CcStaffevalPpkCa { get; set; }

    public virtual DbSet<CcStaffevalPpkCas> CcStaffevalPpkCas { get; set; }

    public virtual DbSet<CcStaffevalPpkSpFromCa> CcStaffevalPpkSpFromCa { get; set; }

    public virtual DbSet<CcStaffevalPpkSpFromCas> CcStaffevalPpkSpFromCas { get; set; }

    public virtual DbSet<CcStaffevalPpks> CcStaffevalPpks { get; set; }

    public virtual DbSet<CcStaffevalProcessName> CcStaffevalProcessName { get; set; }

    public virtual DbSet<CcStaffevalProcessNames> CcStaffevalProcessNames { get; set; }

    public virtual DbSet<CcStaffevalQualification> CcStaffevalQualification { get; set; }

    public virtual DbSet<CcStaffevalQualifications> CcStaffevalQualifications { get; set; }

    public virtual DbSet<CcStaffevalRmdCa> CcStaffevalRmdCa { get; set; }

    public virtual DbSet<CcStaffevalRmdCaFirstPlan> CcStaffevalRmdCaFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalRmdCaFirstPlans> CcStaffevalRmdCaFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalRmdCas> CcStaffevalRmdCas { get; set; }

    public virtual DbSet<CcStaffevalRmdFixedCa> CcStaffevalRmdFixedCa { get; set; }

    public virtual DbSet<CcStaffevalRmdFixedCas> CcStaffevalRmdFixedCas { get; set; }

    public virtual DbSet<CcStaffevalRmdSp> CcStaffevalRmdSp { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFirstPlan> CcStaffevalRmdSpFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFirstPlans> CcStaffevalRmdSpFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFixed> CcStaffevalRmdSpFixed { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFixeds> CcStaffevalRmdSpFixeds { get; set; }

    public virtual DbSet<CcStaffevalRmdSps> CcStaffevalRmdSps { get; set; }

    public virtual DbSet<CcStaffevalRoom> CcStaffevalRoom { get; set; }

    public virtual DbSet<CcStaffevalRooms> CcStaffevalRooms { get; set; }

    public virtual DbSet<CcStaffevalStatusList> CcStaffevalStatusList { get; set; }

    public virtual DbSet<CcStaffevalStatusLists> CcStaffevalStatusLists { get; set; }

    public virtual DbSet<CcStaffevalTestPollsP> CcStaffevalTestPollsP { get; set; }

    public virtual DbSet<CcStaffevalTestPollsPs> CcStaffevalTestPollsPs { get; set; }

    public virtual DbSet<CcStaffevalTestPollsR> CcStaffevalTestPollsR { get; set; }

    public virtual DbSet<CcStaffevalTestPollsRs> CcStaffevalTestPollsRs { get; set; }

    public virtual DbSet<CcStaffevalTestPollsU> CcStaffevalTestPollsU { get; set; }

    public virtual DbSet<CcStaffevalTestPollsUs> CcStaffevalTestPollsUs { get; set; }

    public virtual DbSet<CcStaffevalTso> CcStaffevalTso { get; set; }

    public virtual DbSet<CcStaffevalTsos> CcStaffevalTsos { get; set; }

    public virtual DbSet<CcStaffevalTypeRoom> CcStaffevalTypeRoom { get; set; }

    public virtual DbSet<CcStaffevalTypeRooms> CcStaffevalTypeRooms { get; set; }

    public virtual DbSet<CcStaffevalTypeTso> CcStaffevalTypeTso { get; set; }

    public virtual DbSet<CcStaffevalTypeTsos> CcStaffevalTypeTsos { get; set; }

    public virtual DbSet<CcStaffevalUmmCa> CcStaffevalUmmCa { get; set; }

    public virtual DbSet<CcStaffevalUmmCaFirstPlan> CcStaffevalUmmCaFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalUmmCaFirstPlans> CcStaffevalUmmCaFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalUmmCas> CcStaffevalUmmCas { get; set; }

    public virtual DbSet<CcStaffevalUmmFixedCa> CcStaffevalUmmFixedCa { get; set; }

    public virtual DbSet<CcStaffevalUmmFixedCas> CcStaffevalUmmFixedCas { get; set; }

    public virtual DbSet<CcStaffevalUmmSp> CcStaffevalUmmSp { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFirstPlan> CcStaffevalUmmSpFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFirstPlans> CcStaffevalUmmSpFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFixed> CcStaffevalUmmSpFixed { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFixeds> CcStaffevalUmmSpFixeds { get; set; }

    public virtual DbSet<CcStaffevalUmmSps> CcStaffevalUmmSps { get; set; }

    public virtual DbSet<CcStaffevalUtpDepartment> CcStaffevalUtpDepartment { get; set; }

    public virtual DbSet<CcStaffevalUtpDepartments> CcStaffevalUtpDepartments { get; set; }

    public virtual DbSet<CcStaffevalUtpDiv> CcStaffevalUtpDiv { get; set; }

    public virtual DbSet<CcStaffevalUtpDivs> CcStaffevalUtpDivs { get; set; }

    public virtual DbSet<CcStaffevalUtpGroup> CcStaffevalUtpGroup { get; set; }

    public virtual DbSet<CcStaffevalUtpGroups> CcStaffevalUtpGroups { get; set; }

    public virtual DbSet<CcTemplateTheme> CcTemplateTheme { get; set; }

    public virtual DbSet<CcTemplateThemes> CcTemplateThemes { get; set; }

    public virtual DbSet<CcTheme> CcTheme { get; set; }

    public virtual DbSet<CcThemes> CcThemes { get; set; }

    public virtual DbSet<CcTrainingSubject> CcTrainingSubject { get; set; }

    public virtual DbSet<CcTrainingSubjects> CcTrainingSubjects { get; set; }

    public virtual DbSet<CcVersion> CcVersion { get; set; }

    public virtual DbSet<CcVersions> CcVersions { get; set; }

    public virtual DbSet<CcWebNotification> CcWebNotification { get; set; }

    public virtual DbSet<CcWebNotifications> CcWebNotifications { get; set; }

    public virtual DbSet<Certificate> Certificate { get; set; }

    public virtual DbSet<CertificateType> CertificateType { get; set; }

    public virtual DbSet<CertificateTypes> CertificateTypes { get; set; }

    public virtual DbSet<Certificates> Certificates { get; set; }

    public virtual DbSet<CfEducationMethods> CfEducationMethods { get; set; }

    public virtual DbSet<CfPkThemes> CfPkThemes { get; set; }

    public virtual DbSet<CfRequests> CfRequests { get; set; }

    public virtual DbSet<Change> Change { get; set; }

    public virtual DbSet<Changes> Changes { get; set; }

    public virtual DbSet<Chat> Chat { get; set; }

    public virtual DbSet<Chatbot> Chatbot { get; set; }

    public virtual DbSet<ChatbotChat> ChatbotChat { get; set; }

    public virtual DbSet<ChatbotChatbotTypes> ChatbotChatbotTypes { get; set; }

    public virtual DbSet<ChatbotChats> ChatbotChats { get; set; }

    public virtual DbSet<ChatbotStage> ChatbotStage { get; set; }

    public virtual DbSet<ChatbotStages> ChatbotStages { get; set; }

    public virtual DbSet<ChatbotType> ChatbotType { get; set; }

    public virtual DbSet<ChatbotTypes> ChatbotTypes { get; set; }

    public virtual DbSet<Chatbots> Chatbots { get; set; }

    public virtual DbSet<Chats> Chats { get; set; }

    public virtual DbSet<ClConst> ClConst { get; set; }

    public virtual DbSet<ClConsts> ClConsts { get; set; }

    public virtual DbSet<ClCourse> ClCourse { get; set; }

    public virtual DbSet<ClCourses> ClCourses { get; set; }

    public virtual DbSet<ClLocalization> ClLocalization { get; set; }

    public virtual DbSet<ClLocalizations> ClLocalizations { get; set; }

    public virtual DbSet<ClModule> ClModule { get; set; }

    public virtual DbSet<ClModules> ClModules { get; set; }

    public virtual DbSet<ClObject> ClObject { get; set; }

    public virtual DbSet<ClObjects> ClObjects { get; set; }

    public virtual DbSet<ClShape> ClShape { get; set; }

    public virtual DbSet<ClShapes> ClShapes { get; set; }

    public virtual DbSet<ClSlide> ClSlide { get; set; }

    public virtual DbSet<ClSlides> ClSlides { get; set; }

    public virtual DbSet<Coding> Coding { get; set; }

    public virtual DbSet<Codings> Codings { get; set; }

    public virtual DbSet<Collaborator> Collaborator { get; set; }

    public virtual DbSet<CollaboratorSchedule> CollaboratorSchedule { get; set; }

    public virtual DbSet<CollaboratorSchedules> CollaboratorSchedules { get; set; }

    public virtual DbSet<Collaborators> Collaborators { get; set; }

    public virtual DbSet<CommitteeMember> CommitteeMember { get; set; }

    public virtual DbSet<CommitteeMembers> CommitteeMembers { get; set; }

    public virtual DbSet<CommonAcademDebtStates> CommonAcademDebtStates { get; set; }

    public virtual DbSet<CommonAccessBlockTypes> CommonAccessBlockTypes { get; set; }

    public virtual DbSet<CommonAccessObjectTypes> CommonAccessObjectTypes { get; set; }

    public virtual DbSet<CommonAccountStatusTypes> CommonAccountStatusTypes { get; set; }

    public virtual DbSet<CommonAcquaintQuestionTypes> CommonAcquaintQuestionTypes { get; set; }

    public virtual DbSet<CommonAcquaintStates> CommonAcquaintStates { get; set; }

    public virtual DbSet<CommonActionReportTypes> CommonActionReportTypes { get; set; }

    public virtual DbSet<CommonActionStatusTypes> CommonActionStatusTypes { get; set; }

    public virtual DbSet<CommonActiveNotificationStatusTypes> CommonActiveNotificationStatusTypes { get; set; }

    public virtual DbSet<CommonAggregationTypes> CommonAggregationTypes { get; set; }

    public virtual DbSet<CommonAgreementStatusTypes> CommonAgreementStatusTypes { get; set; }

    public virtual DbSet<CommonAllOptionTypes> CommonAllOptionTypes { get; set; }

    public virtual DbSet<CommonAnnalsItemTypes> CommonAnnalsItemTypes { get; set; }

    public virtual DbSet<CommonAnnalsStates> CommonAnnalsStates { get; set; }

    public virtual DbSet<CommonApplicationStates> CommonApplicationStates { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseParameters> CommonAssessmentAppraiseParameters { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseParticipants> CommonAssessmentAppraiseParticipants { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseRecommendTypes> CommonAssessmentAppraiseRecommendTypes { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseStatuses> CommonAssessmentAppraiseStatuses { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseTypes> CommonAssessmentAppraiseTypes { get; set; }

    public virtual DbSet<CommonAssessmentExternalTypes> CommonAssessmentExternalTypes { get; set; }

    public virtual DbSet<CommonAssessmentStages> CommonAssessmentStages { get; set; }

    public virtual DbSet<CommonAvailabilityStates> CommonAvailabilityStates { get; set; }

    public virtual DbSet<CommonAzureRoleSizeTypes> CommonAzureRoleSizeTypes { get; set; }

    public virtual DbSet<CommonBackupFileTypes> CommonBackupFileTypes { get; set; }

    public virtual DbSet<CommonBudgetStateTypes> CommonBudgetStateTypes { get; set; }

    public virtual DbSet<CommonCareerReserveMaterialTypes> CommonCareerReserveMaterialTypes { get; set; }

    public virtual DbSet<CommonCareerReserveStatusTypes> CommonCareerReserveStatusTypes { get; set; }

    public virtual DbSet<CommonCareerReserveTasksTypes> CommonCareerReserveTasksTypes { get; set; }

    public virtual DbSet<CommonCareerReserveTypeTasksTypes> CommonCareerReserveTypeTasksTypes { get; set; }

    public virtual DbSet<CommonCareerTransitionDirectionTypes> CommonCareerTransitionDirectionTypes { get; set; }

    public virtual DbSet<CommonCharts> CommonCharts { get; set; }

    public virtual DbSet<CommonClApprovalStates> CommonClApprovalStates { get; set; }

    public virtual DbSet<CommonClAuthorTypes> CommonClAuthorTypes { get; set; }

    public virtual DbSet<CommonClStates> CommonClStates { get; set; }

    public virtual DbSet<CommonCollectStates> CommonCollectStates { get; set; }

    public virtual DbSet<CommonCommitteeMemberStatusTypes> CommonCommitteeMemberStatusTypes { get; set; }

    public virtual DbSet<CommonCommitteeMemberTypes> CommonCommitteeMemberTypes { get; set; }

    public virtual DbSet<CommonContactStatusTypes> CommonContactStatusTypes { get; set; }

    public virtual DbSet<CommonContentItems> CommonContentItems { get; set; }

    public virtual DbSet<CommonContestStates> CommonContestStates { get; set; }

    public virtual DbSet<CommonContestTypes> CommonContestTypes { get; set; }

    public virtual DbSet<CommonContestWebTemplates> CommonContestWebTemplates { get; set; }

    public virtual DbSet<CommonCostTypes> CommonCostTypes { get; set; }

    public virtual DbSet<CommonCourseExpertTypes> CommonCourseExpertTypes { get; set; }

    public virtual DbSet<CommonCourseImportTypes> CommonCourseImportTypes { get; set; }

    public virtual DbSet<CommonCoursePartTypes> CommonCoursePartTypes { get; set; }

    public virtual DbSet<CommonCourseTestStates> CommonCourseTestStates { get; set; }

    public virtual DbSet<CommonCovenantStatusTypes> CommonCovenantStatusTypes { get; set; }

    public virtual DbSet<CommonCurriculumTypes> CommonCurriculumTypes { get; set; }

    public virtual DbSet<CommonCwtTypes> CommonCwtTypes { get; set; }

    public virtual DbSet<CommonDayTypes> CommonDayTypes { get; set; }

    public virtual DbSet<CommonDeliveryTypes> CommonDeliveryTypes { get; set; }

    public virtual DbSet<CommonDischargeTypes> CommonDischargeTypes { get; set; }

    public virtual DbSet<CommonDocumentSentTypes> CommonDocumentSentTypes { get; set; }

    public virtual DbSet<CommonEducTypes> CommonEducTypes { get; set; }

    public virtual DbSet<CommonEducationLearningStates> CommonEducationLearningStates { get; set; }

    public virtual DbSet<CommonEducationMethodTypes> CommonEducationMethodTypes { get; set; }

    public virtual DbSet<CommonEmploymentKinds> CommonEmploymentKinds { get; set; }

    public virtual DbSet<CommonEmploymentTypes> CommonEmploymentTypes { get; set; }

    public virtual DbSet<CommonEncodingTypes> CommonEncodingTypes { get; set; }

    public virtual DbSet<CommonEstaffEventStatusTypes> CommonEstaffEventStatusTypes { get; set; }

    public virtual DbSet<CommonEvalTypes> CommonEvalTypes { get; set; }

    public virtual DbSet<CommonEventFileVisibilityTypes> CommonEventFileVisibilityTypes { get; set; }

    public virtual DbSet<CommonEventResultStatusTypes> CommonEventResultStatusTypes { get; set; }

    public virtual DbSet<CommonEventStatusTypes> CommonEventStatusTypes { get; set; }

    public virtual DbSet<CommonEventTypes> CommonEventTypes { get; set; }

    public virtual DbSet<CommonExchangeObjectTypes> CommonExchangeObjectTypes { get; set; }

    public virtual DbSet<CommonExpendedEducTypes> CommonExpendedEducTypes { get; set; }

    public virtual DbSet<CommonExpertEvalTypes> CommonExpertEvalTypes { get; set; }

    public virtual DbSet<CommonFieldNameTypes> CommonFieldNameTypes { get; set; }

    public virtual DbSet<CommonFieldTypes> CommonFieldTypes { get; set; }

    public virtual DbSet<CommonForumIconTypes> CommonForumIconTypes { get; set; }

    public virtual DbSet<CommonForumPersonInfoTypes> CommonForumPersonInfoTypes { get; set; }

    public virtual DbSet<CommonForumSmileTypes> CommonForumSmileTypes { get; set; }

    public virtual DbSet<CommonForumViewTypes> CommonForumViewTypes { get; set; }

    public virtual DbSet<CommonGoodInstanceStatusTypes> CommonGoodInstanceStatusTypes { get; set; }

    public virtual DbSet<CommonGradingOptionTypes> CommonGradingOptionTypes { get; set; }

    public virtual DbSet<CommonGraphTypes> CommonGraphTypes { get; set; }

    public virtual DbSet<CommonIndicatorTypes> CommonIndicatorTypes { get; set; }

    public virtual DbSet<CommonInteractionTypes> CommonInteractionTypes { get; set; }

    public virtual DbSet<CommonItemStatusTypes> CommonItemStatusTypes { get; set; }

    public virtual DbSet<CommonItemTypes> CommonItemTypes { get; set; }

    public virtual DbSet<CommonJoinModeTypes> CommonJoinModeTypes { get; set; }

    public virtual DbSet<CommonKeyPositionStatusTypes> CommonKeyPositionStatusTypes { get; set; }

    public virtual DbSet<CommonKeyboardTypes> CommonKeyboardTypes { get; set; }

    public virtual DbSet<CommonKnowledgePartsObjects> CommonKnowledgePartsObjects { get; set; }

    public virtual DbSet<CommonKpiCalcTypes> CommonKpiCalcTypes { get; set; }

    public virtual DbSet<CommonKpiTypes> CommonKpiTypes { get; set; }

    public virtual DbSet<CommonLanguageLevels> CommonLanguageLevels { get; set; }

    public virtual DbSet<CommonLanguages> CommonLanguages { get; set; }

    public virtual DbSet<CommonLearningCatalogs> CommonLearningCatalogs { get; set; }

    public virtual DbSet<CommonLearningDynamicsCategoryTypes> CommonLearningDynamicsCategoryTypes { get; set; }

    public virtual DbSet<CommonLearningRecordStatuss> CommonLearningRecordStatuss { get; set; }

    public virtual DbSet<CommonLearningStates> CommonLearningStates { get; set; }

    public virtual DbSet<CommonLearningStatisticsCategoryTypes> CommonLearningStatisticsCategoryTypes { get; set; }

    public virtual DbSet<CommonLearningTaskStatusTypes> CommonLearningTaskStatusTypes { get; set; }

    public virtual DbSet<CommonLectorTypes> CommonLectorTypes { get; set; }

    public virtual DbSet<CommonLessonStates> CommonLessonStates { get; set; }

    public virtual DbSet<CommonLibrarySectionWebTemplates> CommonLibrarySectionWebTemplates { get; set; }

    public virtual DbSet<CommonLinkingViews> CommonLinkingViews { get; set; }

    public virtual DbSet<CommonMaterialFormatTypes> CommonMaterialFormatTypes { get; set; }

    public virtual DbSet<CommonMonths> CommonMonths { get; set; }

    public virtual DbSet<CommonNodeTypes> CommonNodeTypes { get; set; }

    public virtual DbSet<CommonObjectResourceStates> CommonObjectResourceStates { get; set; }

    public virtual DbSet<CommonObjectflowConditionTypes> CommonObjectflowConditionTypes { get; set; }

    public virtual DbSet<CommonObjectflowOperationTypes> CommonObjectflowOperationTypes { get; set; }

    public virtual DbSet<CommonObjectiveStatusTypes> CommonObjectiveStatusTypes { get; set; }

    public virtual DbSet<CommonObjectiveSuccessStatusTypes> CommonObjectiveSuccessStatusTypes { get; set; }

    public virtual DbSet<CommonOperationTypes> CommonOperationTypes { get; set; }

    public virtual DbSet<CommonOracleDbTypes> CommonOracleDbTypes { get; set; }

    public virtual DbSet<CommonOrderStatusTypes> CommonOrderStatusTypes { get; set; }

    public virtual DbSet<CommonOrderTypes> CommonOrderTypes { get; set; }

    public virtual DbSet<CommonOutTypes> CommonOutTypes { get; set; }

    public virtual DbSet<CommonOutstaffContractTypes> CommonOutstaffContractTypes { get; set; }

    public virtual DbSet<CommonOutstaffOrderExecutionStatusTypes> CommonOutstaffOrderExecutionStatusTypes { get; set; }

    public virtual DbSet<CommonPackageStatusTypes> CommonPackageStatusTypes { get; set; }

    public virtual DbSet<CommonPackageTypes> CommonPackageTypes { get; set; }

    public virtual DbSet<CommonParticipantStates> CommonParticipantStates { get; set; }

    public virtual DbSet<CommonPassportTypes> CommonPassportTypes { get; set; }

    public virtual DbSet<CommonPaymentTypes> CommonPaymentTypes { get; set; }

    public virtual DbSet<CommonPeriodCalcTypes> CommonPeriodCalcTypes { get; set; }

    public virtual DbSet<CommonPeriodicityTypes> CommonPeriodicityTypes { get; set; }

    public virtual DbSet<CommonPerioditys> CommonPerioditys { get; set; }

    public virtual DbSet<CommonPersonnelCommitteeStatusTypes> CommonPersonnelCommitteeStatusTypes { get; set; }

    public virtual DbSet<CommonPersonnelReserveStatusTypes> CommonPersonnelReserveStatusTypes { get; set; }

    public virtual DbSet<CommonPersonnelReserveTaskStatusTypes> CommonPersonnelReserveTaskStatusTypes { get; set; }

    public virtual DbSet<CommonPlayerDisplayTypes> CommonPlayerDisplayTypes { get; set; }

    public virtual DbSet<CommonPlayerLanguages> CommonPlayerLanguages { get; set; }

    public virtual DbSet<CommonPlayerPositions> CommonPlayerPositions { get; set; }

    public virtual DbSet<CommonPlayerRubricDisplayTypes> CommonPlayerRubricDisplayTypes { get; set; }

    public virtual DbSet<CommonPlayerSendTypes> CommonPlayerSendTypes { get; set; }

    public virtual DbSet<CommonPlayerTypes> CommonPlayerTypes { get; set; }

    public virtual DbSet<CommonPollItemTypes> CommonPollItemTypes { get; set; }

    public virtual DbSet<CommonPollTypes> CommonPollTypes { get; set; }

    public virtual DbSet<CommonPortalTypes> CommonPortalTypes { get; set; }

    public virtual DbSet<CommonPositionAssignmentTypes> CommonPositionAssignmentTypes { get; set; }

    public virtual DbSet<CommonPositionTypes> CommonPositionTypes { get; set; }

    public virtual DbSet<CommonPossibleStorages> CommonPossibleStorages { get; set; }

    public virtual DbSet<CommonPrintFormTypes> CommonPrintFormTypes { get; set; }

    public virtual DbSet<CommonProctoringObjects> CommonProctoringObjects { get; set; }

    public virtual DbSet<CommonProfessionalAreas> CommonProfessionalAreas { get; set; }

    public virtual DbSet<CommonProgDisciplStates> CommonProgDisciplStates { get; set; }

    public virtual DbSet<CommonProjectStatusTypes> CommonProjectStatusTypes { get; set; }

    public virtual DbSet<CommonQualificationAssignmentStates> CommonQualificationAssignmentStates { get; set; }

    public virtual DbSet<CommonQualificationStatuss> CommonQualificationStatuss { get; set; }

    public virtual DbSet<CommonRecipientTypes> CommonRecipientTypes { get; set; }

    public virtual DbSet<CommonRecruitmentPlanStateTypes> CommonRecruitmentPlanStateTypes { get; set; }

    public virtual DbSet<CommonRegistrTypes> CommonRegistrTypes { get; set; }

    public virtual DbSet<CommonRequestStatusTypes> CommonRequestStatusTypes { get; set; }

    public virtual DbSet<CommonResourceTypes> CommonResourceTypes { get; set; }

    public virtual DbSet<CommonSentenceOptionTypes> CommonSentenceOptionTypes { get; set; }

    public virtual DbSet<CommonServerAgentTypes> CommonServerAgentTypes { get; set; }

    public virtual DbSet<CommonServerRunModes> CommonServerRunModes { get; set; }

    public virtual DbSet<CommonServerSettings> CommonServerSettings { get; set; }

    public virtual DbSet<CommonServiceProviderTypes> CommonServiceProviderTypes { get; set; }

    public virtual DbSet<CommonSocialAvatarPriorityTypes> CommonSocialAvatarPriorityTypes { get; set; }

    public virtual DbSet<CommonSpxmlTypes> CommonSpxmlTypes { get; set; }

    public virtual DbSet<CommonStatusInKnowledgeMapTypes> CommonStatusInKnowledgeMapTypes { get; set; }

    public virtual DbSet<CommonStudDocTypes> CommonStudDocTypes { get; set; }

    public virtual DbSet<CommonStudGroupStates> CommonStudGroupStates { get; set; }

    public virtual DbSet<CommonStudTypes> CommonStudTypes { get; set; }

    public virtual DbSet<CommonStudWorkStates> CommonStudWorkStates { get; set; }

    public virtual DbSet<CommonStudentStates> CommonStudentStates { get; set; }

    public virtual DbSet<CommonSubmissionStates> CommonSubmissionStates { get; set; }

    public virtual DbSet<CommonSubstitutionStatusTypes> CommonSubstitutionStatusTypes { get; set; }

    public virtual DbSet<CommonSuccessorStatusTypes> CommonSuccessorStatusTypes { get; set; }

    public virtual DbSet<CommonSupplementaryQuestionTypes> CommonSupplementaryQuestionTypes { get; set; }

    public virtual DbSet<CommonSystemEventOperationTypes> CommonSystemEventOperationTypes { get; set; }

    public virtual DbSet<CommonTemplateCacheTypes> CommonTemplateCacheTypes { get; set; }

    public virtual DbSet<CommonTemplateFieldTypes> CommonTemplateFieldTypes { get; set; }

    public virtual DbSet<CommonTenancyLimitTypes> CommonTenancyLimitTypes { get; set; }

    public virtual DbSet<CommonTestProjectTypes> CommonTestProjectTypes { get; set; }

    public virtual DbSet<CommonTimezones> CommonTimezones { get; set; }

    public virtual DbSet<CommonTraningOrderStates> CommonTraningOrderStates { get; set; }

    public virtual DbSet<CommonTriggerTypes> CommonTriggerTypes { get; set; }

    public virtual DbSet<CommonTutorStatusTypes> CommonTutorStatusTypes { get; set; }

    public virtual DbSet<CommonTypeMarks> CommonTypeMarks { get; set; }

    public virtual DbSet<CommonUploadTypes> CommonUploadTypes { get; set; }

    public virtual DbSet<CommonVacancyResponseStatusTypes> CommonVacancyResponseStatusTypes { get; set; }

    public virtual DbSet<CommonVendorStatusTypes> CommonVendorStatusTypes { get; set; }

    public virtual DbSet<CommonViewingStates> CommonViewingStates { get; set; }

    public virtual DbSet<CommonWebFilterTypes> CommonWebFilterTypes { get; set; }

    public virtual DbSet<CommonWebTemplateTypes> CommonWebTemplateTypes { get; set; }

    public virtual DbSet<CommonWeekDayTypes> CommonWeekDayTypes { get; set; }

    public virtual DbSet<CommonWeekDays> CommonWeekDays { get; set; }

    public virtual DbSet<CommonWikiCommunicationTypes> CommonWikiCommunicationTypes { get; set; }

    public virtual DbSet<CommonWorkTypes> CommonWorkTypes { get; set; }

    public virtual DbSet<CommonWorkflowOperationTypes> CommonWorkflowOperationTypes { get; set; }

    public virtual DbSet<CommonXamlInterpreters> CommonXamlInterpreters { get; set; }

    public virtual DbSet<Competence> Competence { get; set; }

    public virtual DbSet<CompetenceBlock> CompetenceBlock { get; set; }

    public virtual DbSet<CompetenceBlocks> CompetenceBlocks { get; set; }

    public virtual DbSet<CompetenceProfile> CompetenceProfile { get; set; }

    public virtual DbSet<CompetenceProfileFamily> CompetenceProfileFamily { get; set; }

    public virtual DbSet<CompetenceProfileFamilys> CompetenceProfileFamilys { get; set; }

    public virtual DbSet<CompetenceProfiles> CompetenceProfiles { get; set; }

    public virtual DbSet<Competences> Competences { get; set; }

    public virtual DbSet<ComponentPackage> ComponentPackage { get; set; }

    public virtual DbSet<ComponentPackages> ComponentPackages { get; set; }

    public virtual DbSet<CompoundProgram> CompoundProgram { get; set; }

    public virtual DbSet<CompoundProgramEducationMethods> CompoundProgramEducationMethods { get; set; }

    public virtual DbSet<CompoundPrograms> CompoundPrograms { get; set; }

    public virtual DbSet<Connection> Connection { get; set; }

    public virtual DbSet<Connections> Connections { get; set; }

    public virtual DbSet<Contact> Contact { get; set; }

    public virtual DbSet<ContactResult> ContactResult { get; set; }

    public virtual DbSet<ContactResults> ContactResults { get; set; }

    public virtual DbSet<ContactType> ContactType { get; set; }

    public virtual DbSet<ContactTypes> ContactTypes { get; set; }

    public virtual DbSet<Contacts> Contacts { get; set; }

    public virtual DbSet<Contest> Contest { get; set; }

    public virtual DbSet<ContestMarks> ContestMarks { get; set; }

    public virtual DbSet<Contests> Contests { get; set; }

    public virtual DbSet<Contract> Contract { get; set; }

    public virtual DbSet<ContractType> ContractType { get; set; }

    public virtual DbSet<ContractTypes> ContractTypes { get; set; }

    public virtual DbSet<Contracts> Contracts { get; set; }

    public virtual DbSet<CostCenter> CostCenter { get; set; }

    public virtual DbSet<CostCenters> CostCenters { get; set; }

    public virtual DbSet<Course> Course { get; set; }

    public virtual DbSet<CourseCollaborators> CourseCollaborators { get; set; }

    public virtual DbSet<CourseModule> CourseModule { get; set; }

    public virtual DbSet<CourseModules> CourseModules { get; set; }

    public virtual DbSet<CourseParts> CourseParts { get; set; }

    public virtual DbSet<Courses> Courses { get; set; }

    public virtual DbSet<Covenant> Covenant { get; set; }

    public virtual DbSet<Covenants> Covenants { get; set; }

    public virtual DbSet<CustomAdminTemplate> CustomAdminTemplate { get; set; }

    public virtual DbSet<CustomAdminTemplates> CustomAdminTemplates { get; set; }

    public virtual DbSet<CustomChatbotTemplate> CustomChatbotTemplate { get; set; }

    public virtual DbSet<CustomChatbotTemplates> CustomChatbotTemplates { get; set; }

    public virtual DbSet<CustomReport> CustomReport { get; set; }

    public virtual DbSet<CustomReports> CustomReports { get; set; }

    public virtual DbSet<CustomWebTemplate> CustomWebTemplate { get; set; }

    public virtual DbSet<CustomWebTemplateGroup> CustomWebTemplateGroup { get; set; }

    public virtual DbSet<CustomWebTemplateGroups> CustomWebTemplateGroups { get; set; }

    public virtual DbSet<CustomWebTemplates> CustomWebTemplates { get; set; }

    public virtual DbSet<DevelopmentMethod> DevelopmentMethod { get; set; }

    public virtual DbSet<DevelopmentMethods> DevelopmentMethods { get; set; }

    public virtual DbSet<DevelopmentPlan> DevelopmentPlan { get; set; }

    public virtual DbSet<DevelopmentPlans> DevelopmentPlans { get; set; }

    public virtual DbSet<DevelopmentPotential> DevelopmentPotential { get; set; }

    public virtual DbSet<DevelopmentPotentials> DevelopmentPotentials { get; set; }

    public virtual DbSet<DeviceReg> DeviceReg { get; set; }

    public virtual DbSet<DeviceRegs> DeviceRegs { get; set; }

    public virtual DbSet<DigitalSignature> DigitalSignature { get; set; }

    public virtual DbSet<DigitalSignatures> DigitalSignatures { get; set; }

    public virtual DbSet<Dimension> Dimension { get; set; }

    public virtual DbSet<Dimensions> Dimensions { get; set; }

    public virtual DbSet<Discharge> Discharge { get; set; }

    public virtual DbSet<Discharges> Discharges { get; set; }

    public virtual DbSet<DnAcademDebt> DnAcademDebt { get; set; }

    public virtual DbSet<DnAcademDebts> DnAcademDebts { get; set; }

    public virtual DbSet<DnAcademYear> DnAcademYear { get; set; }

    public virtual DbSet<DnAcademYears> DnAcademYears { get; set; }

    public virtual DbSet<DnAuditorium> DnAuditorium { get; set; }

    public virtual DbSet<DnAuditoriums> DnAuditoriums { get; set; }

    public virtual DbSet<DnBlockDiscipline> DnBlockDiscipline { get; set; }

    public virtual DbSet<DnBlockDisciplines> DnBlockDisciplines { get; set; }

    public virtual DbSet<DnControlEvent> DnControlEvent { get; set; }

    public virtual DbSet<DnControlEvents> DnControlEvents { get; set; }

    public virtual DbSet<DnControlForm> DnControlForm { get; set; }

    public virtual DbSet<DnControlForms> DnControlForms { get; set; }

    public virtual DbSet<DnDisciplBlocks> DnDisciplBlocks { get; set; }

    public virtual DbSet<DnDiscipline> DnDiscipline { get; set; }

    public virtual DbSet<DnDisciplines> DnDisciplines { get; set; }

    public virtual DbSet<DnEduCondition> DnEduCondition { get; set; }

    public virtual DbSet<DnEduConditions> DnEduConditions { get; set; }

    public virtual DbSet<DnEducatEvent> DnEducatEvent { get; set; }

    public virtual DbSet<DnEducatEvents> DnEducatEvents { get; set; }

    public virtual DbSet<DnEducatForm> DnEducatForm { get; set; }

    public virtual DbSet<DnEducatForms> DnEducatForms { get; set; }

    public virtual DbSet<DnGroupStudents> DnGroupStudents { get; set; }

    public virtual DbSet<DnIndEducatPlan> DnIndEducatPlan { get; set; }

    public virtual DbSet<DnIndEducatPlans> DnIndEducatPlans { get; set; }

    public virtual DbSet<DnLesson> DnLesson { get; set; }

    public virtual DbSet<DnLessons> DnLessons { get; set; }

    public virtual DbSet<DnProgDiscAppend> DnProgDiscAppend { get; set; }

    public virtual DbSet<DnProgDiscAppends> DnProgDiscAppends { get; set; }

    public virtual DbSet<DnProgramDiscipl> DnProgramDiscipl { get; set; }

    public virtual DbSet<DnProgramDiscipls> DnProgramDiscipls { get; set; }

    public virtual DbSet<DnRegister> DnRegister { get; set; }

    public virtual DbSet<DnRegisterStudents> DnRegisterStudents { get; set; }

    public virtual DbSet<DnRegisters> DnRegisters { get; set; }

    public virtual DbSet<DnSchedule> DnSchedule { get; set; }

    public virtual DbSet<DnSchedules> DnSchedules { get; set; }

    public virtual DbSet<DnSpecial> DnSpecial { get; set; }

    public virtual DbSet<DnSpecialization> DnSpecialization { get; set; }

    public virtual DbSet<DnSpecializations> DnSpecializations { get; set; }

    public virtual DbSet<DnSpecials> DnSpecials { get; set; }

    public virtual DbSet<DnStream> DnStream { get; set; }

    public virtual DbSet<DnStreams> DnStreams { get; set; }

    public virtual DbSet<DnStudCentrtestResult> DnStudCentrtestResult { get; set; }

    public virtual DbSet<DnStudCentrtestResults> DnStudCentrtestResults { get; set; }

    public virtual DbSet<DnStudGroup> DnStudGroup { get; set; }

    public virtual DbSet<DnStudGroups> DnStudGroups { get; set; }

    public virtual DbSet<DnStudent> DnStudent { get; set; }

    public virtual DbSet<DnStudents> DnStudents { get; set; }

    public virtual DbSet<DnSubjectPlan> DnSubjectPlan { get; set; }

    public virtual DbSet<DnSubjectPlans> DnSubjectPlans { get; set; }

    public virtual DbSet<DnTerm> DnTerm { get; set; }

    public virtual DbSet<DnTerms> DnTerms { get; set; }

    public virtual DbSet<DnTrainMethodComplex> DnTrainMethodComplex { get; set; }

    public virtual DbSet<DnTrainMethodComplexs> DnTrainMethodComplexs { get; set; }

    public virtual DbSet<DnWorkCurriculum> DnWorkCurriculum { get; set; }

    public virtual DbSet<DnWorkCurriculums> DnWorkCurriculums { get; set; }

    public virtual DbSet<DocType> DocType { get; set; }

    public virtual DbSet<DocTypes> DocTypes { get; set; }

    public virtual DbSet<Document> Document { get; set; }

    public virtual DbSet<DocumentCollaborators> DocumentCollaborators { get; set; }

    public virtual DbSet<DocumentCommentEntry> DocumentCommentEntry { get; set; }

    public virtual DbSet<DocumentCommentEntrys> DocumentCommentEntrys { get; set; }

    public virtual DbSet<Documents> Documents { get; set; }

    public virtual DbSet<DownloadPackage> DownloadPackage { get; set; }

    public virtual DbSet<DownloadPackages> DownloadPackages { get; set; }

    public virtual DbSet<EducationMethod> EducationMethod { get; set; }

    public virtual DbSet<EducationMethodLectors> EducationMethodLectors { get; set; }

    public virtual DbSet<EducationMethods> EducationMethods { get; set; }

    public virtual DbSet<EducationOrg> EducationOrg { get; set; }

    public virtual DbSet<EducationOrgLectors> EducationOrgLectors { get; set; }

    public virtual DbSet<EducationOrgs> EducationOrgs { get; set; }

    public virtual DbSet<EducationPlan> EducationPlan { get; set; }

    public virtual DbSet<EducationPlanCollaborators> EducationPlanCollaborators { get; set; }

    public virtual DbSet<EducationPlans> EducationPlans { get; set; }

    public virtual DbSet<EducationProgram> EducationProgram { get; set; }

    public virtual DbSet<EducationProgramEducationMethods> EducationProgramEducationMethods { get; set; }

    public virtual DbSet<EducationPrograms> EducationPrograms { get; set; }

    public virtual DbSet<EfficiencyEstimation> EfficiencyEstimation { get; set; }

    public virtual DbSet<EfficiencyEstimations> EfficiencyEstimations { get; set; }

    public virtual DbSet<EstaffEvent> EstaffEvent { get; set; }

    public virtual DbSet<EstaffEventType> EstaffEventType { get; set; }

    public virtual DbSet<EstaffEventTypes> EstaffEventTypes { get; set; }

    public virtual DbSet<EstaffEvents> EstaffEvents { get; set; }

    public virtual DbSet<Event> Event { get; set; }

    public virtual DbSet<EventAssessmentPlan> EventAssessmentPlan { get; set; }

    public virtual DbSet<EventAssessmentPlans> EventAssessmentPlans { get; set; }

    public virtual DbSet<EventCollaborators> EventCollaborators { get; set; }

    public virtual DbSet<EventGroups> EventGroups { get; set; }

    public virtual DbSet<EventLectors> EventLectors { get; set; }

    public virtual DbSet<EventObjectResources> EventObjectResources { get; set; }

    public virtual DbSet<EventPhases> EventPhases { get; set; }

    public virtual DbSet<EventResult> EventResult { get; set; }

    public virtual DbSet<EventResultType> EventResultType { get; set; }

    public virtual DbSet<EventResultTypes> EventResultTypes { get; set; }

    public virtual DbSet<EventResults> EventResults { get; set; }

    public virtual DbSet<EventType> EventType { get; set; }

    public virtual DbSet<EventTypes> EventTypes { get; set; }

    public virtual DbSet<Events> Events { get; set; }

    public virtual DbSet<ExchangeServer> ExchangeServer { get; set; }

    public virtual DbSet<ExchangeServers> ExchangeServers { get; set; }

    public virtual DbSet<ExclusionReason> ExclusionReason { get; set; }

    public virtual DbSet<ExclusionReasons> ExclusionReasons { get; set; }

    public virtual DbSet<Exercise> Exercise { get; set; }

    public virtual DbSet<Exercises> Exercises { get; set; }

    public virtual DbSet<Expense> Expense { get; set; }

    public virtual DbSet<ExpenseItem> ExpenseItem { get; set; }

    public virtual DbSet<ExpenseItems> ExpenseItems { get; set; }

    public virtual DbSet<Expenses> Expenses { get; set; }

    public virtual DbSet<Expert> Expert { get; set; }

    public virtual DbSet<ExpertQuestion> ExpertQuestion { get; set; }

    public virtual DbSet<ExpertQuestions> ExpertQuestions { get; set; }

    public virtual DbSet<Experts> Experts { get; set; }

    public virtual DbSet<ExternalSystem> ExternalSystem { get; set; }

    public virtual DbSet<ExternalSystems> ExternalSystems { get; set; }

    public virtual DbSet<FfSppk> FfSppk { get; set; }

    public virtual DbSet<FfSppkDates> FfSppkDates { get; set; }

    public virtual DbSet<FfSppkPersons> FfSppkPersons { get; set; }

    public virtual DbSet<FileSource> FileSource { get; set; }

    public virtual DbSet<FileSources> FileSources { get; set; }

    public virtual DbSet<Forum> Forum { get; set; }

    public virtual DbSet<ForumEntry> ForumEntry { get; set; }

    public virtual DbSet<ForumEntrys> ForumEntrys { get; set; }

    public virtual DbSet<ForumThemeReadByCollaborator> ForumThemeReadByCollaborator { get; set; }

    public virtual DbSet<ForumThemeReadByCollaborators> ForumThemeReadByCollaborators { get; set; }

    public virtual DbSet<Forums> Forums { get; set; }

    public virtual DbSet<FtLastIndex> FtLastIndex { get; set; }

    public virtual DbSet<FuncManagers> FuncManagers { get; set; }

    public virtual DbSet<Good> Good { get; set; }

    public virtual DbSet<GoodInstance> GoodInstance { get; set; }

    public virtual DbSet<GoodInstances> GoodInstances { get; set; }

    public virtual DbSet<GoodType> GoodType { get; set; }

    public virtual DbSet<GoodTypes> GoodTypes { get; set; }

    public virtual DbSet<Goods> Goods { get; set; }

    public virtual DbSet<Grade> Grade { get; set; }

    public virtual DbSet<Grades> Grades { get; set; }

    public virtual DbSet<Group> Group { get; set; }

    public virtual DbSet<GroupCollaborators> GroupCollaborators { get; set; }

    public virtual DbSet<Groups> Groups { get; set; }

    public virtual DbSet<Host> Host { get; set; }

    public virtual DbSet<Hosts> Hosts { get; set; }

    public virtual DbSet<IndProgPassLog> IndProgPassLog { get; set; }

    public virtual DbSet<Indicator> Indicator { get; set; }

    public virtual DbSet<Indicators> Indicators { get; set; }

    public virtual DbSet<Invoice> Invoice { get; set; }

    public virtual DbSet<Invoices> Invoices { get; set; }

    public virtual DbSet<Item> Item { get; set; }

    public virtual DbSet<Items> Items { get; set; }

    public virtual DbSet<KeyPosition> KeyPosition { get; set; }

    public virtual DbSet<KeyPositionThreat> KeyPositionThreat { get; set; }

    public virtual DbSet<KeyPositionThreats> KeyPositionThreats { get; set; }

    public virtual DbSet<KeyPositions> KeyPositions { get; set; }

    public virtual DbSet<KnowledgeClassifier> KnowledgeClassifier { get; set; }

    public virtual DbSet<KnowledgeClassifiers> KnowledgeClassifiers { get; set; }

    public virtual DbSet<KnowledgeObjects> KnowledgeObjects { get; set; }

    public virtual DbSet<KnowledgePart> KnowledgePart { get; set; }

    public virtual DbSet<KnowledgePartLevel> KnowledgePartLevel { get; set; }

    public virtual DbSet<KnowledgePartLevels> KnowledgePartLevels { get; set; }

    public virtual DbSet<KnowledgePartType> KnowledgePartType { get; set; }

    public virtual DbSet<KnowledgePartTypes> KnowledgePartTypes { get; set; }

    public virtual DbSet<KnowledgeParts> KnowledgeParts { get; set; }

    public virtual DbSet<KnowledgeProfile> KnowledgeProfile { get; set; }

    public virtual DbSet<KnowledgeProfiles> KnowledgeProfiles { get; set; }

    public virtual DbSet<Knowledges> Knowledges { get; set; }

    public virtual DbSet<Kpi> Kpi { get; set; }

    public virtual DbSet<KpiProfile> KpiProfile { get; set; }

    public virtual DbSet<KpiProfiles> KpiProfiles { get; set; }

    public virtual DbSet<KpiValue> KpiValue { get; set; }

    public virtual DbSet<KpiValues> KpiValues { get; set; }

    public virtual DbSet<Kpis> Kpis { get; set; }

    public virtual DbSet<Learning> Learning { get; set; }

    public virtual DbSet<LearningPart> LearningPart { get; set; }

    public virtual DbSet<LearningParts> LearningParts { get; set; }

    public virtual DbSet<LearningRecord> LearningRecord { get; set; }

    public virtual DbSet<LearningRecords> LearningRecords { get; set; }

    public virtual DbSet<LearningStorage> LearningStorage { get; set; }

    public virtual DbSet<LearningStorages> LearningStorages { get; set; }

    public virtual DbSet<LearningTask> LearningTask { get; set; }

    public virtual DbSet<LearningTaskResult> LearningTaskResult { get; set; }

    public virtual DbSet<LearningTaskResults> LearningTaskResults { get; set; }

    public virtual DbSet<LearningTasks> LearningTasks { get; set; }

    public virtual DbSet<Learnings> Learnings { get; set; }

    public virtual DbSet<Lector> Lector { get; set; }

    public virtual DbSet<Lectors> Lectors { get; set; }

    public virtual DbSet<Level> Level { get; set; }

    public virtual DbSet<Levels> Levels { get; set; }

    public virtual DbSet<LibraryMaterial> LibraryMaterial { get; set; }

    public virtual DbSet<LibraryMaterialComment> LibraryMaterialComment { get; set; }

    public virtual DbSet<LibraryMaterialComments> LibraryMaterialComments { get; set; }

    public virtual DbSet<LibraryMaterialFormat> LibraryMaterialFormat { get; set; }

    public virtual DbSet<LibraryMaterialFormats> LibraryMaterialFormats { get; set; }

    public virtual DbSet<LibraryMaterialItem> LibraryMaterialItem { get; set; }

    public virtual DbSet<LibraryMaterialItems> LibraryMaterialItems { get; set; }

    public virtual DbSet<LibraryMaterialLog> LibraryMaterialLog { get; set; }

    public virtual DbSet<LibraryMaterialObjects> LibraryMaterialObjects { get; set; }

    public virtual DbSet<LibraryMaterialSourceType> LibraryMaterialSourceType { get; set; }

    public virtual DbSet<LibraryMaterialSourceTypes> LibraryMaterialSourceTypes { get; set; }

    public virtual DbSet<LibraryMaterialType> LibraryMaterialType { get; set; }

    public virtual DbSet<LibraryMaterialTypes> LibraryMaterialTypes { get; set; }

    public virtual DbSet<LibraryMaterialViewing> LibraryMaterialViewing { get; set; }

    public virtual DbSet<LibraryMaterialViewings> LibraryMaterialViewings { get; set; }

    public virtual DbSet<LibraryMaterials> LibraryMaterials { get; set; }

    public virtual DbSet<LibraryPlayer> LibraryPlayer { get; set; }

    public virtual DbSet<LibraryPlayers> LibraryPlayers { get; set; }

    public virtual DbSet<LibrarySection> LibrarySection { get; set; }

    public virtual DbSet<LibrarySections> LibrarySections { get; set; }

    public virtual DbSet<LibrarySystem> LibrarySystem { get; set; }

    public virtual DbSet<LibrarySystems> LibrarySystems { get; set; }

    public virtual DbSet<License> License { get; set; }

    public virtual DbSet<Licenses> Licenses { get; set; }

    public virtual DbSet<Like> Like { get; set; }

    public virtual DbSet<Likes> Likes { get; set; }

    public virtual DbSet<MessengerService> MessengerService { get; set; }

    public virtual DbSet<MessengerServices> MessengerServices { get; set; }

    public virtual DbSet<MobileAppConfig> MobileAppConfig { get; set; }

    public virtual DbSet<MobileAppConfigs> MobileAppConfigs { get; set; }

    public virtual DbSet<Notification> Notification { get; set; }

    public virtual DbSet<NotificationSystem> NotificationSystem { get; set; }

    public virtual DbSet<NotificationSystems> NotificationSystems { get; set; }

    public virtual DbSet<NotificationTemplate> NotificationTemplate { get; set; }

    public virtual DbSet<NotificationTemplates> NotificationTemplates { get; set; }

    public virtual DbSet<Notifications> Notifications { get; set; }

    public virtual DbSet<ObjectData> ObjectData { get; set; }

    public virtual DbSet<ObjectDataType> ObjectDataType { get; set; }

    public virtual DbSet<ObjectDataTypes> ObjectDataTypes { get; set; }

    public virtual DbSet<ObjectDatas> ObjectDatas { get; set; }

    public virtual DbSet<ObjectExperts> ObjectExperts { get; set; }

    public virtual DbSet<ObjectResource> ObjectResource { get; set; }

    public virtual DbSet<ObjectResources> ObjectResources { get; set; }

    public virtual DbSet<ObjectVersion> ObjectVersion { get; set; }

    public virtual DbSet<ObjectVersions> ObjectVersions { get; set; }

    public virtual DbSet<Objectflow> Objectflow { get; set; }

    public virtual DbSet<Objectflows> Objectflows { get; set; }

    public virtual DbSet<ObjectiveTranslate> ObjectiveTranslate { get; set; }

    public virtual DbSet<ObjectiveTranslates> ObjectiveTranslates { get; set; }

    public virtual DbSet<Operation> Operation { get; set; }

    public virtual DbSet<Operations> Operations { get; set; }

    public virtual DbSet<Order> Order { get; set; }

    public virtual DbSet<OrderType> OrderType { get; set; }

    public virtual DbSet<OrderTypes> OrderTypes { get; set; }

    public virtual DbSet<OrderedCollaborators> OrderedCollaborators { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<Org> Org { get; set; }

    public virtual DbSet<OrgVendorState> OrgVendorState { get; set; }

    public virtual DbSet<OrgVendorStates> OrgVendorStates { get; set; }

    public virtual DbSet<Orgs> Orgs { get; set; }

    public virtual DbSet<OutstaffAdditionalWork> OutstaffAdditionalWork { get; set; }

    public virtual DbSet<OutstaffAdditionalWorks> OutstaffAdditionalWorks { get; set; }

    public virtual DbSet<OutstaffContract> OutstaffContract { get; set; }

    public virtual DbSet<OutstaffContracts> OutstaffContracts { get; set; }

    public virtual DbSet<OutstaffOrder> OutstaffOrder { get; set; }

    public virtual DbSet<OutstaffOrderExecution> OutstaffOrderExecution { get; set; }

    public virtual DbSet<OutstaffOrderExecutionStages> OutstaffOrderExecutionStages { get; set; }

    public virtual DbSet<OutstaffOrderExecutions> OutstaffOrderExecutions { get; set; }

    public virtual DbSet<OutstaffOrders> OutstaffOrders { get; set; }

    public virtual DbSet<OutstaffProvider> OutstaffProvider { get; set; }

    public virtual DbSet<OutstaffProviders> OutstaffProviders { get; set; }

    public virtual DbSet<OutstaffTypeMaterial> OutstaffTypeMaterial { get; set; }

    public virtual DbSet<OutstaffTypeMaterials> OutstaffTypeMaterials { get; set; }

    public virtual DbSet<OverrideWebTemplate> OverrideWebTemplate { get; set; }

    public virtual DbSet<OverrideWebTemplates> OverrideWebTemplates { get; set; }

    public virtual DbSet<Pa> Pa { get; set; }

    public virtual DbSet<Participant> Participant { get; set; }

    public virtual DbSet<Participants> Participants { get; set; }

    public virtual DbSet<Pas> Pas { get; set; }

    public virtual DbSet<PayPhase> PayPhase { get; set; }

    public virtual DbSet<PayPhases> PayPhases { get; set; }

    public virtual DbSet<PayStage> PayStage { get; set; }

    public virtual DbSet<PayStages> PayStages { get; set; }

    public virtual DbSet<Payment> Payment { get; set; }

    public virtual DbSet<PaymentType> PaymentType { get; set; }

    public virtual DbSet<PaymentTypes> PaymentTypes { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<PersonObjectLink> PersonObjectLink { get; set; }

    public virtual DbSet<PersonObjectLinkObjects> PersonObjectLinkObjects { get; set; }

    public virtual DbSet<PersonObjectLinks> PersonObjectLinks { get; set; }

    public virtual DbSet<PersonObjectProfile> PersonObjectProfile { get; set; }

    public virtual DbSet<PersonObjectProfiles> PersonObjectProfiles { get; set; }

    public virtual DbSet<PersonalChats> PersonalChats { get; set; }

    public virtual DbSet<PersonnelCommittee> PersonnelCommittee { get; set; }

    public virtual DbSet<PersonnelCommittees> PersonnelCommittees { get; set; }

    public virtual DbSet<PersonnelReserve> PersonnelReserve { get; set; }

    public virtual DbSet<PersonnelReserves> PersonnelReserves { get; set; }

    public virtual DbSet<Place> Place { get; set; }

    public virtual DbSet<Places> Places { get; set; }

    public virtual DbSet<Plugin> Plugin { get; set; }

    public virtual DbSet<Plugins> Plugins { get; set; }

    public virtual DbSet<Poll> Poll { get; set; }

    public virtual DbSet<PollProcedure> PollProcedure { get; set; }

    public virtual DbSet<PollProcedures> PollProcedures { get; set; }

    public virtual DbSet<PollResult> PollResult { get; set; }

    public virtual DbSet<PollResults> PollResults { get; set; }

    public virtual DbSet<Polls> Polls { get; set; }

    public virtual DbSet<Position> Position { get; set; }

    public virtual DbSet<PositionAssessmentForm> PositionAssessmentForm { get; set; }

    public virtual DbSet<PositionAssessmentForms> PositionAssessmentForms { get; set; }

    public virtual DbSet<PositionCommon> PositionCommon { get; set; }

    public virtual DbSet<PositionCommonInstruction> PositionCommonInstruction { get; set; }

    public virtual DbSet<PositionCommonInstructions> PositionCommonInstructions { get; set; }

    public virtual DbSet<PositionCommons> PositionCommons { get; set; }

    public virtual DbSet<PositionFamily> PositionFamily { get; set; }

    public virtual DbSet<PositionFamilys> PositionFamilys { get; set; }

    public virtual DbSet<PositionLevel> PositionLevel { get; set; }

    public virtual DbSet<PositionLevels> PositionLevels { get; set; }

    public virtual DbSet<Positions> Positions { get; set; }

    public virtual DbSet<PresenceState> PresenceState { get; set; }

    public virtual DbSet<PresenceStates> PresenceStates { get; set; }

    public virtual DbSet<PrintForm> PrintForm { get; set; }

    public virtual DbSet<PrintForms> PrintForms { get; set; }

    public virtual DbSet<ProctoringSystem> ProctoringSystem { get; set; }

    public virtual DbSet<ProctoringSystems> ProctoringSystems { get; set; }

    public virtual DbSet<ProfessionalArea> ProfessionalArea { get; set; }

    public virtual DbSet<ProfessionalAreas> ProfessionalAreas { get; set; }

    public virtual DbSet<Profile> Profile { get; set; }

    public virtual DbSet<Profiles> Profiles { get; set; }

    public virtual DbSet<ProfilingRecord> ProfilingRecord { get; set; }

    public virtual DbSet<ProfilingRecords> ProfilingRecords { get; set; }

    public virtual DbSet<Project> Project { get; set; }

    public virtual DbSet<ProjectParticipant> ProjectParticipant { get; set; }

    public virtual DbSet<ProjectParticipants> ProjectParticipants { get; set; }

    public virtual DbSet<Projects> Projects { get; set; }

    public virtual DbSet<Provider> Provider { get; set; }

    public virtual DbSet<Providers> Providers { get; set; }

    public virtual DbSet<Pryce> Pryce { get; set; }

    public virtual DbSet<Pryces> Pryces { get; set; }

    public virtual DbSet<Qualification> Qualification { get; set; }

    public virtual DbSet<QualificationAssignment> QualificationAssignment { get; set; }

    public virtual DbSet<QualificationAssignments> QualificationAssignments { get; set; }

    public virtual DbSet<Qualifications> Qualifications { get; set; }

    public virtual DbSet<Rating> Rating { get; set; }

    public virtual DbSet<Ratings> Ratings { get; set; }

    public virtual DbSet<ReadinessLevel> ReadinessLevel { get; set; }

    public virtual DbSet<ReadinessLevels> ReadinessLevels { get; set; }

    public virtual DbSet<Recommendation> Recommendation { get; set; }

    public virtual DbSet<Recommendations> Recommendations { get; set; }

    public virtual DbSet<RecruitmentMethod> RecruitmentMethod { get; set; }

    public virtual DbSet<RecruitmentMethods> RecruitmentMethods { get; set; }

    public virtual DbSet<RecruitmentPlan> RecruitmentPlan { get; set; }

    public virtual DbSet<RecruitmentPlans> RecruitmentPlans { get; set; }

    public virtual DbSet<Region> Region { get; set; }

    public virtual DbSet<Regions> Regions { get; set; }

    public virtual DbSet<RemoteAction> RemoteAction { get; set; }

    public virtual DbSet<RemoteActions> RemoteActions { get; set; }

    public virtual DbSet<RemoteCollection> RemoteCollection { get; set; }

    public virtual DbSet<RemoteCollections> RemoteCollections { get; set; }

    public virtual DbSet<RemoteSecurityProfile> RemoteSecurityProfile { get; set; }

    public virtual DbSet<RemoteSecurityProfiles> RemoteSecurityProfiles { get; set; }

    public virtual DbSet<Repositorium> Repositorium { get; set; }

    public virtual DbSet<RepositoriumAuthors> RepositoriumAuthors { get; set; }

    public virtual DbSet<RepositoriumResources> RepositoriumResources { get; set; }

    public virtual DbSet<Repositoriums> Repositoriums { get; set; }

    public virtual DbSet<Reprimand> Reprimand { get; set; }

    public virtual DbSet<ReprimandType> ReprimandType { get; set; }

    public virtual DbSet<ReprimandTypes> ReprimandTypes { get; set; }

    public virtual DbSet<Reprimands> Reprimands { get; set; }

    public virtual DbSet<Request> Request { get; set; }

    public virtual DbSet<RequestCollaborators> RequestCollaborators { get; set; }

    public virtual DbSet<RequestType> RequestType { get; set; }

    public virtual DbSet<RequestTypes> RequestTypes { get; set; }

    public virtual DbSet<Requests> Requests { get; set; }

    public virtual DbSet<Resource> Resource { get; set; }

    public virtual DbSet<ResourceType> ResourceType { get; set; }

    public virtual DbSet<ResourceTypes> ResourceTypes { get; set; }

    public virtual DbSet<Resources> Resources { get; set; }

    public virtual DbSet<Response> Response { get; set; }

    public virtual DbSet<ResponseType> ResponseType { get; set; }

    public virtual DbSet<ResponseTypes> ResponseTypes { get; set; }

    public virtual DbSet<Responses> Responses { get; set; }

    public virtual DbSet<Resume> Resume { get; set; }

    public virtual DbSet<ResumeSkills> ResumeSkills { get; set; }

    public virtual DbSet<Resumes> Resumes { get; set; }

    public virtual DbSet<RiskLevel> RiskLevel { get; set; }

    public virtual DbSet<RiskLevels> RiskLevels { get; set; }

    public virtual DbSet<RiskPerspective> RiskPerspective { get; set; }

    public virtual DbSet<RiskPerspectives> RiskPerspectives { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<SalarySurvey> SalarySurvey { get; set; }

    public virtual DbSet<SalarySurveySource> SalarySurveySource { get; set; }

    public virtual DbSet<SalarySurveySources> SalarySurveySources { get; set; }

    public virtual DbSet<SalarySurveys> SalarySurveys { get; set; }

    public virtual DbSet<Sale> Sale { get; set; }

    public virtual DbSet<SaleContract> SaleContract { get; set; }

    public virtual DbSet<SaleContracts> SaleContracts { get; set; }

    public virtual DbSet<SaleStatus> SaleStatus { get; set; }

    public virtual DbSet<SaleStatuss> SaleStatuss { get; set; }

    public virtual DbSet<Sales> Sales { get; set; }

    public virtual DbSet<ScheduleDay> ScheduleDay { get; set; }

    public virtual DbSet<ScheduleDays> ScheduleDays { get; set; }

    public virtual DbSet<ScheduleType> ScheduleType { get; set; }

    public virtual DbSet<ScheduleTypes> ScheduleTypes { get; set; }

    public virtual DbSet<ScriptQueueElem> ScriptQueueElem { get; set; }

    public virtual DbSet<ScriptQueueElems> ScriptQueueElems { get; set; }

    public virtual DbSet<SectionInstruction> SectionInstruction { get; set; }

    public virtual DbSet<SectionInstructions> SectionInstructions { get; set; }

    public virtual DbSet<SelectedResume> SelectedResume { get; set; }

    public virtual DbSet<SelectedResumes> SelectedResumes { get; set; }

    public virtual DbSet<SelectedVacancy> SelectedVacancy { get; set; }

    public virtual DbSet<SelectedVacancys> SelectedVacancys { get; set; }

    public virtual DbSet<ServerAgent> ServerAgent { get; set; }

    public virtual DbSet<ServerAgents> ServerAgents { get; set; }

    public virtual DbSet<Site> Site { get; set; }

    public virtual DbSet<SiteOwnerObjects> SiteOwnerObjects { get; set; }

    public virtual DbSet<Sites> Sites { get; set; }

    public virtual DbSet<Skill> Skill { get; set; }

    public virtual DbSet<Skills> Skills { get; set; }

    public virtual DbSet<SocialEntrys> SocialEntrys { get; set; }

    public virtual DbSet<SpxmlBlobs> SpxmlBlobs { get; set; }

    public virtual DbSet<SpxmlForeignArrays> SpxmlForeignArrays { get; set; }

    public virtual DbSet<SpxmlMetadata> SpxmlMetadata { get; set; }

    public virtual DbSet<SpxmlObjects> SpxmlObjects { get; set; }

    public virtual DbSet<Statement> Statement { get; set; }

    public virtual DbSet<Statements> Statements { get; set; }

    public virtual DbSet<StatisticData> StatisticData { get; set; }

    public virtual DbSet<StatisticDatas> StatisticDatas { get; set; }

    public virtual DbSet<StatisticRec> StatisticRec { get; set; }

    public virtual DbSet<StatisticRecs> StatisticRecs { get; set; }

    public virtual DbSet<Subdivision> Subdivision { get; set; }

    public virtual DbSet<SubdivisionGroup> SubdivisionGroup { get; set; }

    public virtual DbSet<SubdivisionGroupSubdivisions> SubdivisionGroupSubdivisions { get; set; }

    public virtual DbSet<SubdivisionGroups> SubdivisionGroups { get; set; }

    public virtual DbSet<Subdivisions> Subdivisions { get; set; }

    public virtual DbSet<Submission> Submission { get; set; }

    public virtual DbSet<SubmissionRecipients> SubmissionRecipients { get; set; }

    public virtual DbSet<SubmissionType> SubmissionType { get; set; }

    public virtual DbSet<SubmissionTypes> SubmissionTypes { get; set; }

    public virtual DbSet<Submissions> Submissions { get; set; }

    public virtual DbSet<Subs> Subs { get; set; }

    public virtual DbSet<Subscription> Subscription { get; set; }

    public virtual DbSet<Subscriptions> Subscriptions { get; set; }

    public virtual DbSet<Substitution> Substitution { get; set; }

    public virtual DbSet<SubstitutionType> SubstitutionType { get; set; }

    public virtual DbSet<SubstitutionTypes> SubstitutionTypes { get; set; }

    public virtual DbSet<Substitutions> Substitutions { get; set; }

    public virtual DbSet<Successor> Successor { get; set; }

    public virtual DbSet<Successors> Successors { get; set; }

    public virtual DbSet<SupplementaryQuestion> SupplementaryQuestion { get; set; }

    public virtual DbSet<SupplementaryQuestions> SupplementaryQuestions { get; set; }

    public virtual DbSet<SystemEvent> SystemEvent { get; set; }

    public virtual DbSet<SystemEvents> SystemEvents { get; set; }

    public virtual DbSet<Tag> Tag { get; set; }

    public virtual DbSet<TaggedObjects> TaggedObjects { get; set; }

    public virtual DbSet<Tags> Tags { get; set; }

    public virtual DbSet<TalentPoolFuncManagers> TalentPoolFuncManagers { get; set; }

    public virtual DbSet<TalentPoolNomination> TalentPoolNomination { get; set; }

    public virtual DbSet<TalentPoolNominations> TalentPoolNominations { get; set; }

    public virtual DbSet<Task> Task { get; set; }

    public virtual DbSet<TaskType> TaskType { get; set; }

    public virtual DbSet<TaskTypes> TaskTypes { get; set; }

    public virtual DbSet<Tasks> Tasks { get; set; }

    public virtual DbSet<Tenancy> Tenancy { get; set; }

    public virtual DbSet<Tenancys> Tenancys { get; set; }

    public virtual DbSet<TestLearning> TestLearning { get; set; }

    public virtual DbSet<TestLearnings> TestLearnings { get; set; }

    public virtual DbSet<TestProject> TestProject { get; set; }

    public virtual DbSet<TestProjects> TestProjects { get; set; }

    public virtual DbSet<TestingSystem> TestingSystem { get; set; }

    public virtual DbSet<TestingSystems> TestingSystems { get; set; }

    public virtual DbSet<TrainingPlan> TrainingPlan { get; set; }

    public virtual DbSet<TrainingPlans> TrainingPlans { get; set; }

    public virtual DbSet<TraningOrder> TraningOrder { get; set; }

    public virtual DbSet<TraningOrders> TraningOrders { get; set; }

    public virtual DbSet<Transaction> Transaction { get; set; }

    public virtual DbSet<Transactions> Transactions { get; set; }

    public virtual DbSet<TrashDocs> TrashDocs { get; set; }

    public virtual DbSet<Tutor> Tutor { get; set; }

    public virtual DbSet<Tutors> Tutors { get; set; }

    public virtual DbSet<TypicalDevelopmentProgram> TypicalDevelopmentProgram { get; set; }

    public virtual DbSet<TypicalDevelopmentPrograms> TypicalDevelopmentPrograms { get; set; }

    public virtual DbSet<UploadPackage> UploadPackage { get; set; }

    public virtual DbSet<UploadPackages> UploadPackages { get; set; }

    public virtual DbSet<UserAssignment> UserAssignment { get; set; }

    public virtual DbSet<UserAssignments> UserAssignments { get; set; }

    public virtual DbSet<UserData> UserData { get; set; }

    public virtual DbSet<UserDatas> UserDatas { get; set; }

    public virtual DbSet<Vacancy> Vacancy { get; set; }

    public virtual DbSet<VacancyResponse> VacancyResponse { get; set; }

    public virtual DbSet<VacancyResponses> VacancyResponses { get; set; }

    public virtual DbSet<VacancySource> VacancySource { get; set; }

    public virtual DbSet<VacancySources> VacancySources { get; set; }

    public virtual DbSet<VacancySubscription> VacancySubscription { get; set; }

    public virtual DbSet<VacancySubscriptions> VacancySubscriptions { get; set; }

    public virtual DbSet<VacancyType> VacancyType { get; set; }

    public virtual DbSet<VacancyTypes> VacancyTypes { get; set; }

    public virtual DbSet<Vacancys> Vacancys { get; set; }

    public virtual DbSet<VendorState> VendorState { get; set; }

    public virtual DbSet<VendorStates> VendorStates { get; set; }

    public virtual DbSet<Verb> Verb { get; set; }

    public virtual DbSet<Verbs> Verbs { get; set; }

    public virtual DbSet<Walkthrough> Walkthrough { get; set; }

    public virtual DbSet<Walkthroughs> Walkthroughs { get; set; }

    public virtual DbSet<WebDesign> WebDesign { get; set; }

    public virtual DbSet<WebDesigns> WebDesigns { get; set; }

    public virtual DbSet<WebRule> WebRule { get; set; }

    public virtual DbSet<WebRules> WebRules { get; set; }

    public virtual DbSet<WebinarSystem> WebinarSystem { get; set; }

    public virtual DbSet<WebinarSystems> WebinarSystems { get; set; }

    public virtual DbSet<WikiArticle> WikiArticle { get; set; }

    public virtual DbSet<WikiArticleCommunication> WikiArticleCommunication { get; set; }

    public virtual DbSet<WikiArticleCommunicationType> WikiArticleCommunicationType { get; set; }

    public virtual DbSet<WikiArticleCommunicationTypes> WikiArticleCommunicationTypes { get; set; }

    public virtual DbSet<WikiArticleCommunications> WikiArticleCommunications { get; set; }

    public virtual DbSet<WikiArticleType> WikiArticleType { get; set; }

    public virtual DbSet<WikiArticleTypes> WikiArticleTypes { get; set; }

    public virtual DbSet<WikiArticles> WikiArticles { get; set; }

    public virtual DbSet<WikiBase> WikiBase { get; set; }

    public virtual DbSet<WikiBases> WikiBases { get; set; }

    public virtual DbSet<WorkSchedule> WorkSchedule { get; set; }

    public virtual DbSet<WorkSchedules> WorkSchedules { get; set; }

    public virtual DbSet<Workflow> Workflow { get; set; }

    public virtual DbSet<Workflows> Workflows { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Cyrillic_General_CI_AS");

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__account");

            entity.ToTable("account");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Account)
                .HasForeignKey<Account>(d => d.Id)
                .HasConstraintName("FK_objects_account");
        });

        modelBuilder.Entity<Accounts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__accounts");

            entity.ToTable("accounts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Balance).HasColumnName("balance");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Acquaint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaint");

            entity.ToTable("acquaint");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Acquaint)
                .HasForeignKey<Acquaint>(d => d.Id)
                .HasConstraintName("FK_objects_acquaint");
        });

        modelBuilder.Entity<AcquaintAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaint_assign");

            entity.ToTable("acquaint_assign");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AcquaintAssign)
                .HasForeignKey<AcquaintAssign>(d => d.Id)
                .HasConstraintName("FK_objects_acquaint_assign");
        });

        modelBuilder.Entity<AcquaintAssigns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaint_assigns");

            entity.ToTable("acquaint_assigns");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcquaintId).HasColumnName("acquaint_id");
            entity.Property(e => e.AttemptNum).HasColumnName("attempt_num");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NormativeDate)
                .HasColumnType("datetime")
                .HasColumnName("normative_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ReacquaintancePeriod).HasColumnName("reacquaintance_period");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<Acquaints>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaints");

            entity.ToTable("acquaints");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcquaintNum).HasColumnName("acquaint_num");
            entity.Property(e => e.AcquaintedNum).HasColumnName("acquainted_num");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Collaborators)
                .IsUnicode(false)
                .HasColumnName("collaborators");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NormativeDate)
                .HasColumnType("datetime")
                .HasColumnName("normative_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.ReacquaintancePeriod).HasColumnName("reacquaintance_period");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<ActionReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__action_report");

            entity.ToTable("action_report");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActionReport)
                .HasForeignKey<ActionReport>(d => d.Id)
                .HasConstraintName("FK_objects_action_report");
        });

        modelBuilder.Entity<ActionReports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__action_reports");

            entity.ToTable("action_reports");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.DataFileUrl)
                .IsUnicode(false)
                .HasColumnName("data_file_url");
            entity.Property(e => e.ExchangeServerId).HasColumnName("exchange_server_id");
            entity.Property(e => e.LastUploadDate)
                .HasColumnType("datetime")
                .HasColumnName("last_upload_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<ActiveLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_learning");

            entity.ToTable("active_learning");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveLearning)
                .HasForeignKey<ActiveLearning>(d => d.Id)
                .HasConstraintName("FK_objects_active_learning");
        });

        modelBuilder.Entity<ActiveLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_learnings");

            entity.ToTable("active_learnings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseName)
                .IsUnicode(false)
                .HasColumnName("course_name");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("event_name");
            entity.Property(e => e.EventStartDate)
                .HasColumnType("datetime")
                .HasColumnName("event_start_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.LastUsagePartCode)
                .IsUnicode(false)
                .HasColumnName("last_usage_part_code");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("datetime")
                .HasColumnName("max_end_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("datetime")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ActiveNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_notification");

            entity.ToTable("active_notification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveNotification)
                .HasForeignKey<ActiveNotification>(d => d.Id)
                .HasConstraintName("FK_objects_active_notification");
        });

        modelBuilder.Entity<ActiveNotifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_notifications");

            entity.ToTable("active_notifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.LastSendDate)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date");
            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.RecipientPersonId)
                .HasColumnType("xml")
                .HasColumnName("recipient_person_id");
            entity.Property(e => e.SendCounter).HasColumnName("send_counter");
            entity.Property(e => e.SendDate)
                .HasColumnType("datetime")
                .HasColumnName("send_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Subject)
                .IsUnicode(false)
                .HasColumnName("subject");
        });

        modelBuilder.Entity<ActiveTestLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_test_learning");

            entity.ToTable("active_test_learning");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveTestLearning)
                .HasForeignKey<ActiveTestLearning>(d => d.Id)
                .HasConstraintName("FK_objects_active_test_learning");
        });

        modelBuilder.Entity<ActiveTestLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_test_learnings");

            entity.ToTable("active_test_learnings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.AssessmentName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("assessment_name");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("datetime")
                .HasColumnName("max_end_date");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QuestionAnsweredNum).HasColumnName("question_answered_num");
            entity.Property(e => e.QuestionNum).HasColumnName("question_num");
            entity.Property(e => e.QuestionPassedNum).HasColumnName("question_passed_num");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("datetime")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ActiveWebTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_web_template");

            entity.ToTable("active_web_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveWebTemplate)
                .HasForeignKey<ActiveWebTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_active_web_template");
        });

        modelBuilder.Entity<ActiveWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_web_templates");

            entity.ToTable("active_web_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessRole)
                .IsUnicode(false)
                .HasColumnName("access_role");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.Hash)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("hash");
            entity.Property(e => e.Mode)
                .IsUnicode(false)
                .HasColumnName("mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity");

            entity.ToTable("activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Activity)
                .HasForeignKey<Activity>(d => d.Id)
                .HasConstraintName("FK_objects_activity");
        });

        modelBuilder.Entity<ActivityState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity_state");

            entity.ToTable("activity_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActivityState)
                .HasForeignKey<ActivityState>(d => d.Id)
                .HasConstraintName("FK_objects_activity_state");
        });

        modelBuilder.Entity<ActivityStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity_states");

            entity.ToTable("activity_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityCode)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("activity_code");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AgentJsonStr)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("agent_json_str");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Registration)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("registration");
        });

        modelBuilder.Entity<Activitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activitys");

            entity.ToTable("activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsEval).HasColumnName("is_eval");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__article");

            entity.ToTable("article");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Article)
                .HasForeignKey<Article>(d => d.Id)
                .HasConstraintName("FK_objects_article");
        });

        modelBuilder.Entity<Articles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__articles");

            entity.ToTable("articles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BookId).HasColumnName("book_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LibraryMaterialId).HasColumnName("library_material_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<Assessment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment");

            entity.ToTable("assessment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Assessment)
                .HasForeignKey<Assessment>(d => d.Id)
                .HasConstraintName("FK_objects_assessment");
        });

        modelBuilder.Entity<AssessmentAppraise>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraise");

            entity.ToTable("assessment_appraise");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentAppraise)
                .HasForeignKey<AssessmentAppraise>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_appraise");
        });

        modelBuilder.Entity<AssessmentAppraiseMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraise_matrix");

            entity.ToTable("assessment_appraise_matrix");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentAppraiseMatrix)
                .HasForeignKey<AssessmentAppraiseMatrix>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_appraise_matrix");
        });

        modelBuilder.Entity<AssessmentAppraiseMatrixs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraise_matrixs");

            entity.ToTable("assessment_appraise_matrixs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<AssessmentAppraises>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraises");

            entity.ToTable("assessment_appraises");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.ExternalDisplayOptions)
                .IsUnicode(false)
                .HasColumnName("external_display_options");
            entity.Property(e => e.FlagUsePlan).HasColumnName("flag_use_plan");
            entity.Property(e => e.IgnorePresence).HasColumnName("ignore_presence");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Player).HasColumnName("player");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebDisplay).HasColumnName("web_display");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<AssessmentCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_collaborators");

            entity.ToTable("assessment_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Title)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<AssessmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_plan");

            entity.ToTable("assessment_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentPlan)
                .HasForeignKey<AssessmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_plan");
        });

        modelBuilder.Entity<AssessmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_plans");

            entity.ToTable("assessment_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentAppraiseType)
                .IsUnicode(false)
                .HasColumnName("assessment_appraise_type");
            entity.Property(e => e.BossId).HasColumnName("boss_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CustomExperts)
                .IsUnicode(false)
                .HasColumnName("custom_experts");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .IsUnicode(false)
                .HasColumnName("department_name");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.ExpertPersonFullname)
                .IsUnicode(false)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .IsUnicode(false)
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.FlagAppraiseDepartment).HasColumnName("flag_appraise_department");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.IntegralMark).HasColumnName("integral_mark");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsWorkflowInit).HasColumnName("is_workflow_init");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowState)
                .IsUnicode(false)
                .HasColumnName("workflow_state");
        });

        modelBuilder.Entity<AssessmentResultRecommend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_result_recommend");

            entity.ToTable("assessment_result_recommend");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentResultRecommend)
                .HasForeignKey<AssessmentResultRecommend>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_result_recommend");
        });

        modelBuilder.Entity<AssessmentResultRecommends>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_result_recommends");

            entity.ToTable("assessment_result_recommends");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Assessments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessments");

            entity.ToTable("assessments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.ExternalType)
                .IsUnicode(false)
                .HasColumnName("external_type");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NotDisplayUnfinishedScore).HasColumnName("not_display_unfinished_score");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.PassingScore).HasColumnName("passing_score");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Title)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<AvailabilityPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__availability_plan");

            entity.ToTable("availability_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AvailabilityPlan)
                .HasForeignKey<AvailabilityPlan>(d => d.Id)
                .HasConstraintName("FK_objects_availability_plan");
        });

        modelBuilder.Entity<AvailabilityPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__availability_plans");

            entity.ToTable("availability_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<Banner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__banner");

            entity.ToTable("banner");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Banner)
                .HasForeignKey<Banner>(d => d.Id)
                .HasConstraintName("FK_objects_banner");
        });

        modelBuilder.Entity<Banners>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__banners");

            entity.ToTable("banners");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ImgUrl)
                .IsUnicode(false)
                .HasColumnName("img_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Zone)
                .IsUnicode(false)
                .HasColumnName("zone");
        });

        modelBuilder.Entity<Basket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__basket");

            entity.ToTable("basket");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Basket)
                .HasForeignKey<Basket>(d => d.Id)
                .HasConstraintName("FK_objects_basket");
        });

        modelBuilder.Entity<Baskets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__baskets");

            entity.ToTable("baskets");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Benefit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit");

            entity.ToTable("benefit");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Benefit)
                .HasForeignKey<Benefit>(d => d.Id)
                .HasConstraintName("FK_objects_benefit");
        });

        modelBuilder.Entity<BenefitItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit_item");

            entity.ToTable("benefit_item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BenefitItem)
                .HasForeignKey<BenefitItem>(d => d.Id)
                .HasConstraintName("FK_objects_benefit_item");
        });

        modelBuilder.Entity<BenefitItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit_items");

            entity.ToTable("benefit_items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BenefitId).HasColumnName("benefit_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Benefits>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefits");

            entity.ToTable("benefits");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog");

            entity.ToTable("blog");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Blog)
                .HasForeignKey<Blog>(d => d.Id)
                .HasConstraintName("FK_objects_blog");
        });

        modelBuilder.Entity<BlogAuthors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_authors");

            entity.ToTable("blog_authors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BlogId).HasColumnName("blog_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.IsFullModerator).HasColumnName("is_full_moderator");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_id");
        });

        modelBuilder.Entity<BlogEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entry");

            entity.ToTable("blog_entry");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BlogEntry)
                .HasForeignKey<BlogEntry>(d => d.Id)
                .HasConstraintName("FK_objects_blog_entry");
        });

        modelBuilder.Entity<BlogEntryComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entry_comment");

            entity.ToTable("blog_entry_comment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BlogEntryComment)
                .HasForeignKey<BlogEntryComment>(d => d.Id)
                .HasConstraintName("FK_objects_blog_entry_comment");
        });

        modelBuilder.Entity<BlogEntryComments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entry_comments");

            entity.ToTable("blog_entry_comments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BlogEntryId).HasColumnName("blog_entry_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("creator_name");
            entity.Property(e => e.LikeId).HasColumnName("like_id");
            entity.Property(e => e.Message)
                .IsUnicode(false)
                .HasColumnName("message");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<BlogEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entrys");

            entity.ToTable("blog_entrys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowComment).HasColumnName("allow_comment");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlogId).HasColumnName("blog_id");
            entity.Property(e => e.CommentNum).HasColumnName("comment_num");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.Labels)
                .IsUnicode(false)
                .HasColumnName("labels");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Blogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blogs");

            entity.ToTable("blogs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowAnonymousComment).HasColumnName("allow_anonymous_comment");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorsNum).HasColumnName("authors_num");
            entity.Property(e => e.CreatorFullInfo)
                .IsUnicode(false)
                .HasColumnName("creator_full_info");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PermitSubscription).HasColumnName("permit_subscription");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BonusItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_item");

            entity.ToTable("bonus_item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BonusItem)
                .HasForeignKey<BonusItem>(d => d.Id)
                .HasConstraintName("FK_objects_bonus_item");
        });

        modelBuilder.Entity<BonusItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_items");

            entity.ToTable("bonus_items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PeriodEnd)
                .HasColumnType("datetime")
                .HasColumnName("period_end");
            entity.Property(e => e.PeriodStart)
                .HasColumnType("datetime")
                .HasColumnName("period_start");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BonusProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_profile");

            entity.ToTable("bonus_profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BonusProfile)
                .HasForeignKey<BonusProfile>(d => d.Id)
                .HasConstraintName("FK_objects_bonus_profile");
        });

        modelBuilder.Entity<BonusProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_profiles");

            entity.ToTable("bonus_profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Book>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__book");

            entity.ToTable("book");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Book)
                .HasForeignKey<Book>(d => d.Id)
                .HasConstraintName("FK_objects_book");
        });

        modelBuilder.Entity<Books>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__books");

            entity.ToTable("books");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LibrarySectionId).HasColumnName("library_section_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BossType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__boss_type");

            entity.ToTable("boss_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BossType)
                .HasForeignKey<BossType>(d => d.Id)
                .HasConstraintName("FK_objects_boss_type");
        });

        modelBuilder.Entity<BossTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__boss_types");

            entity.ToTable("boss_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("xml")
                .HasColumnName("object_type");
            entity.Property(e => e.OperationId)
                .HasColumnType("xml")
                .HasColumnName("operation_id");
            entity.Property(e => e.Operations)
                .IsUnicode(false)
                .HasColumnName("operations");
        });

        modelBuilder.Entity<Bp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bp");

            entity.ToTable("bp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Bp)
                .HasForeignKey<Bp>(d => d.Id)
                .HasConstraintName("FK_objects_bp");
        });

        modelBuilder.Entity<BpRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bp_role");

            entity.ToTable("bp_role");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BpRole)
                .HasForeignKey<BpRole>(d => d.Id)
                .HasConstraintName("FK_objects_bp_role");
        });

        modelBuilder.Entity<BpRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bp_roles");

            entity.ToTable("bp_roles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<BprocessRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bprocess_roles");

            entity.ToTable("bprocess_roles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.BproleId).HasColumnName("bprole_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleName)
                .IsUnicode(false)
                .HasColumnName("role_name");
        });

        modelBuilder.Entity<BproleCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bprole_collaborators");

            entity.ToTable("bprole_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BproleId).HasColumnName("bprole_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Bps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bps");

            entity.ToTable("bps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentBpId).HasColumnName("parent_bp_id");
        });

        modelBuilder.Entity<Budget>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget");

            entity.ToTable("budget");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Budget)
                .HasForeignKey<Budget>(d => d.Id)
                .HasConstraintName("FK_objects_budget");
        });

        modelBuilder.Entity<BudgetObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_objects");

            entity.ToTable("budget_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.All).HasColumnName("all");
            entity.Property(e => e.BudgetId).HasColumnName("budget_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
        });

        modelBuilder.Entity<BudgetPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_period");

            entity.ToTable("budget_period");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BudgetPeriod)
                .HasForeignKey<BudgetPeriod>(d => d.Id)
                .HasConstraintName("FK_objects_budget_period");
        });

        modelBuilder.Entity<BudgetPeriods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_periods");

            entity.ToTable("budget_periods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PeriodType)
                .IsUnicode(false)
                .HasColumnName("period_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BudgetType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_type");

            entity.ToTable("budget_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BudgetType)
                .HasForeignKey<BudgetType>(d => d.Id)
                .HasConstraintName("FK_objects_budget_type");
        });

        modelBuilder.Entity<BudgetTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_types");

            entity.ToTable("budget_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Budgets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budgets");

            entity.ToTable("budgets");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.ExpenseItemId).HasColumnName("expense_item_id");
            entity.Property(e => e.IsApproved).HasColumnName("is_approved");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.State)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CaApprove>(entity =>
        {
            entity.ToTable("ca_approve");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaPlanId).HasColumnName("ca_plan_id");
            entity.Property(e => e.Comment)
                .HasColumnType("text")
                .HasColumnName("comment");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostDay).HasColumnName("cost_day");
            entity.Property(e => e.Division)
                .HasMaxLength(1024)
                .HasColumnName("division");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDay).HasColumnName("duration_day");
            entity.Property(e => e.EduOrgId).HasColumnName("edu_org_id");
            entity.Property(e => e.EduOrgName)
                .HasMaxLength(1024)
                .HasColumnName("edu_org_name");
            entity.Property(e => e.EmCode)
                .HasMaxLength(50)
                .HasColumnName("em_code");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.EmName)
                .HasMaxLength(1024)
                .HasColumnName("em_name");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsMass).HasColumnName("is_mass");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.StantionName)
                .HasMaxLength(1024)
                .HasColumnName("stantion_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CaPlan).WithMany(p => p.CaApprove)
                .HasForeignKey(d => d.CaPlanId)
                .HasConstraintName("FK_ca_plan_ca_approve");
        });

        modelBuilder.Entity<CaPlan>(entity =>
        {
            entity.ToTable("ca_plan");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BudgetPeriod).HasColumnName("budget_period");
            entity.Property(e => e.Phase).HasColumnName("phase");
            entity.Property(e => e.Station).HasColumnName("station");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CaPlanUpdates>(entity =>
        {
            entity.ToTable("ca_plan_updates");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaPlanId).HasColumnName("ca_plan_id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.EduOrgId).HasColumnName("edu_org_id");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsLast)
                .HasDefaultValue(true)
                .HasColumnName("is_last");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CaPlan).WithMany(p => p.CaPlanUpdates)
                .HasForeignKey(d => d.CaPlanId)
                .HasConstraintName("FK_ca_plan_updates_ca_plan");
        });

        modelBuilder.Entity<CaPlanUpdatesCost>(entity =>
        {
            entity.ToTable("ca_plan_updates_cost");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.IsLast)
                .HasDefaultValue(true)
                .HasColumnName("is_last");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CaPlanUpdatesDuration>(entity =>
        {
            entity.ToTable("ca_plan_updates_duration");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.IsLast)
                .HasDefaultValue(true)
                .HasColumnName("is_last");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CandidateSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_source");

            entity.ToTable("candidate_source");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CandidateSource)
                .HasForeignKey<CandidateSource>(d => d.Id)
                .HasConstraintName("FK_objects_candidate_source");
        });

        modelBuilder.Entity<CandidateSources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_sources");

            entity.ToTable("candidate_sources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CandidateStatusType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_status_type");

            entity.ToTable("candidate_status_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CandidateStatusType)
                .HasForeignKey<CandidateStatusType>(d => d.Id)
                .HasConstraintName("FK_objects_candidate_status_type");
        });

        modelBuilder.Entity<CandidateStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_status_types");

            entity.ToTable("candidate_status_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CareerReserve>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve");

            entity.ToTable("career_reserve");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CareerReserve)
                .HasForeignKey<CareerReserve>(d => d.Id)
                .HasConstraintName("FK_objects_career_reserve");
        });

        modelBuilder.Entity<CareerReserveTutors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve_tutors");

            entity.ToTable("career_reserve_tutors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CareerReserveId).HasColumnName("career_reserve_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsResponsible).HasColumnName("is_responsible");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanReadinessDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_readiness_date");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TutorFullname)
                .IsUnicode(false)
                .HasColumnName("tutor_fullname");
            entity.Property(e => e.TutorId).HasColumnName("tutor_id");
            entity.Property(e => e.TutorType)
                .IsUnicode(false)
                .HasColumnName("tutor_type");
        });

        modelBuilder.Entity<CareerReserveType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve_type");

            entity.ToTable("career_reserve_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CareerReserveType)
                .HasForeignKey<CareerReserveType>(d => d.Id)
                .HasConstraintName("FK_objects_career_reserve_type");
        });

        modelBuilder.Entity<CareerReserveTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve_types");

            entity.ToTable("career_reserve_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CareerReserves>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserves");

            entity.ToTable("career_reserves");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPosition)
                .IsUnicode(false)
                .HasColumnName("person_position");
            entity.Property(e => e.PersonnelReserveId).HasColumnName("personnel_reserve_id");
            entity.Property(e => e.PlanReadinessDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_readiness_date");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.PositionType)
                .IsUnicode(false)
                .HasColumnName("position_type");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CareerTrees>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_trees");

            entity.ToTable("career_trees");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CurrentPositionName)
                .IsUnicode(false)
                .HasColumnName("current_position_name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PositionCollaboratorFullname)
                .IsUnicode(false)
                .HasColumnName("position_collaborator_fullname");
            entity.Property(e => e.PositionName)
                .IsUnicode(false)
                .HasColumnName("position_name");
        });

        modelBuilder.Entity<CcAccessDivison>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_divison");

            entity.ToTable("cc_access_divison");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessDivison)
                .HasForeignKey<CcAccessDivison>(d => d.Id)
                .HasConstraintName("FK_objects_cc_access_divison");
        });

        modelBuilder.Entity<CcAccessDivisons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_divisons");

            entity.ToTable("cc_access_divisons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<CcAccessElement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_element");

            entity.ToTable("cc_access_element");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessElement)
                .HasForeignKey<CcAccessElement>(d => d.Id)
                .HasConstraintName("FK_objects_cc_access_element");
        });

        modelBuilder.Entity<CcAccessElements>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_elements");

            entity.ToTable("cc_access_elements");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.All).HasColumnName("all");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Group).HasColumnName("group");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Role)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("role");
        });

        modelBuilder.Entity<CcAccessPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_period");

            entity.ToTable("cc_access_period");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessPeriod)
                .HasForeignKey<CcAccessPeriod>(d => d.Id)
                .HasConstraintName("FK_objects_cc_access_period");
        });

        modelBuilder.Entity<CcAccessPeriods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_periods");

            entity.ToTable("cc_access_periods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcAccessTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_template");

            entity.ToTable("cc_access_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessTemplate)
                .HasForeignKey<CcAccessTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_cc_access_template");
        });

        modelBuilder.Entity<CcAccessTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_access_templates");

            entity.ToTable("cc_access_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Template).HasColumnName("template");
        });

        modelBuilder.Entity<CcAppCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_app_course");

            entity.ToTable("cc_app_course");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAppCourse)
                .HasForeignKey<CcAppCourse>(d => d.Id)
                .HasConstraintName("FK_objects_cc_app_course");
        });

        modelBuilder.Entity<CcAppCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_app_courses");

            entity.ToTable("cc_app_courses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EduObjId).HasColumnName("edu_obj_id");
            entity.Property(e => e.EduObjName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("edu_obj_name");
            entity.Property(e => e.Eduapp).HasColumnName("eduapp");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcAttestation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_attestation");

            entity.ToTable("cc_attestation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAttestation)
                .HasForeignKey<CcAttestation>(d => d.Id)
                .HasConstraintName("FK_objects_cc_attestation");
        });

        modelBuilder.Entity<CcAttestations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_attestations");

            entity.ToTable("cc_attestations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Recommend)
                .IsUnicode(false)
                .HasColumnName("recommend");
            entity.Property(e => e.Result)
                .IsUnicode(false)
                .HasColumnName("result");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<CcCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_collaborator");

            entity.ToTable("cc_collaborator");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCollaborator)
                .HasForeignKey<CcCollaborator>(d => d.Id)
                .HasConstraintName("FK_objects_cc_collaborator");
        });

        modelBuilder.Entity<CcCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_collaborators");

            entity.ToTable("cc_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ForeignPersonId).HasColumnName("foreign_person_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcContragentImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_contragent_import");

            entity.ToTable("cc_contragent_import");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcContragentImport)
                .HasForeignKey<CcContragentImport>(d => d.Id)
                .HasConstraintName("FK_objects_cc_contragent_import");
        });

        modelBuilder.Entity<CcContragentImports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_contragent_imports");

            entity.ToTable("cc_contragent_imports");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ImportDate)
                .HasColumnType("datetime")
                .HasColumnName("import_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Success).HasColumnName("success");
        });

        modelBuilder.Entity<CcCostHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_cost_history");

            entity.ToTable("cc_cost_history");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCostHistory)
                .HasForeignKey<CcCostHistory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_cost_history");
        });

        modelBuilder.Entity<CcCostHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_cost_historys");

            entity.ToTable("cc_cost_historys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcCourseDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_course_date");

            entity.ToTable("cc_course_date");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCourseDate)
                .HasForeignKey<CcCourseDate>(d => d.Id)
                .HasConstraintName("FK_objects_cc_course_date");
        });

        modelBuilder.Entity<CcCourseDates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_course_dates");

            entity.ToTable("cc_course_dates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Course).HasColumnName("course");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<CcCourseOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_course_org");

            entity.ToTable("cc_course_org");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCourseOrg)
                .HasForeignKey<CcCourseOrg>(d => d.Id)
                .HasConstraintName("FK_objects_cc_course_org");
        });

        modelBuilder.Entity<CcCourseOrgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_course_orgs");

            entity.ToTable("cc_course_orgs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcDirect>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_direct");

            entity.ToTable("cc_direct");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcDirect)
                .HasForeignKey<CcDirect>(d => d.Id)
                .HasConstraintName("FK_objects_cc_direct");
        });

        modelBuilder.Entity<CcDirects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_directs");

            entity.ToTable("cc_directs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Class)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("class");
            entity.Property(e => e.Isform).HasColumnName("isform");
            entity.Property(e => e.Method)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("method");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Object).HasColumnName("object");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CcDocField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_doc_field");

            entity.ToTable("cc_doc_field");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcDocField)
                .HasForeignKey<CcDocField>(d => d.Id)
                .HasConstraintName("FK_objects_cc_doc_field");
        });

        modelBuilder.Entity<CcDocFields>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_doc_fields");

            entity.ToTable("cc_doc_fields");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Obj)
                .IsUnicode(false)
                .HasColumnName("obj");
            entity.Property(e => e.PrintForm).HasColumnName("print_form");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CcDocSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_doc_setting");

            entity.ToTable("cc_doc_setting");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcDocSetting)
                .HasForeignKey<CcDocSetting>(d => d.Id)
                .HasConstraintName("FK_objects_cc_doc_setting");
        });

        modelBuilder.Entity<CcDocSettings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_doc_settings");

            entity.ToTable("cc_doc_settings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PrintForm).HasColumnName("print_form");
        });

        modelBuilder.Entity<CcEditLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edit_log");

            entity.ToTable("cc_edit_log");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEditLog)
                .HasForeignKey<CcEditLog>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edit_log");
        });

        modelBuilder.Entity<CcEditLogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edit_logs");

            entity.ToTable("cc_edit_logs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Action)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("action");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NewData)
                .IsUnicode(false)
                .HasColumnName("new_data");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.OldData)
                .IsUnicode(false)
                .HasColumnName("old_data");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<CcEduField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_field");

            entity.ToTable("cc_edu_field");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduField)
                .HasForeignKey<CcEduField>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edu_field");
        });

        modelBuilder.Entity<CcEduFieldType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_field_type");

            entity.ToTable("cc_edu_field_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduFieldType)
                .HasForeignKey<CcEduFieldType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edu_field_type");
        });

        modelBuilder.Entity<CcEduFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_field_types");

            entity.ToTable("cc_edu_field_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduFields>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_fields");

            entity.ToTable("cc_edu_fields");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FieldType).HasColumnName("field_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduOrgCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_org_code");

            entity.ToTable("cc_edu_org_code");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduOrgCode)
                .HasForeignKey<CcEduOrgCode>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edu_org_code");
        });

        modelBuilder.Entity<CcEduOrgCodes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_org_codes");

            entity.ToTable("cc_edu_org_codes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.Inn)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("inn");
            entity.Property(e => e.Kpp)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("kpp");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcEduTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_theme");

            entity.ToTable("cc_edu_theme");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduTheme)
                .HasForeignKey<CcEduTheme>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edu_theme");
        });

        modelBuilder.Entity<CcEduThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_themes");

            entity.ToTable("cc_edu_themes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DefaultForm)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("default_form");
            entity.Property(e => e.DefaultLector).HasColumnName("default_lector");
            entity.Property(e => e.DefaultRoom).HasColumnName("default_room");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_type");

            entity.ToTable("cc_edu_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduType)
                .HasForeignKey<CcEduType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edu_type");
        });

        modelBuilder.Entity<CcEduTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edu_types");

            entity.ToTable("cc_edu_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduapp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_eduapp");

            entity.ToTable("cc_eduapp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduapp)
                .HasForeignKey<CcEduapp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_eduapp");
        });

        modelBuilder.Entity<CcEduapps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_eduapps");

            entity.ToTable("cc_eduapps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Gpgr).HasColumnName("gpgr");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PlanPeriod).HasColumnName("plan_period");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEducation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_education");

            entity.ToTable("cc_education");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEducation)
                .HasForeignKey<CcEducation>(d => d.Id)
                .HasConstraintName("FK_objects_cc_education");
        });

        modelBuilder.Entity<CcEducations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_educations");

            entity.ToTable("cc_educations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DocNum)
                .IsUnicode(false)
                .HasColumnName("doc_num");
            entity.Property(e => e.DocType)
                .IsUnicode(false)
                .HasColumnName("doc_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Org)
                .IsUnicode(false)
                .HasColumnName("org");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Qualification)
                .IsUnicode(false)
                .HasColumnName("qualification");
            entity.Property(e => e.Specialty)
                .IsUnicode(false)
                .HasColumnName("specialty");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CcEdufieldApp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edufield_app");

            entity.ToTable("cc_edufield_app");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEdufieldApp)
                .HasForeignKey<CcEdufieldApp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_edufield_app");
        });

        modelBuilder.Entity<CcEdufieldApps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_edufield_apps");

            entity.ToTable("cc_edufield_apps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EduFieldId).HasColumnName("edu_field_id");
            entity.Property(e => e.EduappId).HasColumnName("eduapp_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcEventPresence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_event_presence");

            entity.ToTable("cc_event_presence");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEventPresence)
                .HasForeignKey<CcEventPresence>(d => d.Id)
                .HasConstraintName("FK_objects_cc_event_presence");
        });

        modelBuilder.Entity<CcEventPresences>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_event_presences");

            entity.ToTable("cc_event_presences");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcEventTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_event_theme");

            entity.ToTable("cc_event_theme");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEventTheme)
                .HasForeignKey<CcEventTheme>(d => d.Id)
                .HasConstraintName("FK_objects_cc_event_theme");
        });

        modelBuilder.Entity<CcEventThemeCompl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_event_theme_compl");

            entity.ToTable("cc_event_theme_compl");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEventThemeCompl)
                .HasForeignKey<CcEventThemeCompl>(d => d.Id)
                .HasConstraintName("FK_objects_cc_event_theme_compl");
        });

        modelBuilder.Entity<CcEventThemeCompls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_event_theme_compls");

            entity.ToTable("cc_event_theme_compls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcEventThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_event_themes");

            entity.ToTable("cc_event_themes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EventForm)
                .IsUnicode(false)
                .HasColumnName("event_form");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.Tdate)
                .HasColumnType("datetime")
                .HasColumnName("tdate");
            entity.Property(e => e.ThemeId)
                .IsUnicode(false)
                .HasColumnName("theme_id");
            entity.Property(e => e.ThemeTid).HasColumnName("theme_tid");
        });

        modelBuilder.Entity<CcFlow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_flow");

            entity.ToTable("cc_flow");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcFlow)
                .HasForeignKey<CcFlow>(d => d.Id)
                .HasConstraintName("FK_objects_cc_flow");
        });

        modelBuilder.Entity<CcFlows>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_flows");

            entity.ToTable("cc_flows");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddDate)
                .HasColumnType("datetime")
                .HasColumnName("add_date");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.IsEnd).HasColumnName("is_end");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Session)
                .IsUnicode(false)
                .HasColumnName("session");
        });

        modelBuilder.Entity<CcGroupCount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_group_count");

            entity.ToTable("cc_group_count");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcGroupCount)
                .HasForeignKey<CcGroupCount>(d => d.Id)
                .HasConstraintName("FK_objects_cc_group_count");
        });

        modelBuilder.Entity<CcGroupCounts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_group_counts");

            entity.ToTable("cc_group_counts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcIndProgramTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_ind_program_theme");

            entity.ToTable("cc_ind_program_theme");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcIndProgramTheme)
                .HasForeignKey<CcIndProgramTheme>(d => d.Id)
                .HasConstraintName("FK_objects_cc_ind_program_theme");
        });

        modelBuilder.Entity<CcIndProgramThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_ind_program_themes");

            entity.ToTable("cc_ind_program_themes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.IndProgramId).HasColumnName("ind_program_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.TaskId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("task_id");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
        });

        modelBuilder.Entity<CcInoutControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_inout_control");

            entity.ToTable("cc_inout_control");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcInoutControl)
                .HasForeignKey<CcInoutControl>(d => d.Id)
                .HasConstraintName("FK_objects_cc_inout_control");
        });

        modelBuilder.Entity<CcInoutControls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_inout_controls");

            entity.ToTable("cc_inout_controls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.InNum).HasColumnName("in_num");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OutNum).HasColumnName("out_num");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcKcPerson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_kc_person");

            entity.ToTable("cc_kc_person");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcKcPerson)
                .HasForeignKey<CcKcPerson>(d => d.Id)
                .HasConstraintName("FK_objects_cc_kc_person");
        });

        modelBuilder.Entity<CcKcPersons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_kc_persons");

            entity.ToTable("cc_kc_persons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcKnowledgeClassifier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_knowledge_classifier");

            entity.ToTable("cc_knowledge_classifier");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcKnowledgeClassifier)
                .HasForeignKey<CcKnowledgeClassifier>(d => d.Id)
                .HasConstraintName("FK_objects_cc_knowledge_classifier");
        });

        modelBuilder.Entity<CcKnowledgeClassifiers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_knowledge_classifiers");

            entity.ToTable("cc_knowledge_classifiers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("file_id");
            entity.Property(e => e.KnowledgeClassifierId).HasColumnName("knowledge_classifier_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcLocalStorage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_local_storage");

            entity.ToTable("cc_local_storage");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcLocalStorage)
                .HasForeignKey<CcLocalStorage>(d => d.Id)
                .HasConstraintName("FK_objects_cc_local_storage");
        });

        modelBuilder.Entity<CcLocalStorages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_local_storages");

            entity.ToTable("cc_local_storages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Person).HasColumnName("person");
        });

        modelBuilder.Entity<CcLogExport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_log_export");

            entity.ToTable("cc_log_export");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcLogExport)
                .HasForeignKey<CcLogExport>(d => d.Id)
                .HasConstraintName("FK_objects_cc_log_export");
        });

        modelBuilder.Entity<CcLogExports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_log_exports");

            entity.ToTable("cc_log_exports");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Num).HasColumnName("num");
        });

        modelBuilder.Entity<CcLogImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_log_import");

            entity.ToTable("cc_log_import");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcLogImport)
                .HasForeignKey<CcLogImport>(d => d.Id)
                .HasConstraintName("FK_objects_cc_log_import");
        });

        modelBuilder.Entity<CcLogImports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_log_imports");

            entity.ToTable("cc_log_imports");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Num).HasColumnName("num");
        });

        modelBuilder.Entity<CcOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_org");

            entity.ToTable("cc_org");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcOrg)
                .HasForeignKey<CcOrg>(d => d.Id)
                .HasConstraintName("FK_objects_cc_org");
        });

        modelBuilder.Entity<CcOrgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_orgs");

            entity.ToTable("cc_orgs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Inn)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("inn");
            entity.Property(e => e.Kpp)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("kpp");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("org_type");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcOssImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_oss_import");

            entity.ToTable("cc_oss_import");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcOssImport)
                .HasForeignKey<CcOssImport>(d => d.Id)
                .HasConstraintName("FK_objects_cc_oss_import");
        });

        modelBuilder.Entity<CcOssImports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_oss_imports");

            entity.ToTable("cc_oss_imports");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Part).HasColumnName("part");
            entity.Property(e => e.PartsNum).HasColumnName("parts_num");
            entity.Property(e => e.Session)
                .IsUnicode(false)
                .HasColumnName("session");
        });

        modelBuilder.Entity<CcPeriodType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_period_type");

            entity.ToTable("cc_period_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPeriodType)
                .HasForeignKey<CcPeriodType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_period_type");
        });

        modelBuilder.Entity<CcPeriodTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_period_types");

            entity.ToTable("cc_period_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChangeCode)
                .IsUnicode(false)
                .HasColumnName("change_code");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SpAccess).HasColumnName("sp_access");
            entity.Property(e => e.UnplanAccess).HasColumnName("unplan_access");
        });

        modelBuilder.Entity<CcPfoAssessmentCriteria>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_assessment_criteria");

            entity.ToTable("cc_pfo_assessment_criteria");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoAssessmentCriteria)
                .HasForeignKey<CcPfoAssessmentCriteria>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_assessment_criteria");
        });

        modelBuilder.Entity<CcPfoAssessmentCriterias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_assessment_criterias");

            entity.ToTable("cc_pfo_assessment_criterias");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_div");

            entity.ToTable("cc_pfo_div");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoDiv)
                .HasForeignKey<CcPfoDiv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_div");
        });

        modelBuilder.Entity<CcPfoDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_divs");

            entity.ToTable("cc_pfo_divs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.HeadId).HasColumnName("head_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoGrafic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_grafic");

            entity.ToTable("cc_pfo_grafic");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoGrafic)
                .HasForeignKey<CcPfoGrafic>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_grafic");
        });

        modelBuilder.Entity<CcPfoGrafics>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_grafics");

            entity.ToTable("cc_pfo_grafics");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsForeign).HasColumnName("is_foreign");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PositionGroupId).HasColumnName("position_group_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<CcPfoMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_method");

            entity.ToTable("cc_pfo_method");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoMethod)
                .HasForeignKey<CcPfoMethod>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_method");
        });

        modelBuilder.Entity<CcPfoMethodResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_method_result");

            entity.ToTable("cc_pfo_method_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoMethodResult)
                .HasForeignKey<CcPfoMethodResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_method_result");
        });

        modelBuilder.Entity<CcPfoMethodResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_method_results");

            entity.ToTable("cc_pfo_method_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AddManually).HasColumnName("add_manually");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.TestDate)
                .HasColumnType("datetime")
                .HasColumnName("test_date");
        });

        modelBuilder.Entity<CcPfoMethodScale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_method_scale");

            entity.ToTable("cc_pfo_method_scale");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoMethodScale)
                .HasForeignKey<CcPfoMethodScale>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_method_scale");
        });

        modelBuilder.Entity<CcPfoMethodScales>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_method_scales");

            entity.ToTable("cc_pfo_method_scales");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ScaleOrder).HasColumnName("scale_order");
        });

        modelBuilder.Entity<CcPfoMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_methods");

            entity.ToTable("cc_pfo_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoPassword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_password");

            entity.ToTable("cc_pfo_password");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPassword)
                .HasForeignKey<CcPfoPassword>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_password");
        });

        modelBuilder.Entity<CcPfoPasswords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_passwords");

            entity.ToTable("cc_pfo_passwords");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PassDate)
                .HasColumnType("datetime")
                .HasColumnName("pass_date");
            entity.Property(e => e.Password)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcPfoPoll>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_poll");

            entity.ToTable("cc_pfo_poll");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPoll)
                .HasForeignKey<CcPfoPoll>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_poll");
        });

        modelBuilder.Entity<CcPfoPollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_poll_procedure");

            entity.ToTable("cc_pfo_poll_procedure");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPollProcedure)
                .HasForeignKey<CcPfoPollProcedure>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_poll_procedure");
        });

        modelBuilder.Entity<CcPfoPollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_poll_procedures");

            entity.ToTable("cc_pfo_poll_procedures");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PfoPollId).HasColumnName("pfo_poll_id");
            entity.Property(e => e.Questions)
                .IsUnicode(false)
                .HasColumnName("questions");
            entity.Property(e => e.QuestionsJson)
                .IsUnicode(false)
                .HasColumnName("questions_json");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.State)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("state");
        });

        modelBuilder.Entity<CcPfoPollResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_poll_result");

            entity.ToTable("cc_pfo_poll_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPollResult)
                .HasForeignKey<CcPfoPollResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_poll_result");
        });

        modelBuilder.Entity<CcPfoPollResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_poll_results");

            entity.ToTable("cc_pfo_poll_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PfoPollProcedureId).HasColumnName("pfo_poll_procedure_id");
            entity.Property(e => e.ResultDate)
                .HasColumnType("datetime")
                .HasColumnName("result_date");
            entity.Property(e => e.ResultItems)
                .IsUnicode(false)
                .HasColumnName("result_items");
        });

        modelBuilder.Entity<CcPfoPolls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_polls");

            entity.ToTable("cc_pfo_polls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FormLink)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("form_link");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoPositionGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_position_group");

            entity.ToTable("cc_pfo_position_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPositionGroup)
                .HasForeignKey<CcPfoPositionGroup>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_position_group");
        });

        modelBuilder.Entity<CcPfoPositionGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_position_groups");

            entity.ToTable("cc_pfo_position_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoQualCourseOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_qual_course_order");

            entity.ToTable("cc_pfo_qual_course_order");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoQualCourseOrder)
                .HasForeignKey<CcPfoQualCourseOrder>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_qual_course_order");
        });

        modelBuilder.Entity<CcPfoQualCourseOrders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_qual_course_orders");

            entity.ToTable("cc_pfo_qual_course_orders");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseOrder).HasColumnName("course_order");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
        });

        modelBuilder.Entity<CcPfoQualificationCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_qualification_course");

            entity.ToTable("cc_pfo_qualification_course");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoQualificationCourse)
                .HasForeignKey<CcPfoQualificationCourse>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_qualification_course");
        });

        modelBuilder.Entity<CcPfoQualificationCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_qualification_courses");

            entity.ToTable("cc_pfo_qualification_courses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseOrder).HasColumnName("course_order");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoQualificationPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_qualification_position");

            entity.ToTable("cc_pfo_qualification_position");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoQualificationPosition)
                .HasForeignKey<CcPfoQualificationPosition>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_qualification_position");
        });

        modelBuilder.Entity<CcPfoQualificationPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_qualification_positions");

            entity.ToTable("cc_pfo_qualification_positions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DivisionId).HasColumnName("division_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request");

            entity.ToTable("cc_pfo_request");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequest)
                .HasForeignKey<CcPfoRequest>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_request");
        });

        modelBuilder.Entity<CcPfoRequestMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request_method");

            entity.ToTable("cc_pfo_request_method");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequestMethod)
                .HasForeignKey<CcPfoRequestMethod>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_request_method");
        });

        modelBuilder.Entity<CcPfoRequestMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request_methods");

            entity.ToTable("cc_pfo_request_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddManually).HasColumnName("add_manually");
            entity.Property(e => e.AlwaysShowToPerson).HasColumnName("always_show_to_person");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.FinishReason)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("finish_reason");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NeedAssign).HasColumnName("need_assign");
            entity.Property(e => e.PfoRequestId).HasColumnName("pfo_request_id");
            entity.Property(e => e.SaveOnClose).HasColumnName("save_on_close");
        });

        modelBuilder.Entity<CcPfoRequestToLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request_to_learning");

            entity.ToTable("cc_pfo_request_to_learning");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequestToLearning)
                .HasForeignKey<CcPfoRequestToLearning>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_request_to_learning");
        });

        modelBuilder.Entity<CcPfoRequestToLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request_to_learnings");

            entity.ToTable("cc_pfo_request_to_learnings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PfoMethodId).HasColumnName("pfo_method_id");
            entity.Property(e => e.PfoRequestId).HasColumnName("pfo_request_id");
        });

        modelBuilder.Entity<CcPfoRequestTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request_transfer");

            entity.ToTable("cc_pfo_request_transfer");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequestTransfer)
                .HasForeignKey<CcPfoRequestTransfer>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_request_transfer");
        });

        modelBuilder.Entity<CcPfoRequestTransfers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_request_transfers");

            entity.ToTable("cc_pfo_request_transfers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DateFrom)
                .HasColumnType("datetime")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasColumnType("datetime")
                .HasColumnName("date_to");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NumDoc)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("num_doc");
            entity.Property(e => e.Reason)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.TransferDate)
                .HasColumnType("datetime")
                .HasColumnName("transfer_date");
        });

        modelBuilder.Entity<CcPfoRequests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_requests");

            entity.ToTable("cc_pfo_requests");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddManualy).HasColumnName("add_manualy");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentCriteriaId).HasColumnName("assessment_criteria_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.CommonPositionId).HasColumnName("common_position_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.GraficId).HasColumnName("grafic_id");
            entity.Property(e => e.IsAssigned).HasColumnName("is_assigned");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanFinishDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_finish_date");
            entity.Property(e => e.PlanStartDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_start_date");
            entity.Property(e => e.RejectReason)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("reject_reason");
            entity.Property(e => e.ResultGroupId).HasColumnName("result_group_id");
        });

        modelBuilder.Entity<CcPfoResultGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_result_group");

            entity.ToTable("cc_pfo_result_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoResultGroup)
                .HasForeignKey<CcPfoResultGroup>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_result_group");
        });

        modelBuilder.Entity<CcPfoResultGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_result_groups");

            entity.ToTable("cc_pfo_result_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoScaleResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_scale_result");

            entity.ToTable("cc_pfo_scale_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoScaleResult)
                .HasForeignKey<CcPfoScaleResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pfo_scale_result");
        });

        modelBuilder.Entity<CcPfoScaleResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pfo_scale_results");

            entity.ToTable("cc_pfo_scale_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.ScaleId).HasColumnName("scale_id");
            entity.Property(e => e.Value)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<CcPmtoNppBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_npp_block");

            entity.ToTable("cc_pmto_npp_block");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoNppBlock)
                .HasForeignKey<CcPmtoNppBlock>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_npp_block");
        });

        modelBuilder.Entity<CcPmtoNppBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_npp_blocks");

            entity.ToTable("cc_pmto_npp_blocks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPmtoObservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation");

            entity.ToTable("cc_pmto_observation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservation)
                .HasForeignKey<CcPmtoObservation>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_observation");
        });

        modelBuilder.Entity<CcPmtoObservationDirector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_director");

            entity.ToTable("cc_pmto_observation_director");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationDirector)
                .HasForeignKey<CcPmtoObservationDirector>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_observation_director");
        });

        modelBuilder.Entity<CcPmtoObservationDirectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_directors");

            entity.ToTable("cc_pmto_observation_directors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Collaborator).HasColumnName("collaborator");
            entity.Property(e => e.Fullname)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
        });

        modelBuilder.Entity<CcPmtoObservationEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_employee");

            entity.ToTable("cc_pmto_observation_employee");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationEmployee)
                .HasForeignKey<CcPmtoObservationEmployee>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_observation_employee");
        });

        modelBuilder.Entity<CcPmtoObservationEmployees>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_employees");

            entity.ToTable("cc_pmto_observation_employees");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Collaborator).HasColumnName("collaborator");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.FlLeader).HasColumnName("fl_leader");
            entity.Property(e => e.Fullname)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
            entity.Property(e => e.PositionFuture)
                .IsUnicode(false)
                .HasColumnName("position_future");
            entity.Property(e => e.PositionShort)
                .IsUnicode(false)
                .HasColumnName("position_short");
            entity.Property(e => e.SubdivisionCeh)
                .IsUnicode(false)
                .HasColumnName("subdivision_ceh");
        });

        modelBuilder.Entity<CcPmtoObservationResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_result");

            entity.ToTable("cc_pmto_observation_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationResult)
                .HasForeignKey<CcPmtoObservationResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_observation_result");
        });

        modelBuilder.Entity<CcPmtoObservationResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_results");

            entity.ToTable("cc_pmto_observation_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Result4)
                .IsUnicode(false)
                .HasColumnName("result4");
            entity.Property(e => e.Result5)
                .IsUnicode(false)
                .HasColumnName("result5");
            entity.Property(e => e.Result6)
                .IsUnicode(false)
                .HasColumnName("result6");
            entity.Property(e => e.Result7)
                .IsUnicode(false)
                .HasColumnName("result7");
            entity.Property(e => e.Result8)
                .IsUnicode(false)
                .HasColumnName("result8");
        });

        modelBuilder.Entity<CcPmtoObservationSpecialist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_specialist");

            entity.ToTable("cc_pmto_observation_specialist");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationSpecialist)
                .HasForeignKey<CcPmtoObservationSpecialist>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_observation_specialist");
        });

        modelBuilder.Entity<CcPmtoObservationSpecialists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observation_specialists");

            entity.ToTable("cc_pmto_observation_specialists");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Collaborator).HasColumnName("collaborator");
            entity.Property(e => e.Fullname)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
        });

        modelBuilder.Entity<CcPmtoObservations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_observations");

            entity.ToTable("cc_pmto_observations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Block)
                .IsUnicode(false)
                .HasColumnName("block");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModifedDate)
                .HasColumnType("datetime")
                .HasColumnName("modifed_date");
            entity.Property(e => e.ModifedId).HasColumnName("modifed_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Shift)
                .IsUnicode(false)
                .HasColumnName("shift");
            entity.Property(e => e.Station).HasColumnName("station");
            entity.Property(e => e.Theme)
                .IsUnicode(false)
                .HasColumnName("theme");
            entity.Property(e => e.TypePlan).HasColumnName("type_plan");
            entity.Property(e => e.TypePmt).HasColumnName("type_pmt");
        });

        modelBuilder.Entity<CcPmtoPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_position");

            entity.ToTable("cc_pmto_position");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoPosition)
                .HasForeignKey<CcPmtoPosition>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_position");
        });

        modelBuilder.Entity<CcPmtoPositionShort>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_position_short");

            entity.ToTable("cc_pmto_position_short");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoPositionShort)
                .HasForeignKey<CcPmtoPositionShort>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_position_short");
        });

        modelBuilder.Entity<CcPmtoPositionShorts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_position_shorts");

            entity.ToTable("cc_pmto_position_shorts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlLeader).HasColumnName("fl_leader");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPmtoPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_positions");

            entity.ToTable("cc_pmto_positions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPmtoShift>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_shift");

            entity.ToTable("cc_pmto_shift");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoShift)
                .HasForeignKey<CcPmtoShift>(d => d.Id)
                .HasConstraintName("FK_objects_cc_pmto_shift");
        });

        modelBuilder.Entity<CcPmtoShifts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_pmto_shifts");

            entity.ToTable("cc_pmto_shifts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_poll_procedure");

            entity.ToTable("cc_poll_procedure");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPollProcedure)
                .HasForeignKey<CcPollProcedure>(d => d.Id)
                .HasConstraintName("FK_objects_cc_poll_procedure");
        });

        modelBuilder.Entity<CcPollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_poll_procedures");

            entity.ToTable("cc_poll_procedures");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollProcedureId).HasColumnName("poll_procedure_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPrevWork>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_prev_work");

            entity.ToTable("cc_prev_work");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPrevWork)
                .HasForeignKey<CcPrevWork>(d => d.Id)
                .HasConstraintName("FK_objects_cc_prev_work");
        });

        modelBuilder.Entity<CcPrevWorks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_prev_works");

            entity.ToTable("cc_prev_works");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Division)
                .IsUnicode(false)
                .HasColumnName("division");
            entity.Property(e => e.Employer)
                .IsUnicode(false)
                .HasColumnName("employer");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<CcProgramDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_program_date");

            entity.ToTable("cc_program_date");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcProgramDate)
                .HasForeignKey<CcProgramDate>(d => d.Id)
                .HasConstraintName("FK_objects_cc_program_date");
        });

        modelBuilder.Entity<CcProgramDates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_program_dates");

            entity.ToTable("cc_program_dates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Program).HasColumnName("program");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<CcQualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_qualification");

            entity.ToTable("cc_qualification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcQualification)
                .HasForeignKey<CcQualification>(d => d.Id)
                .HasConstraintName("FK_objects_cc_qualification");
        });

        modelBuilder.Entity<CcQualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_qualifications");

            entity.ToTable("cc_qualifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentCriteriaId).HasColumnName("assessment_criteria_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PositionGroupId).HasColumnName("position_group_id");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcQuiz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_quiz");

            entity.ToTable("cc_quiz");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcQuiz)
                .HasForeignKey<CcQuiz>(d => d.Id)
                .HasConstraintName("FK_objects_cc_quiz");
        });

        modelBuilder.Entity<CcQuizs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_quizs");

            entity.ToTable("cc_quizs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CheckDate)
                .HasColumnType("datetime")
                .HasColumnName("check_date");
            entity.Property(e => e.CheckPeriod)
                .IsUnicode(false)
                .HasColumnName("check_period");
            entity.Property(e => e.ElectroGroup)
                .IsUnicode(false)
                .HasColumnName("electro_group");
            entity.Property(e => e.Exam)
                .IsUnicode(false)
                .HasColumnName("exam");
            entity.Property(e => e.ExamType)
                .IsUnicode(false)
                .HasColumnName("exam_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NextDate)
                .HasColumnType("datetime")
                .HasColumnName("next_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
            entity.Property(e => e.PositionType)
                .IsUnicode(false)
                .HasColumnName("position_type");
            entity.Property(e => e.Protocol)
                .IsUnicode(false)
                .HasColumnName("protocol");
            entity.Property(e => e.RespGroup)
                .IsUnicode(false)
                .HasColumnName("resp_group");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<CcRejectReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_reject_reason");

            entity.ToTable("cc_reject_reason");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRejectReason)
                .HasForeignKey<CcRejectReason>(d => d.Id)
                .HasConstraintName("FK_objects_cc_reject_reason");
        });

        modelBuilder.Entity<CcRejectReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_reject_reasons");

            entity.ToTable("cc_reject_reasons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Close).HasColumnName("close");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Plan).HasColumnName("plan");
        });

        modelBuilder.Entity<CcReqDateHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_req_date_history");

            entity.ToTable("cc_req_date_history");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcReqDateHistory)
                .HasForeignKey<CcReqDateHistory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_req_date_history");
        });

        modelBuilder.Entity<CcReqDateHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_req_date_historys");

            entity.ToTable("cc_req_date_historys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Reason)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("update_date");
        });

        modelBuilder.Entity<CcRequestReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_request_reason");

            entity.ToTable("cc_request_reason");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRequestReason)
                .HasForeignKey<CcRequestReason>(d => d.Id)
                .HasConstraintName("FK_objects_cc_request_reason");
        });

        modelBuilder.Entity<CcRequestReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_request_reasons");

            entity.ToTable("cc_request_reasons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcResultHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_result_history");

            entity.ToTable("cc_result_history");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcResultHistory)
                .HasForeignKey<CcResultHistory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_result_history");
        });

        modelBuilder.Entity<CcResultHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_result_historys");

            entity.ToTable("cc_result_historys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AppNum)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_num");
            entity.Property(e => e.CourseName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("course_name");
            entity.Property(e => e.EduOrgId).HasColumnName("edu_org_id");
            entity.Property(e => e.EduType).HasColumnName("edu_type");
            entity.Property(e => e.EventForm)
                .IsUnicode(false)
                .HasColumnName("event_form");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Order)
                .IsUnicode(false)
                .HasColumnName("order");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Presence).HasColumnName("presence");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.ValidationDate)
                .HasColumnType("datetime")
                .HasColumnName("validation_date");
            entity.Property(e => e.ValidationProtocol)
                .IsUnicode(false)
                .HasColumnName("validation_protocol");
        });

        modelBuilder.Entity<CcRtn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn");

            entity.ToTable("cc_rtn");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtn)
                .HasForeignKey<CcRtn>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn");
        });

        modelBuilder.Entity<CcRtnActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_activity");

            entity.ToTable("cc_rtn_activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnActivity)
                .HasForeignKey<CcRtnActivity>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_activity");
        });

        modelBuilder.Entity<CcRtnActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_activitys");

            entity.ToTable("cc_rtn_activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Place).HasColumnName("place");
        });

        modelBuilder.Entity<CcRtnApplication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_application");

            entity.ToTable("cc_rtn_application");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnApplication)
                .HasForeignKey<CcRtnApplication>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_application");
        });

        modelBuilder.Entity<CcRtnApplicationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_application_type");

            entity.ToTable("cc_rtn_application_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnApplicationType)
                .HasForeignKey<CcRtnApplicationType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_application_type");
        });

        modelBuilder.Entity<CcRtnApplicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_application_types");

            entity.ToTable("cc_rtn_application_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnApplications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_applications");

            entity.ToTable("cc_rtn_applications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApplicationTypeId).HasColumnName("application_type_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.FactDateRtn)
                .HasColumnType("datetime")
                .HasColumnName("fact_date_rtn");
            entity.Property(e => e.FlNotApply).HasColumnName("fl_not_apply");
            entity.Property(e => e.FlToConcern).HasColumnName("fl_to_concern");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnControlKind>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_control_kind");

            entity.ToTable("cc_rtn_control_kind");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnControlKind)
                .HasForeignKey<CcRtnControlKind>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_control_kind");
        });

        modelBuilder.Entity<CcRtnControlKinds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_control_kinds");

            entity.ToTable("cc_rtn_control_kinds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnControlResultType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_control_result_type");

            entity.ToTable("cc_rtn_control_result_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnControlResultType)
                .HasForeignKey<CcRtnControlResultType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_control_result_type");
        });

        modelBuilder.Entity<CcRtnControlResultTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_control_result_types");

            entity.ToTable("cc_rtn_control_result_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Module)
                .IsUnicode(false)
                .HasColumnName("module");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnControlType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_control_type");

            entity.ToTable("cc_rtn_control_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnControlType)
                .HasForeignKey<CcRtnControlType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_control_type");
        });

        modelBuilder.Entity<CcRtnControlTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_control_types");

            entity.ToTable("cc_rtn_control_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.FlAttestation).HasColumnName("fl_attestation");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnDuty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_duty");

            entity.ToTable("cc_rtn_duty");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnDuty)
                .HasForeignKey<CcRtnDuty>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_duty");
        });

        modelBuilder.Entity<CcRtnDutys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_dutys");

            entity.ToTable("cc_rtn_dutys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate)
                .HasColumnType("datetime")
                .HasColumnName("begin_date");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FlHeldPost).HasColumnName("fl_held_post");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderProps)
                .IsUnicode(false)
                .HasColumnName("order_props");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnExamMedical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_exam_medical");

            entity.ToTable("cc_rtn_exam_medical");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnExamMedical)
                .HasForeignKey<CcRtnExamMedical>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_exam_medical");
        });

        modelBuilder.Entity<CcRtnExamMedicals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_exam_medicals");

            entity.ToTable("cc_rtn_exam_medicals");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
        });

        modelBuilder.Entity<CcRtnExamPsychical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_exam_psychical");

            entity.ToTable("cc_rtn_exam_psychical");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnExamPsychical)
                .HasForeignKey<CcRtnExamPsychical>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_exam_psychical");
        });

        modelBuilder.Entity<CcRtnExamPsychicals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_exam_psychicals");

            entity.ToTable("cc_rtn_exam_psychicals");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
        });

        modelBuilder.Entity<CcRtnFault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_fault");

            entity.ToTable("cc_rtn_fault");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnFault)
                .HasForeignKey<CcRtnFault>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_fault");
        });

        modelBuilder.Entity<CcRtnFaults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_faults");

            entity.ToTable("cc_rtn_faults");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderProps)
                .IsUnicode(false)
                .HasColumnName("order_props");
        });

        modelBuilder.Entity<CcRtnKnowledge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_knowledge");

            entity.ToTable("cc_rtn_knowledge");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnKnowledge)
                .HasForeignKey<CcRtnKnowledge>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_knowledge");
        });

        modelBuilder.Entity<CcRtnKnowledgeSafety>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_knowledge_safety");

            entity.ToTable("cc_rtn_knowledge_safety");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnKnowledgeSafety)
                .HasForeignKey<CcRtnKnowledgeSafety>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_knowledge_safety");
        });

        modelBuilder.Entity<CcRtnKnowledgeSafetys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_knowledge_safetys");

            entity.ToTable("cc_rtn_knowledge_safetys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.DocProps)
                .IsUnicode(false)
                .HasColumnName("doc_props");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnKnowledgeTheory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_knowledge_theory");

            entity.ToTable("cc_rtn_knowledge_theory");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnKnowledgeTheory)
                .HasForeignKey<CcRtnKnowledgeTheory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_knowledge_theory");
        });

        modelBuilder.Entity<CcRtnKnowledgeTheorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_knowledge_theorys");

            entity.ToTable("cc_rtn_knowledge_theorys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApplicationId).HasColumnName("application_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Note)
                .IsUnicode(false)
                .HasColumnName("note");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnKnowledges>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_knowledges");

            entity.ToTable("cc_rtn_knowledges");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ControlTypeId).HasColumnName("control_type_id");
            entity.Property(e => e.DocProps)
                .IsUnicode(false)
                .HasColumnName("doc_props");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnLicense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license");

            entity.ToTable("cc_rtn_license");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicense)
                .HasForeignKey<CcRtnLicense>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license");
        });

        modelBuilder.Entity<CcRtnLicense2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license2");

            entity.ToTable("cc_rtn_license2");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicense2)
                .HasForeignKey<CcRtnLicense2>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license2");
        });

        modelBuilder.Entity<CcRtnLicense2s>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license2s");

            entity.ToTable("cc_rtn_license2s");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FlOperative).HasColumnName("fl_operative");
            entity.Property(e => e.LicenseHolderTypeId).HasColumnName("license_holder_type_id");
            entity.Property(e => e.Mock)
                .IsUnicode(false)
                .HasColumnName("mock");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PrepareStateId).HasColumnName("prepare_state_id");
            entity.Property(e => e.ResponsibleDepartment).HasColumnName("responsible_department");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnLicenseActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_activity");

            entity.ToTable("cc_rtn_license_activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseActivity)
                .HasForeignKey<CcRtnLicenseActivity>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_activity");
        });

        modelBuilder.Entity<CcRtnLicenseActivityResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_activity_result");

            entity.ToTable("cc_rtn_license_activity_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseActivityResult)
                .HasForeignKey<CcRtnLicenseActivityResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_activity_result");
        });

        modelBuilder.Entity<CcRtnLicenseActivityResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_activity_results");

            entity.ToTable("cc_rtn_license_activity_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CaConcernFactDate)
                .HasColumnType("datetime")
                .HasColumnName("ca_concern_fact_date");
            entity.Property(e => e.ExamDate)
                .HasColumnType("datetime")
                .HasColumnName("exam_date");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProtocolId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("protocol_id");
            entity.Property(e => e.ResultFailNumber).HasColumnName("result_fail_number");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.RtnFactDate)
                .HasColumnType("datetime")
                .HasColumnName("rtn_fact_date");
            entity.Property(e => e.RtnPlanDate)
                .HasColumnType("datetime")
                .HasColumnName("rtn_plan_date");
        });

        modelBuilder.Entity<CcRtnLicenseActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_activitys");

            entity.ToTable("cc_rtn_license_activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlSuccess).HasColumnName("fl_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CcRtnLicenseControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_control");

            entity.ToTable("cc_rtn_license_control");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseControl)
                .HasForeignKey<CcRtnLicenseControl>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_control");
        });

        modelBuilder.Entity<CcRtnLicenseControlResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_control_result");

            entity.ToTable("cc_rtn_license_control_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseControlResult)
                .HasForeignKey<CcRtnLicenseControlResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_control_result");
        });

        modelBuilder.Entity<CcRtnLicenseControlResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_control_results");

            entity.ToTable("cc_rtn_license_control_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.LicenseControlId).HasColumnName("license_control_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProtocolId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("protocol_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnLicenseControls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_controls");

            entity.ToTable("cc_rtn_license_controls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ControlId).HasColumnName("control_id");
            entity.Property(e => e.ControlKindId).HasColumnName("control_kind_id");
            entity.Property(e => e.DeadlineDate)
                .HasColumnType("datetime")
                .HasColumnName("deadline_date");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.SuccessDate)
                .HasColumnType("datetime")
                .HasColumnName("success_date");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CcRtnLicenseDoubling>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_doubling");

            entity.ToTable("cc_rtn_license_doubling");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseDoubling)
                .HasForeignKey<CcRtnLicenseDoubling>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_doubling");
        });

        modelBuilder.Entity<CcRtnLicenseDoublings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_doublings");

            entity.ToTable("cc_rtn_license_doublings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate)
                .HasColumnType("datetime")
                .HasColumnName("begin_date");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FlSuccess).HasColumnName("fl_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderProps)
                .IsUnicode(false)
                .HasColumnName("order_props");
        });

        modelBuilder.Entity<CcRtnLicenseFault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_fault");

            entity.ToTable("cc_rtn_license_fault");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseFault)
                .HasForeignKey<CcRtnLicenseFault>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_fault");
        });

        modelBuilder.Entity<CcRtnLicenseFaults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_faults");

            entity.ToTable("cc_rtn_license_faults");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderProps)
                .IsUnicode(false)
                .HasColumnName("order_props");
        });

        modelBuilder.Entity<CcRtnLicenseHolder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_holder");

            entity.ToTable("cc_rtn_license_holder");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseHolder)
                .HasForeignKey<CcRtnLicenseHolder>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_holder");
        });

        modelBuilder.Entity<CcRtnLicenseHolderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_holder_type");

            entity.ToTable("cc_rtn_license_holder_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseHolderType)
                .HasForeignKey<CcRtnLicenseHolderType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_holder_type");
        });

        modelBuilder.Entity<CcRtnLicenseHolderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_holder_types");

            entity.ToTable("cc_rtn_license_holder_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicenseHolders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_holders");

            entity.ToTable("cc_rtn_license_holders");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate)
                .HasColumnType("datetime")
                .HasColumnName("begin_date");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.LicenseStateId).HasColumnName("license_state_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
        });

        modelBuilder.Entity<CcRtnLicensePerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_perm");

            entity.ToTable("cc_rtn_license_perm");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePerm)
                .HasForeignKey<CcRtnLicensePerm>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_perm");
        });

        modelBuilder.Entity<CcRtnLicensePermState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_perm_state");

            entity.ToTable("cc_rtn_license_perm_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePermState)
                .HasForeignKey<CcRtnLicensePermState>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_perm_state");
        });

        modelBuilder.Entity<CcRtnLicensePermStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_perm_states");

            entity.ToTable("cc_rtn_license_perm_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicensePerms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_perms");

            entity.ToTable("cc_rtn_license_perms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DocProps)
                .IsUnicode(false)
                .HasColumnName("doc_props");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
        });

        modelBuilder.Entity<CcRtnLicensePost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_post");

            entity.ToTable("cc_rtn_license_post");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePost)
                .HasForeignKey<CcRtnLicensePost>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_post");
        });

        modelBuilder.Entity<CcRtnLicensePost2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_post2");

            entity.ToTable("cc_rtn_license_post2");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePost2)
                .HasForeignKey<CcRtnLicensePost2>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_post2");
        });

        modelBuilder.Entity<CcRtnLicensePost2s>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_post2s");

            entity.ToTable("cc_rtn_license_post2s");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlHeldPost).HasColumnName("fl_held_post");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.Mock)
                .IsUnicode(false)
                .HasColumnName("mock");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnLicensePostHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_post_history");

            entity.ToTable("cc_rtn_license_post_history");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePostHistory)
                .HasForeignKey<CcRtnLicensePostHistory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_post_history");
        });

        modelBuilder.Entity<CcRtnLicensePostHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_post_historys");

            entity.ToTable("cc_rtn_license_post_historys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.DivName)
                .IsUnicode(false)
                .HasColumnName("div_name");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.MainDivId).HasColumnName("main_div_id");
            entity.Property(e => e.MainDivName)
                .IsUnicode(false)
                .HasColumnName("main_div_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicensePosts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_posts");

            entity.ToTable("cc_rtn_license_posts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.DivName)
                .IsUnicode(false)
                .HasColumnName("div_name");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.MainDivId).HasColumnName("main_div_id");
            entity.Property(e => e.MainDivName)
                .IsUnicode(false)
                .HasColumnName("main_div_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicensePrepareState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_prepare_state");

            entity.ToTable("cc_rtn_license_prepare_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePrepareState)
                .HasForeignKey<CcRtnLicensePrepareState>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_prepare_state");
        });

        modelBuilder.Entity<CcRtnLicensePrepareStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_prepare_states");

            entity.ToTable("cc_rtn_license_prepare_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicenseQual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_qual");

            entity.ToTable("cc_rtn_license_qual");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseQual)
                .HasForeignKey<CcRtnLicenseQual>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_qual");
        });

        modelBuilder.Entity<CcRtnLicenseQuals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_quals");

            entity.ToTable("cc_rtn_license_quals");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate)
                .HasColumnType("datetime")
                .HasColumnName("begin_date");
            entity.Property(e => e.DocProps)
                .IsUnicode(false)
                .HasColumnName("doc_props");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FlDistance).HasColumnName("fl_distance");
            entity.Property(e => e.FlSuccess).HasColumnName("fl_success");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnLicenseSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_skill");

            entity.ToTable("cc_rtn_license_skill");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseSkill)
                .HasForeignKey<CcRtnLicenseSkill>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_skill");
        });

        modelBuilder.Entity<CcRtnLicenseSkillResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_skill_result");

            entity.ToTable("cc_rtn_license_skill_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseSkillResult)
                .HasForeignKey<CcRtnLicenseSkillResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_skill_result");
        });

        modelBuilder.Entity<CcRtnLicenseSkillResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_skill_results");

            entity.ToTable("cc_rtn_license_skill_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.LicenseSkillId).HasColumnName("license_skill_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProtocolId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("protocol_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnLicenseSkills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_skills");

            entity.ToTable("cc_rtn_license_skills");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ControlKindId).HasColumnName("control_kind_id");
            entity.Property(e => e.LicensePostId).HasColumnName("license_post_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.SuccessDate)
                .HasColumnType("datetime")
                .HasColumnName("success_date");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CcRtnLicenseState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_state");

            entity.ToTable("cc_rtn_license_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseState)
                .HasForeignKey<CcRtnLicenseState>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_state");
        });

        modelBuilder.Entity<CcRtnLicenseStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_states");

            entity.ToTable("cc_rtn_license_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicenseTraining>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_training");

            entity.ToTable("cc_rtn_license_training");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseTraining)
                .HasForeignKey<CcRtnLicenseTraining>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_training");
        });

        modelBuilder.Entity<CcRtnLicenseTraining2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_training2");

            entity.ToTable("cc_rtn_license_training2");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseTraining2)
                .HasForeignKey<CcRtnLicenseTraining2>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_license_training2");
        });

        modelBuilder.Entity<CcRtnLicenseTraining2s>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_training2s");

            entity.ToTable("cc_rtn_license_training2s");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditionalBegin)
                .HasColumnType("datetime")
                .HasColumnName("additional_begin");
            entity.Property(e => e.AdditionalEnd)
                .HasColumnType("datetime")
                .HasColumnName("additional_end");
            entity.Property(e => e.AdditionalHours).HasColumnName("additional_hours");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ExperienceBegin)
                .HasColumnType("datetime")
                .HasColumnName("experience_begin");
            entity.Property(e => e.ExperienceEnd)
                .HasColumnType("datetime")
                .HasColumnName("experience_end");
            entity.Property(e => e.ExperienceHours).HasColumnName("experience_hours");
            entity.Property(e => e.FlAdditionalSuccess).HasColumnName("fl_additional_success");
            entity.Property(e => e.FlExperienceSuccess).HasColumnName("fl_experience_success");
            entity.Property(e => e.FlPracticeSuccess).HasColumnName("fl_practice_success");
            entity.Property(e => e.FlTheorySuccess).HasColumnName("fl_theory_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PracticeBegin)
                .HasColumnType("datetime")
                .HasColumnName("practice_begin");
            entity.Property(e => e.PracticeEnd)
                .HasColumnType("datetime")
                .HasColumnName("practice_end");
            entity.Property(e => e.PracticeHours).HasColumnName("practice_hours");
            entity.Property(e => e.TheoryBegin)
                .HasColumnType("datetime")
                .HasColumnName("theory_begin");
            entity.Property(e => e.TheoryEnd)
                .HasColumnType("datetime")
                .HasColumnName("theory_end");
            entity.Property(e => e.TheoryHours).HasColumnName("theory_hours");
        });

        modelBuilder.Entity<CcRtnLicenseTrainings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_license_trainings");

            entity.ToTable("cc_rtn_license_trainings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DoublingBegin)
                .HasColumnType("datetime")
                .HasColumnName("doubling_begin");
            entity.Property(e => e.DoublingEnd)
                .HasColumnType("datetime")
                .HasColumnName("doubling_end");
            entity.Property(e => e.DoublingProps)
                .IsUnicode(false)
                .HasColumnName("doubling_props");
            entity.Property(e => e.ExperienceBegin)
                .HasColumnType("datetime")
                .HasColumnName("experience_begin");
            entity.Property(e => e.ExperienceEnd)
                .HasColumnType("datetime")
                .HasColumnName("experience_end");
            entity.Property(e => e.FlDoublingSuccess).HasColumnName("fl_doubling_success");
            entity.Property(e => e.FlExperienceSuccess).HasColumnName("fl_experience_success");
            entity.Property(e => e.FlPracticeSuccess).HasColumnName("fl_practice_success");
            entity.Property(e => e.FlTheorySuccess).HasColumnName("fl_theory_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PracticeBegin)
                .HasColumnType("datetime")
                .HasColumnName("practice_begin");
            entity.Property(e => e.PracticeEnd)
                .HasColumnType("datetime")
                .HasColumnName("practice_end");
            entity.Property(e => e.TheoryBegin)
                .HasColumnType("datetime")
                .HasColumnName("theory_begin");
            entity.Property(e => e.TheoryEnd)
                .HasColumnType("datetime")
                .HasColumnName("theory_end");
        });

        modelBuilder.Entity<CcRtnLicenses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_licenses");

            entity.ToTable("cc_rtn_licenses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate)
                .HasColumnType("datetime")
                .HasColumnName("begin_date");
            entity.Property(e => e.CancelNote)
                .IsUnicode(false)
                .HasColumnName("cancel_note");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.FlCancel).HasColumnName("fl_cancel");
            entity.Property(e => e.FlHeldPost).HasColumnName("fl_held_post");
            entity.Property(e => e.FlPrepare).HasColumnName("fl_prepare");
            entity.Property(e => e.FlPrepareComplete).HasColumnName("fl_prepare_complete");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.OrderProps)
                .IsUnicode(false)
                .HasColumnName("order_props");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.PrepareCompleteDate)
                .HasColumnType("datetime")
                .HasColumnName("prepare_complete_date");
        });

        modelBuilder.Entity<CcRtnNppBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_npp_block");

            entity.ToTable("cc_rtn_npp_block");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnNppBlock)
                .HasForeignKey<CcRtnNppBlock>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_npp_block");
        });

        modelBuilder.Entity<CcRtnNppBlockStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_npp_block_stage");

            entity.ToTable("cc_rtn_npp_block_stage");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnNppBlockStage)
                .HasForeignKey<CcRtnNppBlockStage>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_npp_block_stage");
        });

        modelBuilder.Entity<CcRtnNppBlockStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_npp_block_stages");

            entity.ToTable("cc_rtn_npp_block_stages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnNppBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_npp_blocks");

            entity.ToTable("cc_rtn_npp_blocks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_permission");

            entity.ToTable("cc_rtn_permission");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPermission)
                .HasForeignKey<CcRtnPermission>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_permission");
        });

        modelBuilder.Entity<CcRtnPermissionStatusType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_permission_status_type");

            entity.ToTable("cc_rtn_permission_status_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPermissionStatusType)
                .HasForeignKey<CcRtnPermissionStatusType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_permission_status_type");
        });

        modelBuilder.Entity<CcRtnPermissionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_permission_status_types");

            entity.ToTable("cc_rtn_permission_status_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnPermissionStop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_permission_stop");

            entity.ToTable("cc_rtn_permission_stop");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPermissionStop)
                .HasForeignKey<CcRtnPermissionStop>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_permission_stop");
        });

        modelBuilder.Entity<CcRtnPermissionStops>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_permission_stops");

            entity.ToTable("cc_rtn_permission_stops");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DocProps)
                .IsUnicode(false)
                .HasColumnName("doc_props");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");
        });

        modelBuilder.Entity<CcRtnPermissions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_permissions");

            entity.ToTable("cc_rtn_permissions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FlCancel).HasColumnName("fl_cancel");
            entity.Property(e => e.FlStop).HasColumnName("fl_stop");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderProps)
                .IsUnicode(false)
                .HasColumnName("order_props");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnPostApproved>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_approved");

            entity.ToTable("cc_rtn_post_approved");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostApproved)
                .HasForeignKey<CcRtnPostApproved>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_approved");
        });

        modelBuilder.Entity<CcRtnPostApproveds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_approveds");

            entity.ToTable("cc_rtn_post_approveds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.FlCaControl).HasColumnName("fl_ca_control");
            entity.Property(e => e.FlLead).HasColumnName("fl_lead");
            entity.Property(e => e.FlOperative).HasColumnName("fl_operative");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");
        });

        modelBuilder.Entity<CcRtnPostCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_category");

            entity.ToTable("cc_rtn_post_category");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostCategory)
                .HasForeignKey<CcRtnPostCategory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_category");
        });

        modelBuilder.Entity<CcRtnPostCategorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_categorys");

            entity.ToTable("cc_rtn_post_categorys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnPostLicensed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_licensed");

            entity.ToTable("cc_rtn_post_licensed");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostLicensed)
                .HasForeignKey<CcRtnPostLicensed>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_licensed");
        });

        modelBuilder.Entity<CcRtnPostLicenseds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_licenseds");

            entity.ToTable("cc_rtn_post_licenseds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.FlOperative).HasColumnName("fl_operative");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnPostOperative>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_operative");

            entity.ToTable("cc_rtn_post_operative");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostOperative)
                .HasForeignKey<CcRtnPostOperative>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_operative");
        });

        modelBuilder.Entity<CcRtnPostOperativeBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_operative_block");

            entity.ToTable("cc_rtn_post_operative_block");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostOperativeBlock)
                .HasForeignKey<CcRtnPostOperativeBlock>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_operative_block");
        });

        modelBuilder.Entity<CcRtnPostOperativeBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_operative_blocks");

            entity.ToTable("cc_rtn_post_operative_blocks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Mock)
                .IsUnicode(false)
                .HasColumnName("mock");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NppBlockId).HasColumnName("npp_block_id");
            entity.Property(e => e.PostOperativeId).HasColumnName("post_operative_id");
        });

        modelBuilder.Entity<CcRtnPostOperatives>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_operatives");

            entity.ToTable("cc_rtn_post_operatives");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.MinCount).HasColumnName("min_count");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NppStageId).HasColumnName("npp_stage_id");
            entity.Property(e => e.PostStructureId).HasColumnName("post_structure_id");
        });

        modelBuilder.Entity<CcRtnPostStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_station");

            entity.ToTable("cc_rtn_post_station");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStation)
                .HasForeignKey<CcRtnPostStation>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_station");
        });

        modelBuilder.Entity<CcRtnPostStationActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_station_activity");

            entity.ToTable("cc_rtn_post_station_activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStationActivity)
                .HasForeignKey<CcRtnPostStationActivity>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_station_activity");
        });

        modelBuilder.Entity<CcRtnPostStationActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_station_activitys");

            entity.ToTable("cc_rtn_post_station_activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Mock)
                .IsUnicode(false)
                .HasColumnName("mock");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostStationId).HasColumnName("post_station_id");
        });

        modelBuilder.Entity<CcRtnPostStationLicensed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_station_licensed");

            entity.ToTable("cc_rtn_post_station_licensed");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStationLicensed)
                .HasForeignKey<CcRtnPostStationLicensed>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_station_licensed");
        });

        modelBuilder.Entity<CcRtnPostStationLicenseds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_station_licenseds");

            entity.ToTable("cc_rtn_post_station_licenseds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Mock)
                .IsUnicode(false)
                .HasColumnName("mock");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.PostStationId).HasColumnName("post_station_id");
        });

        modelBuilder.Entity<CcRtnPostStations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_stations");

            entity.ToTable("cc_rtn_post_stations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostApprovedId).HasColumnName("post_approved_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnPostStructure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_structure");

            entity.ToTable("cc_rtn_post_structure");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStructure)
                .HasForeignKey<CcRtnPostStructure>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_structure");
        });

        modelBuilder.Entity<CcRtnPostStructureControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_structure_control");

            entity.ToTable("cc_rtn_post_structure_control");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStructureControl)
                .HasForeignKey<CcRtnPostStructureControl>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_structure_control");
        });

        modelBuilder.Entity<CcRtnPostStructureControls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_structure_controls");

            entity.ToTable("cc_rtn_post_structure_controls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ControlPeriod).HasColumnName("control_period");
            entity.Property(e => e.ControlTypeId).HasColumnName("control_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostStructureId).HasColumnName("post_structure_id");
        });

        modelBuilder.Entity<CcRtnPostStructures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_structures");

            entity.ToTable("cc_rtn_post_structures");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.InstructionId)
                .IsUnicode(false)
                .HasColumnName("instruction_id");
            entity.Property(e => e.Mock)
                .IsUnicode(false)
                .HasColumnName("mock");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResponsibleDepartment).HasColumnName("responsible_department");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnPostSubcategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_subcategory");

            entity.ToTable("cc_rtn_post_subcategory");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostSubcategory)
                .HasForeignKey<CcRtnPostSubcategory>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_post_subcategory");
        });

        modelBuilder.Entity<CcRtnPostSubcategorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_post_subcategorys");

            entity.ToTable("cc_rtn_post_subcategorys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_skill");

            entity.ToTable("cc_rtn_skill");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnSkill)
                .HasForeignKey<CcRtnSkill>(d => d.Id)
                .HasConstraintName("FK_objects_cc_rtn_skill");
        });

        modelBuilder.Entity<CcRtnSkills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtn_skills");

            entity.ToTable("cc_rtn_skills");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.DocProps)
                .IsUnicode(false)
                .HasColumnName("doc_props");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_rtns");

            entity.ToTable("cc_rtns");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.IssueDate)
                .HasColumnType("datetime")
                .HasColumnName("issue_date");
            entity.Property(e => e.IssuedBy)
                .IsUnicode(false)
                .HasColumnName("issued_by");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
            entity.Property(e => e.ResolutionForm)
                .IsUnicode(false)
                .HasColumnName("resolution_form");
            entity.Property(e => e.ResolutionType)
                .IsUnicode(false)
                .HasColumnName("resolution_type");
            entity.Property(e => e.Serial)
                .IsUnicode(false)
                .HasColumnName("serial");
            entity.Property(e => e.Validity)
                .HasColumnType("datetime")
                .HasColumnName("validity");
        });

        modelBuilder.Entity<CcScmtAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign");

            entity.ToTable("cc_scmt_assign");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssign)
                .HasForeignKey<CcScmtAssign>(d => d.Id)
                .HasConstraintName("FK_objects_cc_scmt_assign");
        });

        modelBuilder.Entity<CcScmtAssignAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign_answer");

            entity.ToTable("cc_scmt_assign_answer");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssignAnswer)
                .HasForeignKey<CcScmtAssignAnswer>(d => d.Id)
                .HasConstraintName("FK_objects_cc_scmt_assign_answer");
        });

        modelBuilder.Entity<CcScmtAssignAnswers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign_answers");

            entity.ToTable("cc_scmt_assign_answers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Answer).HasColumnName("answer");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.GroupUserRel).HasColumnName("group_user_rel");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcScmtAssignGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign_group");

            entity.ToTable("cc_scmt_assign_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssignGroup)
                .HasForeignKey<CcScmtAssignGroup>(d => d.Id)
                .HasConstraintName("FK_objects_cc_scmt_assign_group");
        });

        modelBuilder.Entity<CcScmtAssignGroupList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign_group_list");

            entity.ToTable("cc_scmt_assign_group_list");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssignGroupList)
                .HasForeignKey<CcScmtAssignGroupList>(d => d.Id)
                .HasConstraintName("FK_objects_cc_scmt_assign_group_list");
        });

        modelBuilder.Entity<CcScmtAssignGroupLists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign_group_lists");

            entity.ToTable("cc_scmt_assign_group_lists");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FlForcedNull).HasColumnName("fl_forced_null");
            entity.Property(e => e.Fullname)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.Group).HasColumnName("group");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Position)
                .IsUnicode(false)
                .HasColumnName("position");
            entity.Property(e => e.Shift)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("shift");
            entity.Property(e => e.SubdivisionCeh)
                .IsUnicode(false)
                .HasColumnName("subdivision_ceh");
            entity.Property(e => e.TimeQuestOne).HasColumnName("time_quest_one");
            entity.Property(e => e.TimeQuestTwo).HasColumnName("time_quest_two");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<CcScmtAssignGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assign_groups");

            entity.ToTable("cc_scmt_assign_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Assign).HasColumnName("assign");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.ShortName)
                .IsUnicode(false)
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<CcScmtAssigns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_assigns");

            entity.ToTable("cc_scmt_assigns");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AverageTimeAnswer).HasColumnName("average_time_answer");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Finished)
                .HasColumnType("datetime")
                .HasColumnName("finished");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.QuestOne)
                .IsUnicode(false)
                .HasColumnName("quest_one");
            entity.Property(e => e.QuestTwo)
                .IsUnicode(false)
                .HasColumnName("quest_two");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
        });

        modelBuilder.Entity<CcScmtOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_option");

            entity.ToTable("cc_scmt_option");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtOption)
                .HasForeignKey<CcScmtOption>(d => d.Id)
                .HasConstraintName("FK_objects_cc_scmt_option");
        });

        modelBuilder.Entity<CcScmtOptions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_scmt_options");

            entity.ToTable("cc_scmt_options");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<CcSelftestCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_code");

            entity.ToTable("cc_selftest_code");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestCode)
                .HasForeignKey<CcSelftestCode>(d => d.Id)
                .HasConstraintName("FK_objects_cc_selftest_code");
        });

        modelBuilder.Entity<CcSelftestCodes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_codes");

            entity.ToTable("cc_selftest_codes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSelftestDb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_db");

            entity.ToTable("cc_selftest_db");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestDb)
                .HasForeignKey<CcSelftestDb>(d => d.Id)
                .HasConstraintName("FK_objects_cc_selftest_db");
        });

        modelBuilder.Entity<CcSelftestDbs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_dbs");

            entity.ToTable("cc_selftest_dbs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Cnt)
                .IsUnicode(false)
                .HasColumnName("cnt");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Direction)
                .IsUnicode(false)
                .HasColumnName("direction");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.Fact)
                .IsUnicode(false)
                .HasColumnName("fact");
            entity.Property(e => e.Method)
                .IsUnicode(false)
                .HasColumnName("method");
            entity.Property(e => e.MethodCode).HasColumnName("method_code");
            entity.Property(e => e.ModelCode).HasColumnName("model_code");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.UserId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("user_id");
        });

        modelBuilder.Entity<CcSelftestExpert>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_expert");

            entity.ToTable("cc_selftest_expert");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestExpert)
                .HasForeignKey<CcSelftestExpert>(d => d.Id)
                .HasConstraintName("FK_objects_cc_selftest_expert");
        });

        modelBuilder.Entity<CcSelftestExperts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_experts");

            entity.ToTable("cc_selftest_experts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSelftestModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_model");

            entity.ToTable("cc_selftest_model");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestModel)
                .HasForeignKey<CcSelftestModel>(d => d.Id)
                .HasConstraintName("FK_objects_cc_selftest_model");
        });

        modelBuilder.Entity<CcSelftestModels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_selftest_models");

            entity.ToTable("cc_selftest_models");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Pid).HasColumnName("pid");
        });

        modelBuilder.Entity<CcSkvzActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_activity");

            entity.ToTable("cc_skvz_activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzActivity)
                .HasForeignKey<CcSkvzActivity>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_activity");
        });

        modelBuilder.Entity<CcSkvzActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_activitys");

            entity.ToTable("cc_skvz_activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzBpApprovedObject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_bp_approved_object");

            entity.ToTable("cc_skvz_bp_approved_object");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzBpApprovedObject)
                .HasForeignKey<CcSkvzBpApprovedObject>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_bp_approved_object");
        });

        modelBuilder.Entity<CcSkvzBpApprovedObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_bp_approved_objects");

            entity.ToTable("cc_skvz_bp_approved_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.SkvzSp).HasColumnName("skvz_sp");
            entity.Property(e => e.SkvzSpWait).HasColumnName("skvz_sp_wait");
            entity.Property(e => e.WorkGroup).HasColumnName("work_group");
            entity.Property(e => e.WorkGroupWait).HasColumnName("work_group_wait");
        });

        modelBuilder.Entity<CcSkvzCouncilMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_council_member");

            entity.ToTable("cc_skvz_council_member");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCouncilMember)
                .HasForeignKey<CcSkvzCouncilMember>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_council_member");
        });

        modelBuilder.Entity<CcSkvzCouncilMemberDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_council_member_div");

            entity.ToTable("cc_skvz_council_member_div");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCouncilMemberDiv)
                .HasForeignKey<CcSkvzCouncilMemberDiv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_council_member_div");
        });

        modelBuilder.Entity<CcSkvzCouncilMemberDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_council_member_divs");

            entity.ToTable("cc_skvz_council_member_divs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CouncilMemberId).HasColumnName("council_member_id");
            entity.Property(e => e.CuratorId).HasColumnName("curator_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcSkvzCouncilMembers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_council_members");

            entity.ToTable("cc_skvz_council_members");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Complete).HasColumnName("complete");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SendingDate)
                .HasColumnType("datetime")
                .HasColumnName("sending_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzCritPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_crit_position");

            entity.ToTable("cc_skvz_crit_position");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCritPosition)
                .HasForeignKey<CcSkvzCritPosition>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_crit_position");
        });

        modelBuilder.Entity<CcSkvzCritPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_crit_positions");

            entity.ToTable("cc_skvz_crit_positions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PlanCnt).HasColumnName("plan_cnt");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzCriteriaActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_criteria_activity");

            entity.ToTable("cc_skvz_criteria_activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCriteriaActivity)
                .HasForeignKey<CcSkvzCriteriaActivity>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_criteria_activity");
        });

        modelBuilder.Entity<CcSkvzCriteriaActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_criteria_activitys");

            entity.ToTable("cc_skvz_criteria_activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzCriticalityPosFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_criticality_pos_factor");

            entity.ToTable("cc_skvz_criticality_pos_factor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCriticalityPosFactor)
                .HasForeignKey<CcSkvzCriticalityPosFactor>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_criticality_pos_factor");
        });

        modelBuilder.Entity<CcSkvzCriticalityPosFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_criticality_pos_factors");

            entity.ToTable("cc_skvz_criticality_pos_factors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_div");

            entity.ToTable("cc_skvz_div");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzDiv)
                .HasForeignKey<CcSkvzDiv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_div");
        });

        modelBuilder.Entity<CcSkvzDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_divs");

            entity.ToTable("cc_skvz_divs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CouncilMemberId).HasColumnName("council_member_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.HeadId).HasColumnName("head_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StationBlockTypeId).HasColumnName("station_block_type_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzEv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_ev");

            entity.ToTable("cc_skvz_ev");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzEv)
                .HasForeignKey<CcSkvzEv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_ev");
        });

        modelBuilder.Entity<CcSkvzEvs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_evs");

            entity.ToTable("cc_skvz_evs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NeedExtract).HasColumnName("need_extract");
            entity.Property(e => e.NeedSuccessor).HasColumnName("need_successor");
        });

        modelBuilder.Entity<CcSkvzExtractKvzType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_extract_kvz_type");

            entity.ToTable("cc_skvz_extract_kvz_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzExtractKvzType)
                .HasForeignKey<CcSkvzExtractKvzType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_extract_kvz_type");
        });

        modelBuilder.Entity<CcSkvzExtractKvzTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_extract_kvz_types");

            entity.ToTable("cc_skvz_extract_kvz_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzKmap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_kmap");

            entity.ToTable("cc_skvz_kmap");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzKmap)
                .HasForeignKey<CcSkvzKmap>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_kmap");
        });

        modelBuilder.Entity<CcSkvzKmapItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_kmap_item");

            entity.ToTable("cc_skvz_kmap_item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzKmapItem)
                .HasForeignKey<CcSkvzKmapItem>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_kmap_item");
        });

        modelBuilder.Entity<CcSkvzKmapItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_kmap_items");

            entity.ToTable("cc_skvz_kmap_items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BaseId).HasColumnName("base_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.KmapId).HasColumnName("kmap_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Value)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<CcSkvzKmaps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_kmaps");

            entity.ToTable("cc_skvz_kmaps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FileId)
                .IsUnicode(false)
                .HasColumnName("file_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSkvzKnowledgeDocsFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_knowledge_docs_factor");

            entity.ToTable("cc_skvz_knowledge_docs_factor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzKnowledgeDocsFactor)
                .HasForeignKey<CcSkvzKnowledgeDocsFactor>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_knowledge_docs_factor");
        });

        modelBuilder.Entity<CcSkvzKnowledgeDocsFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_knowledge_docs_factors");

            entity.ToTable("cc_skvz_knowledge_docs_factors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzMovedStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_moved_stage");

            entity.ToTable("cc_skvz_moved_stage");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzMovedStage)
                .HasForeignKey<CcSkvzMovedStage>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_moved_stage");
        });

        modelBuilder.Entity<CcSkvzMovedStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_moved_stages");

            entity.ToTable("cc_skvz_moved_stages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzPlanEv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_ev");

            entity.ToTable("cc_skvz_plan_ev");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanEv)
                .HasForeignKey<CcSkvzPlanEv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_ev");
        });

        modelBuilder.Entity<CcSkvzPlanEvEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_ev_event");

            entity.ToTable("cc_skvz_plan_ev_event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanEvEvent)
                .HasForeignKey<CcSkvzPlanEvEvent>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_ev_event");
        });

        modelBuilder.Entity<CcSkvzPlanEvEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_ev_events");

            entity.ToTable("cc_skvz_plan_ev_events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EvId).HasColumnName("ev_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanEvId).HasColumnName("plan_ev_id");
        });

        modelBuilder.Entity<CcSkvzPlanEvs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_evs");

            entity.ToTable("cc_skvz_plan_evs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DateComplete)
                .HasColumnType("datetime")
                .HasColumnName("date_complete");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.MDateComplete)
                .HasColumnType("datetime")
                .HasColumnName("m_date_complete");
            entity.Property(e => e.MDateStart)
                .HasColumnType("datetime")
                .HasColumnName("m_date_start");
            entity.Property(e => e.MIsComplete).HasColumnName("m_is_complete");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanFileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("plan_file_id");
            entity.Property(e => e.Priority)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("priority");
            entity.Property(e => e.ProtFileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("prot_file_id");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz");

            entity.ToTable("cc_skvz_plan_extract_kvz");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvz)
                .HasForeignKey<CcSkvzPlanExtractKvz>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_extract_kvz");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzExp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz_exp");

            entity.ToTable("cc_skvz_plan_extract_kvz_exp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvzExp)
                .HasForeignKey<CcSkvzPlanExtractKvzExp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_extract_kvz_exp");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzExps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz_exps");

            entity.ToTable("cc_skvz_plan_extract_kvz_exps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz_file");

            entity.ToTable("cc_skvz_plan_extract_kvz_file");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvzFile)
                .HasForeignKey<CcSkvzPlanExtractKvzFile>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_extract_kvz_file");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzFiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz_files");

            entity.ToTable("cc_skvz_plan_extract_kvz_files");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("file_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzWg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz_wg");

            entity.ToTable("cc_skvz_plan_extract_kvz_wg");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvzWg)
                .HasForeignKey<CcSkvzPlanExtractKvzWg>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_extract_kvz_wg");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzWgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvz_wgs");

            entity.ToTable("cc_skvz_plan_extract_kvz_wgs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.WgMemberId).HasColumnName("wg_member_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_extract_kvzs");

            entity.ToTable("cc_skvz_plan_extract_kvzs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ExtractKvzTypeId).HasColumnName("extract_kvz_type_id");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsInPoll).HasColumnName("is_in_poll");
            entity.Property(e => e.IsPollComplete).HasColumnName("is_poll_complete");
            entity.Property(e => e.Kvz)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("kvz");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.MFactDate)
                .HasColumnType("datetime")
                .HasColumnName("m_fact_date");
            entity.Property(e => e.MIsComplete).HasColumnName("m_is_complete");
            entity.Property(e => e.MStartDate)
                .HasColumnType("datetime")
                .HasColumnName("m_start_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcSkvzPlanInstallKvz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_install_kvz");

            entity.ToTable("cc_skvz_plan_install_kvz");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanInstallKvz)
                .HasForeignKey<CcSkvzPlanInstallKvz>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_plan_install_kvz");
        });

        modelBuilder.Entity<CcSkvzPlanInstallKvzs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_plan_install_kvzs");

            entity.ToTable("cc_skvz_plan_install_kvzs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.FormalizeDivId).HasColumnName("formalize_div_id");
            entity.Property(e => e.FormalizePersonId).HasColumnName("formalize_person_id");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsInPoll).HasColumnName("is_in_poll");
            entity.Property(e => e.IsPollComplete).HasColumnName("is_poll_complete");
            entity.Property(e => e.Kvz)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("kvz");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.Method)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("method");
            entity.Property(e => e.MmFileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("mm_file_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProtFileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("prot_file_id");
        });

        modelBuilder.Entity<CcSkvzPollActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_activity");

            entity.ToTable("cc_skvz_poll_activity");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollActivity)
                .HasForeignKey<CcSkvzPollActivity>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_poll_activity");
        });

        modelBuilder.Entity<CcSkvzPollActivityCr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_activity_cr");

            entity.ToTable("cc_skvz_poll_activity_cr");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollActivityCr)
                .HasForeignKey<CcSkvzPollActivityCr>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_poll_activity_cr");
        });

        modelBuilder.Entity<CcSkvzPollActivityCrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_activity_crs");

            entity.ToTable("cc_skvz_poll_activity_crs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityResultId).HasColumnName("activity_result_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CriteriaActivityId).HasColumnName("criteria_activity_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcSkvzPollActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_activitys");

            entity.ToTable("cc_skvz_poll_activitys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CuratorId).HasColumnName("curator_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
        });

        modelBuilder.Entity<CcSkvzPollKvzPersonResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_kvz_person_result");

            entity.ToTable("cc_skvz_poll_kvz_person_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollKvzPersonResult)
                .HasForeignKey<CcSkvzPollKvzPersonResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_poll_kvz_person_result");
        });

        modelBuilder.Entity<CcSkvzPollKvzPersonResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_kvz_person_results");

            entity.ToTable("cc_skvz_poll_kvz_person_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.Fdz).HasColumnName("fdz");
            entity.Property(e => e.Fkd).HasColumnName("fkd");
            entity.Property(e => e.FkdFdzResultId).HasColumnName("fkd_fdz_result_id");
            entity.Property(e => e.Fnpr).HasColumnName("fnpr");
            entity.Property(e => e.FnprResultId).HasColumnName("fnpr_result_id");
            entity.Property(e => e.Frod).HasColumnName("frod");
            entity.Property(e => e.FrodResultId).HasColumnName("frod_result_id");
            entity.Property(e => e.IsHistory).HasColumnName("is_history");
            entity.Property(e => e.IsUnplan).HasColumnName("is_unplan");
            entity.Property(e => e.KvzPersonArea)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("kvz_person_area");
            entity.Property(e => e.MapBigId).HasColumnName("map_big_id");
            entity.Property(e => e.MapSmallId).HasColumnName("map_small_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.MovedMentoringStage).HasColumnName("moved_mentoring_stage");
            entity.Property(e => e.MovedMentoringTo).HasColumnName("moved_mentoring_to");
            entity.Property(e => e.MovedStage).HasColumnName("moved_stage");
            entity.Property(e => e.MovedTo).HasColumnName("moved_to");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_type");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
            entity.Property(e => e.ProfileResultId).HasColumnName("profile_result_id");
            entity.Property(e => e.Sfr).HasColumnName("sfr");
            entity.Property(e => e.SkvzActivity)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("skvz_activity");
            entity.Property(e => e.StationBlockId).HasColumnName("station_block_id");
            entity.Property(e => e.SuccessorsResultId).HasColumnName("successors_result_id");
            entity.Property(e => e.UnplanComplete).HasColumnName("unplan_complete");
            entity.Property(e => e.UtpApproved).HasColumnName("utp_approved");
        });

        modelBuilder.Entity<CcSkvzPollSpFinalResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_sp_final_result");

            entity.ToTable("cc_skvz_poll_sp_final_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollSpFinalResult)
                .HasForeignKey<CcSkvzPollSpFinalResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_poll_sp_final_result");
        });

        modelBuilder.Entity<CcSkvzPollSpFinalResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_sp_final_results");

            entity.ToTable("cc_skvz_poll_sp_final_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
            entity.Property(e => e.SpFirstResultId).HasColumnName("sp_first_result_id");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstCr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_sp_first_cr");

            entity.ToTable("cc_skvz_poll_sp_first_cr");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollSpFirstCr)
                .HasForeignKey<CcSkvzPollSpFirstCr>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_poll_sp_first_cr");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstCrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_sp_first_crs");

            entity.ToTable("cc_skvz_poll_sp_first_crs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CriteriaActivityId).HasColumnName("criteria_activity_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.SpFirstResultId).HasColumnName("sp_first_result_id");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_sp_first_result");

            entity.ToTable("cc_skvz_poll_sp_first_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollSpFirstResult)
                .HasForeignKey<CcSkvzPollSpFirstResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_poll_sp_first_result");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_poll_sp_first_results");

            entity.ToTable("cc_skvz_poll_sp_first_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
        });

        modelBuilder.Entity<CcSkvzReadyReservFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_ready_reserv_factor");

            entity.ToTable("cc_skvz_ready_reserv_factor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzReadyReservFactor)
                .HasForeignKey<CcSkvzReadyReservFactor>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_ready_reserv_factor");
        });

        modelBuilder.Entity<CcSkvzReadyReservFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_ready_reserv_factors");

            entity.ToTable("cc_skvz_ready_reserv_factors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzRiskFreePosFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_risk_free_pos_factor");

            entity.ToTable("cc_skvz_risk_free_pos_factor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzRiskFreePosFactor)
                .HasForeignKey<CcSkvzRiskFreePosFactor>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_risk_free_pos_factor");
        });

        modelBuilder.Entity<CcSkvzRiskFreePosFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_risk_free_pos_factors");

            entity.ToTable("cc_skvz_risk_free_pos_factors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_sp");

            entity.ToTable("cc_skvz_sp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzSp)
                .HasForeignKey<CcSkvzSp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_sp");
        });

        modelBuilder.Entity<CcSkvzSpActivityCr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_sp_activity_cr");

            entity.ToTable("cc_skvz_sp_activity_cr");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzSpActivityCr)
                .HasForeignKey<CcSkvzSpActivityCr>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_sp_activity_cr");
        });

        modelBuilder.Entity<CcSkvzSpActivityCrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_sp_activity_crs");

            entity.ToTable("cc_skvz_sp_activity_crs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CriteriaActivityId).HasColumnName("criteria_activity_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.SkvzSpId).HasColumnName("skvz_sp_id");
        });

        modelBuilder.Entity<CcSkvzSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_sps");

            entity.ToTable("cc_skvz_sps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DelegateId).HasColumnName("delegate_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderFileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("order_file_id");
        });

        modelBuilder.Entity<CcSkvzStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_station");

            entity.ToTable("cc_skvz_station");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzStation)
                .HasForeignKey<CcSkvzStation>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_station");
        });

        modelBuilder.Entity<CcSkvzStationBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_station_block");

            entity.ToTable("cc_skvz_station_block");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzStationBlock)
                .HasForeignKey<CcSkvzStationBlock>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_station_block");
        });

        modelBuilder.Entity<CcSkvzStationBlockType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_station_block_type");

            entity.ToTable("cc_skvz_station_block_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzStationBlockType)
                .HasForeignKey<CcSkvzStationBlockType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_station_block_type");
        });

        modelBuilder.Entity<CcSkvzStationBlockTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_station_block_types");

            entity.ToTable("cc_skvz_station_block_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzStationBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_station_blocks");

            entity.ToTable("cc_skvz_station_blocks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzStations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_stations");

            entity.ToTable("cc_skvz_stations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ReactorType)
                .IsUnicode(false)
                .HasColumnName("reactor_type");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.UtpHeadId).HasColumnName("utp_head_id");
        });

        modelBuilder.Entity<CcSkvzSuccessor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_successor");

            entity.ToTable("cc_skvz_successor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzSuccessor)
                .HasForeignKey<CcSkvzSuccessor>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_successor");
        });

        modelBuilder.Entity<CcSkvzSuccessors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_successors");

            entity.ToTable("cc_skvz_successors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSkvzWgMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_wg_member");

            entity.ToTable("cc_skvz_wg_member");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzWgMember)
                .HasForeignKey<CcSkvzWgMember>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_wg_member");
        });

        modelBuilder.Entity<CcSkvzWgMemberToType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_wg_member_to_type");

            entity.ToTable("cc_skvz_wg_member_to_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzWgMemberToType)
                .HasForeignKey<CcSkvzWgMemberToType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_wg_member_to_type");
        });

        modelBuilder.Entity<CcSkvzWgMemberToTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_wg_member_to_types");

            entity.ToTable("cc_skvz_wg_member_to_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.WgMemberId).HasColumnName("wg_member_id");
        });

        modelBuilder.Entity<CcSkvzWgMemberType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_wg_member_type");

            entity.ToTable("cc_skvz_wg_member_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzWgMemberType)
                .HasForeignKey<CcSkvzWgMemberType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_wg_member_type");
        });

        modelBuilder.Entity<CcSkvzWgMemberTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_wg_member_types");

            entity.ToTable("cc_skvz_wg_member_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzWgMembers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_wg_members");

            entity.ToTable("cc_skvz_wg_members");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSkvzYearPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_year_plan");

            entity.ToTable("cc_skvz_year_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzYearPlan)
                .HasForeignKey<CcSkvzYearPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_year_plan");
        });

        modelBuilder.Entity<CcSkvzYearPlanEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_year_plan_event");

            entity.ToTable("cc_skvz_year_plan_event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzYearPlanEvent)
                .HasForeignKey<CcSkvzYearPlanEvent>(d => d.Id)
                .HasConstraintName("FK_objects_cc_skvz_year_plan_event");
        });

        modelBuilder.Entity<CcSkvzYearPlanEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_year_plan_events");

            entity.ToTable("cc_skvz_year_plan_events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsPlan).HasColumnName("is_plan");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrderNum).HasColumnName("order_num");
        });

        modelBuilder.Entity<CcSkvzYearPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_skvz_year_plans");

            entity.ToTable("cc_skvz_year_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.PlanFileId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("plan_file_id");
            entity.Property(e => e.YearPlanEventId).HasColumnName("year_plan_event_id");
        });

        modelBuilder.Entity<CcStaffevalAgentManagment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_agent_managment");

            entity.ToTable("cc_staffeval_agent_managment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalAgentManagment)
                .HasForeignKey<CcStaffevalAgentManagment>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_agent_managment");
        });

        modelBuilder.Entity<CcStaffevalAgentManagments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_agent_managments");

            entity.ToTable("cc_staffeval_agent_managments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AgentLink).HasColumnName("agent_link");
            entity.Property(e => e.AgentName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("agent_name");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.TriggerType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("trigger_type");
        });

        modelBuilder.Entity<CcStaffevalAttestation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_attestation");

            entity.ToTable("cc_staffeval_attestation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalAttestation)
                .HasForeignKey<CcStaffevalAttestation>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_attestation");
        });

        modelBuilder.Entity<CcStaffevalAttestations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_attestations");

            entity.ToTable("cc_staffeval_attestations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Correction)
                .IsUnicode(false)
                .HasColumnName("correction");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId)
                .IsUnicode(false)
                .HasColumnName("creator_id");
            entity.Property(e => e.DateFactFrom)
                .HasColumnType("datetime")
                .HasColumnName("date_fact_from");
            entity.Property(e => e.DateFactTo)
                .HasColumnType("datetime")
                .HasColumnName("date_fact_to");
            entity.Property(e => e.DatePlan)
                .HasColumnType("datetime")
                .HasColumnName("date_plan");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.OrderCorrection)
                .IsUnicode(false)
                .HasColumnName("order_correction");
            entity.Property(e => e.OrderEvent)
                .IsUnicode(false)
                .HasColumnName("order_event");
            entity.Property(e => e.OrderResults)
                .IsUnicode(false)
                .HasColumnName("order_results");
            entity.Property(e => e.Report)
                .IsUnicode(false)
                .HasColumnName("report");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcStaffevalColsCategorie>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_cols_categorie");

            entity.ToTable("cc_staffeval_cols_categorie");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalColsCategorie)
                .HasForeignKey<CcStaffevalColsCategorie>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_cols_categorie");
        });

        modelBuilder.Entity<CcStaffevalColsCategories>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_cols_categories");

            entity.ToTable("cc_staffeval_cols_categories");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalCorrection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_correction");

            entity.ToTable("cc_staffeval_correction");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalCorrection)
                .HasForeignKey<CcStaffevalCorrection>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_correction");
        });

        modelBuilder.Entity<CcStaffevalCorrectionDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_correction_div");

            entity.ToTable("cc_staffeval_correction_div");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalCorrectionDiv)
                .HasForeignKey<CcStaffevalCorrectionDiv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_correction_div");
        });

        modelBuilder.Entity<CcStaffevalCorrectionDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_correction_divs");

            entity.ToTable("cc_staffeval_correction_divs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalCorrections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_corrections");

            entity.ToTable("cc_staffeval_corrections");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CheckName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("check_name");
            entity.Property(e => e.CheckedObject).HasColumnName("checked_object");
            entity.Property(e => e.ContentOfViolation)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("content_of_violation");
            entity.Property(e => e.ControlObject).HasColumnName("control_object");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.LastEditionDate)
                .HasColumnType("datetime")
                .HasColumnName("last_edition_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderCorrection)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("order_correction");
            entity.Property(e => e.OrderResult)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("order_result");
            entity.Property(e => e.PointName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("point_name");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcStaffevalCurator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_curator");

            entity.ToTable("cc_staffeval_curator");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalCurator)
                .HasForeignKey<CcStaffevalCurator>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_curator");
        });

        modelBuilder.Entity<CcStaffevalCurators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_curators");

            entity.ToTable("cc_staffeval_curators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .IsUnicode(false)
                .HasColumnName("edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcStaffevalDirection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_direction");

            entity.ToTable("cc_staffeval_direction");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalDirection)
                .HasForeignKey<CcStaffevalDirection>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_direction");
        });

        modelBuilder.Entity<CcStaffevalDirections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_directions");

            entity.ToTable("cc_staffeval_directions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Parent).HasColumnName("parent");
        });

        modelBuilder.Entity<CcStaffevalDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_document");

            entity.ToTable("cc_staffeval_document");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalDocument)
                .HasForeignKey<CcStaffevalDocument>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_document");
        });

        modelBuilder.Entity<CcStaffevalDocumentCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_document_code");

            entity.ToTable("cc_staffeval_document_code");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalDocumentCode)
                .HasForeignKey<CcStaffevalDocumentCode>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_document_code");
        });

        modelBuilder.Entity<CcStaffevalDocumentCodes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_document_codes");

            entity.ToTable("cc_staffeval_document_codes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DocumentId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("document_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NameDocument)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name_document");
        });

        modelBuilder.Entity<CcStaffevalDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_documents");

            entity.ToTable("cc_staffeval_documents");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalEduHour>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_edu_hour");

            entity.ToTable("cc_staffeval_edu_hour");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalEduHour)
                .HasForeignKey<CcStaffevalEduHour>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_edu_hour");
        });

        modelBuilder.Entity<CcStaffevalEduHours>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_edu_hours");

            entity.ToTable("cc_staffeval_edu_hours");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Categorie)
                .IsUnicode(false)
                .HasColumnName("categorie");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.VolumeOu).HasColumnName("volume_ou");
            entity.Property(e => e.VolumeSp).HasColumnName("volume_sp");
            entity.Property(e => e.VolumeSs).HasColumnName("volume_ss");
            entity.Property(e => e.VolumeTso).HasColumnName("volume_tso");
            entity.Property(e => e.VolumeUtp).HasColumnName("volume_utp");
        });

        modelBuilder.Entity<CcStaffevalFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_file");

            entity.ToTable("cc_staffeval_file");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalFile)
                .HasForeignKey<CcStaffevalFile>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_file");
        });

        modelBuilder.Entity<CcStaffevalFiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_files");

            entity.ToTable("cc_staffeval_files");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.FileName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("file_name");
            entity.Property(e => e.FileType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("file_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalFirstDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_first_document");

            entity.ToTable("cc_staffeval_first_document");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalFirstDocument)
                .HasForeignKey<CcStaffevalFirstDocument>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_first_document");
        });

        modelBuilder.Entity<CcStaffevalFirstDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_first_documents");

            entity.ToTable("cc_staffeval_first_documents");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalFirstQual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_first_qual");

            entity.ToTable("cc_staffeval_first_qual");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalFirstQual)
                .HasForeignKey<CcStaffevalFirstQual>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_first_qual");
        });

        modelBuilder.Entity<CcStaffevalFirstQuals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_first_quals");

            entity.ToTable("cc_staffeval_first_quals");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Admittance)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("admittance");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("category_1");
            entity.Property(e => e.Category2)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("category_2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateFinish)
                .HasColumnType("datetime")
                .HasColumnName("date_finish");
            entity.Property(e => e.DateStart)
                .HasColumnType("datetime")
                .HasColumnName("date_start");
            entity.Property(e => e.DuplicationDocument)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("duplication_document");
            entity.Property(e => e.Instructor).HasColumnName("instructor");
            entity.Property(e => e.InstructorEmail)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("instructor_email");
            entity.Property(e => e.Internship).HasColumnName("internship");
            entity.Property(e => e.InternshipDocument)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("internship_document");
            entity.Property(e => e.IppdDocument)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("ippd_document");
            entity.Property(e => e.LastEditDate)
                .HasColumnType("datetime")
                .HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Learning).HasColumnName("learning");
            entity.Property(e => e.LearningAssessment).HasColumnName("learning_assessment");
            entity.Property(e => e.Location)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("location");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderOnTraining)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("order_on_training");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.PracticalTraining).HasColumnName("practical_training");
            entity.Property(e => e.ResponsibilitiesSubstitution)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("responsibilities_substitution");
            entity.Property(e => e.Result)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("result");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.TheoreticalTraining).HasColumnName("theoretical_training");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalInsPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ins_period");

            entity.ToTable("cc_staffeval_ins_period");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalInsPeriod)
                .HasForeignKey<CcStaffevalInsPeriod>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ins_period");
        });

        modelBuilder.Entity<CcStaffevalInsPeriods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ins_periods");

            entity.ToTable("cc_staffeval_ins_periods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddDate)
                .HasColumnType("datetime")
                .HasColumnName("add_date");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrderFile)
                .IsUnicode(false)
                .HasColumnName("order_file");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcStaffevalInsQualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ins_qualification");

            entity.ToTable("cc_staffeval_ins_qualification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalInsQualification)
                .HasForeignKey<CcStaffevalInsQualification>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ins_qualification");
        });

        modelBuilder.Entity<CcStaffevalInsQualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ins_qualifications");

            entity.ToTable("cc_staffeval_ins_qualifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnotherPlace)
                .IsUnicode(false)
                .HasColumnName("another_place");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Course)
                .IsUnicode(false)
                .HasColumnName("course");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Num).HasColumnName("num");
            entity.Property(e => e.Org)
                .IsUnicode(false)
                .HasColumnName("org");
            entity.Property(e => e.Place)
                .IsUnicode(false)
                .HasColumnName("place");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UtpDivision)
                .IsUnicode(false)
                .HasColumnName("utp_division");
        });

        modelBuilder.Entity<CcStaffevalInstructor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_instructor");

            entity.ToTable("cc_staffeval_instructor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalInstructor)
                .HasForeignKey<CcStaffevalInstructor>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_instructor");
        });

        modelBuilder.Entity<CcStaffevalInstructors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_instructors");

            entity.ToTable("cc_staffeval_instructors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.Direction)
                .IsUnicode(false)
                .HasColumnName("direction");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NotInState).HasColumnName("not_in_state");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartWorkingDate)
                .HasColumnType("datetime")
                .HasColumnName("start_working_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.UtpDivision).HasColumnName("utp_division");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsPerekr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_log_agnts_perekr");

            entity.ToTable("cc_staffeval_log_agnts_perekr");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalLogAgntsPerekr)
                .HasForeignKey<CcStaffevalLogAgntsPerekr>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_log_agnts_perekr");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsPerekrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_log_agnts_perekrs");

            entity.ToTable("cc_staffeval_log_agnts_perekrs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.Agent5Self).HasColumnName("agent_5_self");
            entity.Property(e => e.Agent5Visitor).HasColumnName("agent_5_visitor");
            entity.Property(e => e.Agent6Self).HasColumnName("agent_6_self");
            entity.Property(e => e.Agent6Visitor).HasColumnName("agent_6_visitor");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.LastSendDate1)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_4");
            entity.Property(e => e.LastSendDate5Self)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_5_self");
            entity.Property(e => e.LastSendDate5Visitor)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_5_visitor");
            entity.Property(e => e.LastSendDate6Self)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_6_self");
            entity.Property(e => e.LastSendDate6Visitor)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_6_visitor");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.SelfRatingIsSend).HasColumnName("self_rating_is_send");
            entity.Property(e => e.StaffevalPgPerekrest).HasColumnName("staffeval_pg_perekrest");
            entity.Property(e => e.VisitingRatingIsSend).HasColumnName("visiting_rating_is_send");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsQual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_log_agnts_qual");

            entity.ToTable("cc_staffeval_log_agnts_qual");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalLogAgntsQual)
                .HasForeignKey<CcStaffevalLogAgntsQual>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_log_agnts_qual");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsQuals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_log_agnts_quals");

            entity.ToTable("cc_staffeval_log_agnts_quals");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.Agent5).HasColumnName("agent_5");
            entity.Property(e => e.Agent6).HasColumnName("agent_6");
            entity.Property(e => e.Agent7).HasColumnName("agent_7");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.LastSendDate1)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_4");
            entity.Property(e => e.LastSendDate5)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_5");
            entity.Property(e => e.LastSendDate6)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_6");
            entity.Property(e => e.LastSendDate7)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_7");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StaffevalQualification).HasColumnName("staffeval_qualification");
        });

        modelBuilder.Entity<CcStaffevalPgPerekrest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_pg_perekrest");

            entity.ToTable("cc_staffeval_pg_perekrest");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPgPerekrest)
                .HasForeignKey<CcStaffevalPgPerekrest>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_pg_perekrest");
        });

        modelBuilder.Entity<CcStaffevalPgPerekrests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_pg_perekrests");

            entity.ToTable("cc_staffeval_pg_perekrests");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.ChangeNumber)
                .IsUnicode(false)
                .HasColumnName("change_number");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ColsCategory).HasColumnName("cols_category");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FactDate)
                .HasColumnType("datetime")
                .HasColumnName("fact_date");
            entity.Property(e => e.GuestMark)
                .IsUnicode(false)
                .HasColumnName("guest_mark");
            entity.Property(e => e.GuestUtpDivision).HasColumnName("guest_utp_division");
            entity.Property(e => e.InsUtpDivision).HasColumnName("ins_utp_division");
            entity.Property(e => e.Instructor).HasColumnName("instructor");
            entity.Property(e => e.InstructorGuest).HasColumnName("instructor_guest");
            entity.Property(e => e.InstructorMark)
                .IsUnicode(false)
                .HasColumnName("instructor_mark");
            entity.Property(e => e.Ishappened).HasColumnName("ishappened");
            entity.Property(e => e.LearningAssessment).HasColumnName("learning_assessment");
            entity.Property(e => e.Mark)
                .IsUnicode(false)
                .HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollPdf)
                .IsUnicode(false)
                .HasColumnName("poll_pdf");
            entity.Property(e => e.Programm)
                .IsUnicode(false)
                .HasColumnName("programm");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.SelfRating).HasColumnName("self_rating");
            entity.Property(e => e.SendDateSelfRating)
                .HasColumnType("datetime")
                .HasColumnName("send_date_self_rating");
            entity.Property(e => e.SendDateVisitorRating)
                .HasColumnType("datetime")
                .HasColumnName("send_date_visitor_rating");
            entity.Property(e => e.SpId)
                .IsUnicode(false)
                .HasColumnName("sp_id");
            entity.Property(e => e.SpRukId).HasColumnName("sp_ruk_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Theme)
                .IsUnicode(false)
                .HasColumnName("theme");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.VisitType)
                .IsUnicode(false)
                .HasColumnName("visit_type");
            entity.Property(e => e.VisitorRating).HasColumnName("visitor_rating");
        });

        modelBuilder.Entity<CcStaffevalPollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_poll_procedure");

            entity.ToTable("cc_staffeval_poll_procedure");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollProcedure)
                .HasForeignKey<CcStaffevalPollProcedure>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_poll_procedure");
        });

        modelBuilder.Entity<CcStaffevalPollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_poll_procedures");

            entity.ToTable("cc_staffeval_poll_procedures");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.PollProcessId).HasColumnName("poll_process_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<CcStaffevalPollsItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_item");

            entity.ToTable("cc_staffeval_polls_item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsItem)
                .HasForeignKey<CcStaffevalPollsItem>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_polls_item");
        });

        modelBuilder.Entity<CcStaffevalPollsItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_items");

            entity.ToTable("cc_staffeval_polls_items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsRequired).HasColumnName("is_required");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Questions)
                .IsUnicode(false)
                .HasColumnName("questions");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalPollsPUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_p_user");

            entity.ToTable("cc_staffeval_polls_p_user");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsPUser)
                .HasForeignKey<CcStaffevalPollsPUser>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_polls_p_user");
        });

        modelBuilder.Entity<CcStaffevalPollsPUsers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_p_users");

            entity.ToTable("cc_staffeval_polls_p_users");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.LastSendDate)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.SendCounter).HasColumnName("send_counter");
            entity.Property(e => e.SendDate)
                .HasColumnType("datetime")
                .HasColumnName("send_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalPollsResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_result");

            entity.ToTable("cc_staffeval_polls_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsResult)
                .HasForeignKey<CcStaffevalPollsResult>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_polls_result");
        });

        modelBuilder.Entity<CcStaffevalPollsResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_results");

            entity.ToTable("cc_staffeval_polls_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.Result)
                .IsUnicode(false)
                .HasColumnName("result");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalPollsType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_type");

            entity.ToTable("cc_staffeval_polls_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsType)
                .HasForeignKey<CcStaffevalPollsType>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_polls_type");
        });

        modelBuilder.Entity<CcStaffevalPollsTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_polls_types");

            entity.ToTable("cc_staffeval_polls_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_position");

            entity.ToTable("cc_staffeval_position");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPosition)
                .HasForeignKey<CcStaffevalPosition>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_position");
        });

        modelBuilder.Entity<CcStaffevalPositionCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_position_ca");

            entity.ToTable("cc_staffeval_position_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPositionCa)
                .HasForeignKey<CcStaffevalPositionCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_position_ca");
        });

        modelBuilder.Entity<CcStaffevalPositionCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_position_cas");

            entity.ToTable("cc_staffeval_position_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.LastEditDate)
                .HasColumnType("datetime")
                .HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_positions");

            entity.ToTable("cc_staffeval_positions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DivisionId).HasColumnName("division_id");
            entity.Property(e => e.DivisionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("division_name");
            entity.Property(e => e.LastEditionDate)
                .HasColumnType("datetime")
                .HasColumnName("last_edition_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NameCa).HasColumnName("name_ca");
            entity.Property(e => e.NameId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("subdivision_name");
        });

        modelBuilder.Entity<CcStaffevalPpdCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_ca");

            entity.ToTable("cc_staffeval_ppd_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdCa)
                .HasForeignKey<CcStaffevalPpdCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppd_ca");
        });

        modelBuilder.Entity<CcStaffevalPpdCaFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_ca_first_plan");

            entity.ToTable("cc_staffeval_ppd_ca_first_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdCaFirstPlan)
                .HasForeignKey<CcStaffevalPpdCaFirstPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppd_ca_first_plan");
        });

        modelBuilder.Entity<CcStaffevalPpdCaFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_ca_first_plans");

            entity.ToTable("cc_staffeval_ppd_ca_first_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Requisites)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalPpdCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_cas");

            entity.ToTable("cc_staffeval_ppd_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalPpdFixedCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_fixed_ca");

            entity.ToTable("cc_staffeval_ppd_fixed_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdFixedCa)
                .HasForeignKey<CcStaffevalPpdFixedCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppd_fixed_ca");
        });

        modelBuilder.Entity<CcStaffevalPpdFixedCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_fixed_cas");

            entity.ToTable("cc_staffeval_ppd_fixed_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalPpdSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_sp");

            entity.ToTable("cc_staffeval_ppd_sp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdSp)
                .HasForeignKey<CcStaffevalPpdSp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppd_sp");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_sp_first_plan");

            entity.ToTable("cc_staffeval_ppd_sp_first_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdSpFirstPlan)
                .HasForeignKey<CcStaffevalPpdSpFirstPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppd_sp_first_plan");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_sp_first_plans");

            entity.ToTable("cc_staffeval_ppd_sp_first_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFixed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_sp_fixed");

            entity.ToTable("cc_staffeval_ppd_sp_fixed");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdSpFixed)
                .HasForeignKey<CcStaffevalPpdSpFixed>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppd_sp_fixed");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFixeds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_sp_fixeds");

            entity.ToTable("cc_staffeval_ppd_sp_fixeds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalPpdSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppd_sps");

            entity.ToTable("cc_staffeval_ppd_sps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalPpk>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppk");

            entity.ToTable("cc_staffeval_ppk");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpk)
                .HasForeignKey<CcStaffevalPpk>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppk");
        });

        modelBuilder.Entity<CcStaffevalPpkCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppk_ca");

            entity.ToTable("cc_staffeval_ppk_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpkCa)
                .HasForeignKey<CcStaffevalPpkCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppk_ca");
        });

        modelBuilder.Entity<CcStaffevalPpkCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppk_cas");

            entity.ToTable("cc_staffeval_ppk_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditEnabled).HasColumnName("edit_enabled");
            entity.Property(e => e.EndYear)
                .HasColumnType("datetime")
                .HasColumnName("end_year");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PositionCategory1)
                .IsUnicode(false)
                .HasColumnName("position_category_1");
            entity.Property(e => e.PositionCategory2)
                .IsUnicode(false)
                .HasColumnName("position_category_2");
            entity.Property(e => e.PpkLocation)
                .IsUnicode(false)
                .HasColumnName("ppk_location");
            entity.Property(e => e.Rostehnadzor).HasColumnName("rostehnadzor");
            entity.Property(e => e.SpResponsible).HasColumnName("sp_responsible");
            entity.Property(e => e.StartYear)
                .HasColumnType("datetime")
                .HasColumnName("start_year");
            entity.Property(e => e.StationsListPpk)
                .IsUnicode(false)
                .HasColumnName("stations_list_ppk");
            entity.Property(e => e.TheoreticalHours).HasColumnName("theoretical_hours");
        });

        modelBuilder.Entity<CcStaffevalPpkSpFromCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppk_sp_from_ca");

            entity.ToTable("cc_staffeval_ppk_sp_from_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpkSpFromCa)
                .HasForeignKey<CcStaffevalPpkSpFromCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_ppk_sp_from_ca");
        });

        modelBuilder.Entity<CcStaffevalPpkSpFromCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppk_sp_from_cas");

            entity.ToTable("cc_staffeval_ppk_sp_from_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.InstructionHours).HasColumnName("instruction_hours");
            entity.Property(e => e.InternshipHours).HasColumnName("internship_hours");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrgsRate)
                .IsUnicode(false)
                .HasColumnName("orgs_rate");
            entity.Property(e => e.PositionName)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.PpkCaId).HasColumnName("ppk_ca_id");
            entity.Property(e => e.PracticalHours).HasColumnName("practical_hours");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.SpList)
                .IsUnicode(false)
                .HasColumnName("sp_list");
            entity.Property(e => e.StaffQty)
                .IsUnicode(false)
                .HasColumnName("staff_qty");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.TrainingHours)
                .IsUnicode(false)
                .HasColumnName("training_hours");
        });

        modelBuilder.Entity<CcStaffevalPpks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_ppks");

            entity.ToTable("cc_staffeval_ppks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnketIsOverdue).HasColumnName("anket_is_overdue");
            entity.Property(e => e.AnketIsOverdueSendDate)
                .HasColumnType("datetime")
                .HasColumnName("anket_is_overdue_send_date");
            entity.Property(e => e.AnketIsSend).HasColumnName("anket_is_send");
            entity.Property(e => e.AnketSendDate)
                .HasColumnType("datetime")
                .HasColumnName("anket_send_date");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EndYear).HasColumnName("end_year");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FioResponsible).HasColumnName("fio_responsible");
            entity.Property(e => e.InstructionHours).HasColumnName("instruction_hours");
            entity.Property(e => e.InternshipHours).HasColumnName("internship_hours");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PositionsName)
                .IsUnicode(false)
                .HasColumnName("positions_name");
            entity.Property(e => e.PpkCaId).HasColumnName("ppk_ca_id");
            entity.Property(e => e.PpkLocation)
                .IsUnicode(false)
                .HasColumnName("ppk_location");
            entity.Property(e => e.PracticalHours).HasColumnName("practical_hours");
            entity.Property(e => e.Requisites)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.Rostehnadzor).HasColumnName("rostehnadzor");
            entity.Property(e => e.SpForPpk)
                .IsUnicode(false)
                .HasColumnName("sp_for_ppk");
            entity.Property(e => e.SpReponsibleSupport)
                .IsUnicode(false)
                .HasColumnName("sp_reponsible_support");
            entity.Property(e => e.SpResponsibleDev)
                .IsUnicode(false)
                .HasColumnName("sp_responsible_dev");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StartYear).HasColumnName("start_year");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TheoreticalHours).HasColumnName("theoretical_hours");
            entity.Property(e => e.TrainingHours).HasColumnName("training_hours");
        });

        modelBuilder.Entity<CcStaffevalProcessName>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_process_name");

            entity.ToTable("cc_staffeval_process_name");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalProcessName)
                .HasForeignKey<CcStaffevalProcessName>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_process_name");
        });

        modelBuilder.Entity<CcStaffevalProcessNames>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_process_names");

            entity.ToTable("cc_staffeval_process_names");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalQualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_qualification");

            entity.ToTable("cc_staffeval_qualification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalQualification)
                .HasForeignKey<CcStaffevalQualification>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_qualification");
        });

        modelBuilder.Entity<CcStaffevalQualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_qualifications");

            entity.ToTable("cc_staffeval_qualifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditionalTraining)
                .IsUnicode(false)
                .HasColumnName("additional_training");
            entity.Property(e => e.Admittance)
                .IsUnicode(false)
                .HasColumnName("admittance");
            entity.Property(e => e.AdmittanceDate)
                .HasColumnType("datetime")
                .HasColumnName("admittance_date");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.Comments)
                .IsUnicode(false)
                .HasColumnName("comments");
            entity.Property(e => e.ContentCompliance)
                .IsUnicode(false)
                .HasColumnName("content_compliance");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateFinish)
                .HasColumnType("datetime")
                .HasColumnName("date_finish");
            entity.Property(e => e.DateStart)
                .HasColumnType("datetime")
                .HasColumnName("date_start");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DuplicationDocument)
                .IsUnicode(false)
                .HasColumnName("duplication_document");
            entity.Property(e => e.EducationResult)
                .IsUnicode(false)
                .HasColumnName("education_result");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.Instructor).HasColumnName("instructor");
            entity.Property(e => e.Internship).HasColumnName("internship");
            entity.Property(e => e.InternshipDocument)
                .IsUnicode(false)
                .HasColumnName("internship_document");
            entity.Property(e => e.IppdDocument)
                .IsUnicode(false)
                .HasColumnName("ippd_document");
            entity.Property(e => e.LastEditDate)
                .HasColumnType("datetime")
                .HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Learning).HasColumnName("learning");
            entity.Property(e => e.LearningAssessment).HasColumnName("learning_assessment");
            entity.Property(e => e.Location)
                .IsUnicode(false)
                .HasColumnName("location");
            entity.Property(e => e.MainPosition).HasColumnName("main_position");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrderOnTraining)
                .IsUnicode(false)
                .HasColumnName("order_on_training");
            entity.Property(e => e.OrganizationQuality)
                .IsUnicode(false)
                .HasColumnName("organization_quality");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Permission).HasColumnName("permission");
            entity.Property(e => e.Poll).HasColumnName("poll");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Ppd)
                .IsUnicode(false)
                .HasColumnName("ppd");
            entity.Property(e => e.PpdFile)
                .IsUnicode(false)
                .HasColumnName("ppd_file");
            entity.Property(e => e.PracticalTraining).HasColumnName("practical_training");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.Result)
                .IsUnicode(false)
                .HasColumnName("result");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusQual).HasColumnName("status_qual");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Suggestions)
                .IsUnicode(false)
                .HasColumnName("suggestions");
            entity.Property(e => e.TheoreticalTraining).HasColumnName("theoretical_training");
            entity.Property(e => e.TimePercents).HasColumnName("time_percents");
            entity.Property(e => e.TotalTime).HasColumnName("total_time");
            entity.Property(e => e.TrainigPositions)
                .IsUnicode(false)
                .HasColumnName("trainig_positions");
            entity.Property(e => e.TsoSupply)
                .IsUnicode(false)
                .HasColumnName("tso_supply");
            entity.Property(e => e.UmdQuality)
                .IsUnicode(false)
                .HasColumnName("umd_quality");
            entity.Property(e => e.UmdSupply)
                .IsUnicode(false)
                .HasColumnName("umd_supply");
            entity.Property(e => e.VerificationEvent)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("verification_event");
        });

        modelBuilder.Entity<CcStaffevalRmdCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_ca");

            entity.ToTable("cc_staffeval_rmd_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdCa)
                .HasForeignKey<CcStaffevalRmdCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_rmd_ca");
        });

        modelBuilder.Entity<CcStaffevalRmdCaFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_ca_first_plan");

            entity.ToTable("cc_staffeval_rmd_ca_first_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdCaFirstPlan)
                .HasForeignKey<CcStaffevalRmdCaFirstPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_rmd_ca_first_plan");
        });

        modelBuilder.Entity<CcStaffevalRmdCaFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_ca_first_plans");

            entity.ToTable("cc_staffeval_rmd_ca_first_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Requisites)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalRmdCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_cas");

            entity.ToTable("cc_staffeval_rmd_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalRmdFixedCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_fixed_ca");

            entity.ToTable("cc_staffeval_rmd_fixed_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdFixedCa)
                .HasForeignKey<CcStaffevalRmdFixedCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_rmd_fixed_ca");
        });

        modelBuilder.Entity<CcStaffevalRmdFixedCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_fixed_cas");

            entity.ToTable("cc_staffeval_rmd_fixed_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalRmdSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_sp");

            entity.ToTable("cc_staffeval_rmd_sp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdSp)
                .HasForeignKey<CcStaffevalRmdSp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_rmd_sp");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_sp_first_plan");

            entity.ToTable("cc_staffeval_rmd_sp_first_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdSpFirstPlan)
                .HasForeignKey<CcStaffevalRmdSpFirstPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_rmd_sp_first_plan");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_sp_first_plans");

            entity.ToTable("cc_staffeval_rmd_sp_first_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFixed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_sp_fixed");

            entity.ToTable("cc_staffeval_rmd_sp_fixed");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdSpFixed)
                .HasForeignKey<CcStaffevalRmdSpFixed>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_rmd_sp_fixed");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFixeds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_sp_fixeds");

            entity.ToTable("cc_staffeval_rmd_sp_fixeds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalRmdSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rmd_sps");

            entity.ToTable("cc_staffeval_rmd_sps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_room");

            entity.ToTable("cc_staffeval_room");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRoom)
                .HasForeignKey<CcStaffevalRoom>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_room");
        });

        modelBuilder.Entity<CcStaffevalRooms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_rooms");

            entity.ToTable("cc_staffeval_rooms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaRoom).HasColumnName("area_room");
            entity.Property(e => e.AudioSpeakers).HasColumnName("audio_speakers");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.FunctionRoom)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("function_room");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.MagnetoMarkerBoard).HasColumnName("magneto_marker_board");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NameUtp).HasColumnName("name_utp");
            entity.Property(e => e.NumberBuilding)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("number_building");
            entity.Property(e => e.NumberOfSeats).HasColumnName("number_of_seats");
            entity.Property(e => e.NumberRoom)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("number_room");
            entity.Property(e => e.Screen).HasColumnName("screen");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.TypeBoard)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_board");
            entity.Property(e => e.TypeMonitor)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_monitor");
            entity.Property(e => e.TypePc)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_pc");
            entity.Property(e => e.TypeProjector)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_projector");
            entity.Property(e => e.TypeRoom).HasColumnName("type_room");
        });

        modelBuilder.Entity<CcStaffevalStatusList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_status_list");

            entity.ToTable("cc_staffeval_status_list");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalStatusList)
                .HasForeignKey<CcStaffevalStatusList>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_status_list");
        });

        modelBuilder.Entity<CcStaffevalStatusLists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_status_lists");

            entity.ToTable("cc_staffeval_status_lists");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StatusName)
                .IsUnicode(false)
                .HasColumnName("status_name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalTestPollsP>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_test_polls_p");

            entity.ToTable("cc_staffeval_test_polls_p");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTestPollsP)
                .HasForeignKey<CcStaffevalTestPollsP>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_test_polls_p");
        });

        modelBuilder.Entity<CcStaffevalTestPollsPs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_test_polls_ps");

            entity.ToTable("cc_staffeval_test_polls_ps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PollId)
                .IsUnicode(false)
                .HasColumnName("poll_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<CcStaffevalTestPollsR>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_test_polls_r");

            entity.ToTable("cc_staffeval_test_polls_r");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTestPollsR)
                .HasForeignKey<CcStaffevalTestPollsR>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_test_polls_r");
        });

        modelBuilder.Entity<CcStaffevalTestPollsRs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_test_polls_rs");

            entity.ToTable("cc_staffeval_test_polls_rs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.Result)
                .IsUnicode(false)
                .HasColumnName("result");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalTestPollsU>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_test_polls_u");

            entity.ToTable("cc_staffeval_test_polls_u");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTestPollsU)
                .HasForeignKey<CcStaffevalTestPollsU>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_test_polls_u");
        });

        modelBuilder.Entity<CcStaffevalTestPollsUs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_test_polls_us");

            entity.ToTable("cc_staffeval_test_polls_us");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.SendDate)
                .HasColumnType("datetime")
                .HasColumnName("send_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalTso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_tso");

            entity.ToTable("cc_staffeval_tso");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTso)
                .HasForeignKey<CcStaffevalTso>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_tso");
        });

        modelBuilder.Entity<CcStaffevalTsos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_tsos");

            entity.ToTable("cc_staffeval_tsos");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CommissioningDocument)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("commissioning_document");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateEquipmentInformation)
                .HasColumnType("datetime")
                .HasColumnName("date_equipment_information");
            entity.Property(e => e.DatePmtInformation)
                .HasColumnType("datetime")
                .HasColumnName("date_pmt_information");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.EquipmentInformation)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("equipment_information");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InfoTso)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("info_tso");
            entity.Property(e => e.InstallationLocation).HasColumnName("installation_location");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NameTso)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name_tso");
            entity.Property(e => e.PersonalCategory)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("personal_category");
            entity.Property(e => e.PmtInformation)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("pmt_information");
            entity.Property(e => e.PurposeTso)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("purpose_tso");
            entity.Property(e => e.RequisitesProjectTso)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites_project_tso");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.TypeBrandNumTso)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_brand_num_tso");
            entity.Property(e => e.TypeTso).HasColumnName("type_tso");
        });

        modelBuilder.Entity<CcStaffevalTypeRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_type_room");

            entity.ToTable("cc_staffeval_type_room");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTypeRoom)
                .HasForeignKey<CcStaffevalTypeRoom>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_type_room");
        });

        modelBuilder.Entity<CcStaffevalTypeRooms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_type_rooms");

            entity.ToTable("cc_staffeval_type_rooms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalTypeTso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_type_tso");

            entity.ToTable("cc_staffeval_type_tso");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTypeTso)
                .HasForeignKey<CcStaffevalTypeTso>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_type_tso");
        });

        modelBuilder.Entity<CcStaffevalTypeTsos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_type_tsos");

            entity.ToTable("cc_staffeval_type_tsos");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalUmmCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_ca");

            entity.ToTable("cc_staffeval_umm_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmCa)
                .HasForeignKey<CcStaffevalUmmCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_umm_ca");
        });

        modelBuilder.Entity<CcStaffevalUmmCaFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_ca_first_plan");

            entity.ToTable("cc_staffeval_umm_ca_first_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmCaFirstPlan)
                .HasForeignKey<CcStaffevalUmmCaFirstPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_umm_ca_first_plan");
        });

        modelBuilder.Entity<CcStaffevalUmmCaFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_ca_first_plans");

            entity.ToTable("cc_staffeval_umm_ca_first_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Requisites)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalUmmCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_cas");

            entity.ToTable("cc_staffeval_umm_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalUmmFixedCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_fixed_ca");

            entity.ToTable("cc_staffeval_umm_fixed_ca");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmFixedCa)
                .HasForeignKey<CcStaffevalUmmFixedCa>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_umm_fixed_ca");
        });

        modelBuilder.Entity<CcStaffevalUmmFixedCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_fixed_cas");

            entity.ToTable("cc_staffeval_umm_fixed_cas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Npp)
                .IsUnicode(false)
                .HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalUmmSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_sp");

            entity.ToTable("cc_staffeval_umm_sp");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmSp)
                .HasForeignKey<CcStaffevalUmmSp>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_umm_sp");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_sp_first_plan");

            entity.ToTable("cc_staffeval_umm_sp_first_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmSpFirstPlan)
                .HasForeignKey<CcStaffevalUmmSpFirstPlan>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_umm_sp_first_plan");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_sp_first_plans");

            entity.ToTable("cc_staffeval_umm_sp_first_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFixed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_sp_fixed");

            entity.ToTable("cc_staffeval_umm_sp_fixed");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmSpFixed)
                .HasForeignKey<CcStaffevalUmmSpFixed>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_umm_sp_fixed");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFixeds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_sp_fixeds");

            entity.ToTable("cc_staffeval_umm_sp_fixeds");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalUmmSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_umm_sps");

            entity.ToTable("cc_staffeval_umm_sps");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1)
                .IsUnicode(false)
                .HasColumnName("category1");
            entity.Property(e => e.Category2)
                .IsUnicode(false)
                .HasColumnName("category2");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl)
                .IsUnicode(false)
                .HasColumnName("external_url");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FirstDate)
                .HasColumnType("datetime")
                .HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4)
                .HasColumnType("datetime")
                .HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision)
                .IsUnicode(false)
                .HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalUtpDepartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_utp_department");

            entity.ToTable("cc_staffeval_utp_department");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUtpDepartment)
                .HasForeignKey<CcStaffevalUtpDepartment>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_utp_department");
        });

        modelBuilder.Entity<CcStaffevalUtpDepartments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_utp_departments");

            entity.ToTable("cc_staffeval_utp_departments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalUtpDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_utp_div");

            entity.ToTable("cc_staffeval_utp_div");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUtpDiv)
                .HasForeignKey<CcStaffevalUtpDiv>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_utp_div");
        });

        modelBuilder.Entity<CcStaffevalUtpDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_utp_divs");

            entity.ToTable("cc_staffeval_utp_divs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station)
                .IsUnicode(false)
                .HasColumnName("station");
            entity.Property(e => e.SubdivFact).HasColumnName("subdiv_fact");
            entity.Property(e => e.SubdivFactI).HasColumnName("subdiv_fact_i");
            entity.Property(e => e.SubdivPlan).HasColumnName("subdiv_plan");
            entity.Property(e => e.SubdivPlanI).HasColumnName("subdiv_plan_i");
            entity.Property(e => e.Subdivision)
                .IsUnicode(false)
                .HasColumnName("subdivision");
        });

        modelBuilder.Entity<CcStaffevalUtpGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_utp_group");

            entity.ToTable("cc_staffeval_utp_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUtpGroup)
                .HasForeignKey<CcStaffevalUtpGroup>(d => d.Id)
                .HasConstraintName("FK_objects_cc_staffeval_utp_group");
        });

        modelBuilder.Entity<CcStaffevalUtpGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_staffeval_utp_groups");

            entity.ToTable("cc_staffeval_utp_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Fact).HasColumnName("fact");
            entity.Property(e => e.FactI).HasColumnName("fact_i");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Plan).HasColumnName("plan");
            entity.Property(e => e.PlanI).HasColumnName("plan_i");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcTemplateTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_template_theme");

            entity.ToTable("cc_template_theme");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcTemplateTheme)
                .HasForeignKey<CcTemplateTheme>(d => d.Id)
                .HasConstraintName("FK_objects_cc_template_theme");
        });

        modelBuilder.Entity<CcTemplateThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_template_themes");

            entity.ToTable("cc_template_themes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.TaskId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("task_id");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
        });

        modelBuilder.Entity<CcTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_theme");

            entity.ToTable("cc_theme");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcTheme)
                .HasForeignKey<CcTheme>(d => d.Id)
                .HasConstraintName("FK_objects_cc_theme");
        });

        modelBuilder.Entity<CcThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_themes");

            entity.ToTable("cc_themes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcTrainingSubject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_training_subject");

            entity.ToTable("cc_training_subject");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcTrainingSubject)
                .HasForeignKey<CcTrainingSubject>(d => d.Id)
                .HasConstraintName("FK_objects_cc_training_subject");
        });

        modelBuilder.Entity<CcTrainingSubjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_training_subjects");

            entity.ToTable("cc_training_subjects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_version");

            entity.ToTable("cc_version");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcVersion)
                .HasForeignKey<CcVersion>(d => d.Id)
                .HasConstraintName("FK_objects_cc_version");
        });

        modelBuilder.Entity<CcVersions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_versions");

            entity.ToTable("cc_versions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Major).HasColumnName("major");
            entity.Property(e => e.Minor).HasColumnName("minor");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
        });

        modelBuilder.Entity<CcWebNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_web_notification");

            entity.ToTable("cc_web_notification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcWebNotification)
                .HasForeignKey<CcWebNotification>(d => d.Id)
                .HasConstraintName("FK_objects_cc_web_notification");
        });

        modelBuilder.Entity<CcWebNotifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cc_web_notifications");

            entity.ToTable("cc_web_notifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.IsRead).HasColumnName("is_read");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Title)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Toasted).HasColumnName("toasted");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificate");

            entity.ToTable("certificate");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Certificate)
                .HasForeignKey<Certificate>(d => d.Id)
                .HasConstraintName("FK_objects_certificate");
        });

        modelBuilder.Entity<CertificateType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificate_type");

            entity.ToTable("certificate_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CertificateType)
                .HasForeignKey<CertificateType>(d => d.Id)
                .HasConstraintName("FK_objects_certificate_type");
        });

        modelBuilder.Entity<CertificateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificate_types");

            entity.ToTable("certificate_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.Forever).HasColumnName("forever");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RequiredQuantity).HasColumnName("required_quantity");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Certificates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificates");

            entity.ToTable("certificates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("delivery_date");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expire_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.Serial)
                .IsUnicode(false)
                .HasColumnName("serial");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.TypeName)
                .IsUnicode(false)
                .HasColumnName("type_name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Valid).HasColumnName("valid");
        });

        modelBuilder.Entity<CfEducationMethods>(entity =>
        {
            entity.HasKey(e => e.EducationMethodId);

            entity.ToTable("cf_education_methods");

            entity.Property(e => e.EducationMethodId)
                .ValueGeneratedNever()
                .HasColumnName("education_method_id");
            entity.Property(e => e.EditForbidden).HasColumnName("edit_forbidden");
            entity.Property(e => e.FDivision).HasColumnName("f_division");
            entity.Property(e => e.FDurationPractice).HasColumnName("f_duration_practice");
            entity.Property(e => e.FEduField).HasColumnName("f_edu_field");
            entity.Property(e => e.FEduType).HasColumnName("f_edu_type");
            entity.Property(e => e.FFileReason).HasColumnName("f_file_reason");
            entity.Property(e => e.FFinishActive)
                .HasColumnType("datetime")
                .HasColumnName("f_finish_active");
            entity.Property(e => e.FReason).HasColumnName("f_reason");
            entity.Property(e => e.FReasonText)
                .HasColumnType("ntext")
                .HasColumnName("f_reason_text");
            entity.Property(e => e.FStartActive)
                .HasColumnType("datetime")
                .HasColumnName("f_start_active");
            entity.Property(e => e.FThemes).HasColumnName("f_themes");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsIpk).HasColumnName("is_ipk");
            entity.Property(e => e.IsNds).HasColumnName("is_nds");
            entity.Property(e => e.IsSp).HasColumnName("is_sp");
            entity.Property(e => e.MigrationId)
                .HasMaxLength(255)
                .HasColumnName("migration_id");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<CfPkThemes>(entity =>
        {
            entity.ToTable("cf_pk_themes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseTid)
                .HasMaxLength(50)
                .HasColumnName("course_tid");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.Sel).HasColumnName("sel");
            entity.Property(e => e.Tid).HasColumnName("tid");
        });

        modelBuilder.Entity<CfRequests>(entity =>
        {
            entity.ToTable("cf_requests");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.EduType).HasColumnName("edu_type");
            entity.Property(e => e.FReason).HasColumnName("f_reason");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.Individual).HasColumnName("individual");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsFinished).HasColumnName("is_finished");
            entity.Property(e => e.IsOut).HasColumnName("is_out");
            entity.Property(e => e.Mvz1).HasColumnName("mvz_1");
            entity.Property(e => e.Mvz2).HasColumnName("mvz_2");
            entity.Property(e => e.NInd).HasColumnName("n_ind");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlanCost).HasColumnName("plan_cost");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.RejectReason).HasColumnName("reject_reason");
            entity.Property(e => e.SourceRequest).HasColumnName("source_request");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Change>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__change");

            entity.ToTable("change");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Change)
                .HasForeignKey<Change>(d => d.Id)
                .HasConstraintName("FK_objects_change");
        });

        modelBuilder.Entity<Changes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__changes");

            entity.ToTable("changes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chat");

            entity.ToTable("chat");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Chat)
                .HasForeignKey<Chat>(d => d.Id)
                .HasConstraintName("FK_objects_chat");
        });

        modelBuilder.Entity<Chatbot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot");

            entity.ToTable("chatbot");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Chatbot)
                .HasForeignKey<Chatbot>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot");
        });

        modelBuilder.Entity<ChatbotChat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_chat");

            entity.ToTable("chatbot_chat");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChatbotChat)
                .HasForeignKey<ChatbotChat>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot_chat");
        });

        modelBuilder.Entity<ChatbotChatbotTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_chatbot_types");

            entity.ToTable("chatbot_chatbot_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BotId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("bot_id");
            entity.Property(e => e.ChatbotCode)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("chatbot_code");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.ChatbotTypeId).HasColumnName("chatbot_type_id");
            entity.Property(e => e.WebhookUrl)
                .IsUnicode(false)
                .HasColumnName("webhook_url");
        });

        modelBuilder.Entity<ChatbotChats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_chats");

            entity.ToTable("chatbot_chats");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BotId)
                .IsUnicode(false)
                .HasColumnName("bot_id");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.ChatbotStageId).HasColumnName("chatbot_stage_id");
            entity.Property(e => e.ChatbotTypeId).HasColumnName("chatbot_type_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.LastMessageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_message_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
        });

        modelBuilder.Entity<ChatbotStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_stage");

            entity.ToTable("chatbot_stage");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChatbotStage)
                .HasForeignKey<ChatbotStage>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot_stage");
        });

        modelBuilder.Entity<ChatbotStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_stages");

            entity.ToTable("chatbot_stages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActionType)
                .IsUnicode(false)
                .HasColumnName("action_type");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.KeyboardType)
                .IsUnicode(false)
                .HasColumnName("keyboard_type");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<ChatbotType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_type");

            entity.ToTable("chatbot_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChatbotType)
                .HasForeignKey<ChatbotType>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot_type");
        });

        modelBuilder.Entity<ChatbotTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_types");

            entity.ToTable("chatbot_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ScriptUrl)
                .IsUnicode(false)
                .HasColumnName("script_url");
        });

        modelBuilder.Entity<Chatbots>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbots");

            entity.ToTable("chatbots");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartChatbotStageId).HasColumnName("start_chatbot_stage_id");
        });

        modelBuilder.Entity<Chats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chats");

            entity.ToTable("chats");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Collaborators)
                .IsUnicode(false)
                .HasColumnName("collaborators");
            entity.Property(e => e.IsPersonal).HasColumnName("is_personal");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClConst>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_const");

            entity.ToTable("cl_const");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClConst)
                .HasForeignKey<ClConst>(d => d.Id)
                .HasConstraintName("FK_objects_cl_const");
        });

        modelBuilder.Entity<ClConsts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_consts");

            entity.ToTable("cl_consts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Imprint)
                .HasColumnType("xml")
                .HasColumnName("imprint");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId)
                .HasColumnType("xml")
                .HasColumnName("object_id");
        });

        modelBuilder.Entity<ClCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_course");

            entity.ToTable("cl_course");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClCourse)
                .HasForeignKey<ClCourse>(d => d.Id)
                .HasConstraintName("FK_objects_cl_course");
        });

        modelBuilder.Entity<ClCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_courses");

            entity.ToTable("cl_courses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorId)
                .HasColumnType("xml")
                .HasColumnName("author_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.LocalizationId)
                .HasColumnType("xml")
                .HasColumnName("localization_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.TagId)
                .HasColumnType("xml")
                .HasColumnName("tag_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClLocalization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_localization");

            entity.ToTable("cl_localization");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClLocalization)
                .HasForeignKey<ClLocalization>(d => d.Id)
                .HasConstraintName("FK_objects_cl_localization");
        });

        modelBuilder.Entity<ClLocalizations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_localizations");

            entity.ToTable("cl_localizations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ClModule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_module");

            entity.ToTable("cl_module");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClModule)
                .HasForeignKey<ClModule>(d => d.Id)
                .HasConstraintName("FK_objects_cl_module");
        });

        modelBuilder.Entity<ClModules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_modules");

            entity.ToTable("cl_modules");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CategoryLabel)
                .IsUnicode(false)
                .HasColumnName("category_label");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.ClCourseId).HasColumnName("cl_course_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.IsTemplate).HasColumnName("is_template");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.ResourceUrl)
                .IsUnicode(false)
                .HasColumnName("resource_url");
            entity.Property(e => e.SlideHeight).HasColumnName("slide_height");
            entity.Property(e => e.SlideWidth).HasColumnName("slide_width");
            entity.Property(e => e.Stamp).HasColumnName("stamp");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClObject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_object");

            entity.ToTable("cl_object");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClObject)
                .HasForeignKey<ClObject>(d => d.Id)
                .HasConstraintName("FK_objects_cl_object");
        });

        modelBuilder.Entity<ClObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_objects");

            entity.ToTable("cl_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CategoryLabel)
                .IsUnicode(false)
                .HasColumnName("category_label");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceUrl)
                .IsUnicode(false)
                .HasColumnName("resource_url");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClShape>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_shape");

            entity.ToTable("cl_shape");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClShape)
                .HasForeignKey<ClShape>(d => d.Id)
                .HasConstraintName("FK_objects_cl_shape");
        });

        modelBuilder.Entity<ClShapes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_shapes");

            entity.ToTable("cl_shapes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.CategoryLabel)
                .IsUnicode(false)
                .HasColumnName("category_label");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.TypeName)
                .IsUnicode(false)
                .HasColumnName("type_name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClSlide>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_slide");

            entity.ToTable("cl_slide");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClSlide)
                .HasForeignKey<ClSlide>(d => d.Id)
                .HasConstraintName("FK_objects_cl_slide");
        });

        modelBuilder.Entity<ClSlides>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_slides");

            entity.ToTable("cl_slides");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApprovalStatus).HasColumnName("approval_status");
            entity.Property(e => e.ClCourseId).HasColumnName("cl_course_id");
            entity.Property(e => e.ClModuleId).HasColumnName("cl_module_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FlagCompletion).HasColumnName("flag_completion");
            entity.Property(e => e.FlagLocked)
                .IsUnicode(false)
                .HasColumnName("flag_locked");
            entity.Property(e => e.GreedyPersonFullname)
                .IsUnicode(false)
                .HasColumnName("greedy_person_fullname");
            entity.Property(e => e.GreedyPersonId).HasColumnName("greedy_person_id");
            entity.Property(e => e.IsMaster).HasColumnName("is_master");
            entity.Property(e => e.IsSplash).HasColumnName("is_splash");
            entity.Property(e => e.MasterCode)
                .IsUnicode(false)
                .HasColumnName("master_code");
            entity.Property(e => e.MasterId).HasColumnName("master_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Sid).HasColumnName("sid");
            entity.Property(e => e.Stamp).HasColumnName("stamp");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Coding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__coding");

            entity.ToTable("coding");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Coding)
                .HasForeignKey<Coding>(d => d.Id)
                .HasConstraintName("FK_objects_coding");
        });

        modelBuilder.Entity<Codings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__codings");

            entity.ToTable("codings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NextIndex).HasColumnName("next_index");
        });

        modelBuilder.Entity<Collaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborator");

            entity.ToTable("collaborator");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Collaborator)
                .HasForeignKey<Collaborator>(d => d.Id)
                .HasConstraintName("FK_objects_collaborator");
        });

        modelBuilder.Entity<CollaboratorSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborator_schedule");

            entity.ToTable("collaborator_schedule");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CollaboratorSchedule)
                .HasForeignKey<CollaboratorSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_collaborator_schedule");
        });

        modelBuilder.Entity<CollaboratorSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborator_schedules");

            entity.ToTable("collaborator_schedules");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PresenceStateId).HasColumnName("presence_state_id");
            entity.Property(e => e.ScheduleDayId).HasColumnName("schedule_day_id");
        });

        modelBuilder.Entity<Collaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborators");

            entity.ToTable("collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("birth_date");
            entity.Property(e => e.CandidateStatusTypeId).HasColumnName("candidate_status_type_id");
            entity.Property(e => e.CategoryId)
                .HasColumnType("xml")
                .HasColumnName("category_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("current_state");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.DismissDate)
                .HasColumnType("datetime")
                .HasColumnName("dismiss_date");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.Email)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.Fullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.HireDate)
                .HasColumnType("datetime")
                .HasColumnName("hire_date");
            entity.Property(e => e.InRequestBlackList).HasColumnName("in_request_black_list");
            entity.Property(e => e.IsArmAdmin).HasColumnName("is_arm_admin");
            entity.Property(e => e.IsCandidate).HasColumnName("is_candidate");
            entity.Property(e => e.IsContentAdmin).HasColumnName("is_content_admin");
            entity.Property(e => e.IsDismiss).HasColumnName("is_dismiss");
            entity.Property(e => e.IsOutstaff).HasColumnName("is_outstaff");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LevelId).HasColumnName("level_id");
            entity.Property(e => e.Login)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.LowercaseLogin)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("lowercase_login");
            entity.Property(e => e.MobilePhone)
                .IsUnicode(false)
                .HasColumnName("mobile_phone");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("org_name");
            entity.Property(e => e.PersonObjectProfileId)
                .HasColumnType("xml")
                .HasColumnName("person_object_profile_id");
            entity.Property(e => e.Phone)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.PictUrl)
                .IsUnicode(false)
                .HasColumnName("pict_url");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.PositionDate)
                .HasColumnType("datetime")
                .HasColumnName("position_date");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.PositionParentId).HasColumnName("position_parent_id");
            entity.Property(e => e.PositionParentName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_parent_name");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.RoleId)
                .IsUnicode(false)
                .HasColumnName("role_id");
            entity.Property(e => e.Sex)
                .IsUnicode(false)
                .HasColumnName("sex");
            entity.Property(e => e.ShortLogin)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("short_login");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.WebBanned).HasColumnName("web_banned");
        });

        modelBuilder.Entity<CommitteeMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__committee_member");

            entity.ToTable("committee_member");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CommitteeMember)
                .HasForeignKey<CommitteeMember>(d => d.Id)
                .HasConstraintName("FK_objects_committee_member");
        });

        modelBuilder.Entity<CommitteeMembers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__committee_members");

            entity.ToTable("committee_members");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CommitteeMemberType)
                .IsUnicode(false)
                .HasColumnName("committee_member_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonnelCommitteeId).HasColumnName("personnel_committee_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CommonAcademDebtStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.academ_debt_states");

            entity.ToTable("common.academ_debt_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAccessBlockTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.access_block_types");

            entity.ToTable("common.access_block_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Disp).HasColumnName("disp");
            entity.Property(e => e.FirstCatalogUrl)
                .IsUnicode(false)
                .HasColumnName("first_catalog_url");
            entity.Property(e => e.IconUrl)
                .IsUnicode(false)
                .HasColumnName("icon_url");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.LicenseCatalogs)
                .IsUnicode(false)
                .HasColumnName("license_catalogs");
            entity.Property(e => e.ListIndex).HasColumnName("list_index");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NeverSaved).HasColumnName("never_saved");
            entity.Property(e => e.ObjectsAccess)
                .IsUnicode(false)
                .HasColumnName("objects_access");
            entity.Property(e => e.Structure)
                .HasColumnType("xml")
                .HasColumnName("structure");
            entity.Property(e => e.Sys).HasColumnName("sys");
        });

        modelBuilder.Entity<CommonAccessObjectTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.access_object_types");

            entity.ToTable("common.access_object_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAccountStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.account_status_types");

            entity.ToTable("common.account_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAcquaintQuestionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.acquaint_question_types");

            entity.ToTable("common.acquaint_question_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Multiple).HasColumnName("multiple");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAcquaintStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.acquaint_states");

            entity.ToTable("common.acquaint_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonActionReportTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.action_report_types");

            entity.ToTable("common.action_report_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonActionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.action_status_types");

            entity.ToTable("common.action_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonActiveNotificationStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.active_notification_status_types");

            entity.ToTable("common.active_notification_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAggregationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.aggregation_types");

            entity.ToTable("common.aggregation_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAgreementStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.agreement_status_types");

            entity.ToTable("common.agreement_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAllOptionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.all_option_types");

            entity.ToTable("common.all_option_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Caption)
                .IsUnicode(false)
                .HasColumnName("caption");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Title)
                .IsUnicode(false)
                .HasColumnName("title");
        });

        modelBuilder.Entity<CommonAnnalsItemTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.annals_item_types");

            entity.ToTable("common.annals_item_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.DataId)
                .IsUnicode(false)
                .HasColumnName("data_id");
            entity.Property(e => e.ItemId)
                .IsUnicode(false)
                .HasColumnName("item_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAnnalsStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.annals_states");

            entity.ToTable("common.annals_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonApplicationStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.application_states");

            entity.ToTable("common.application_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseParameters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_parameters");

            entity.ToTable("common.assessment_appraise_parameters");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Statuses)
                .HasColumnType("xml")
                .HasColumnName("statuses");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseParticipants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_participants");

            entity.ToTable("common.assessment_appraise_participants");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Usable).HasColumnName("usable");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseRecommendTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_recommend_types");

            entity.ToTable("common.assessment_appraise_recommend_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_statuses");

            entity.ToTable("common.assessment_appraise_statuses");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_types");

            entity.ToTable("common.assessment_appraise_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.General).HasColumnName("general");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentExternalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_external_types");

            entity.ToTable("common.assessment_external_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_stages");

            entity.ToTable("common.assessment_stages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Access)
                .HasColumnType("xml")
                .HasColumnName("access");
            entity.Property(e => e.IsPeriodDependent).HasColumnName("is_period_dependent");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAvailabilityStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.availability_states");

            entity.ToTable("common.availability_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonAzureRoleSizeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.azure_role_size_types");

            entity.ToTable("common.azure_role_size_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBackupFileTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.backup_file_types");

            entity.ToTable("common.backup_file_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBudgetStateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.budget_state_types");

            entity.ToTable("common.budget_state_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveMaterialTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_material_types");

            entity.ToTable("common.career_reserve_material_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_status_types");

            entity.ToTable("common.career_reserve_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveTasksTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_tasks_types");

            entity.ToTable("common.career_reserve_tasks_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveTypeTasksTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_type_tasks_types");

            entity.ToTable("common.career_reserve_type_tasks_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerTransitionDirectionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_transition_direction_types");

            entity.ToTable("common.career_transition_direction_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCharts>(entity =>
        {
            entity.HasKey(e => e.ChartId).HasName("PK__common.charts");

            entity.ToTable("common.charts");

            entity.Property(e => e.ChartId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("chart_id");
            entity.Property(e => e.ChartName)
                .IsUnicode(false)
                .HasColumnName("chart_name");
            entity.Property(e => e.ChartSubtypes)
                .HasColumnType("xml")
                .HasColumnName("chart_subtypes");
            entity.Property(e => e.ChartType)
                .IsUnicode(false)
                .HasColumnName("chart_type");
            entity.Property(e => e.FlagColorDatapoints).HasColumnName("flag_color_datapoints");
            entity.Property(e => e.FlagForeignCaption).HasColumnName("flag_foreign_caption");
            entity.Property(e => e.FlagRightAngleAxes).HasColumnName("flag_right_angle_axes");
            entity.Property(e => e.FlagShowAxis).HasColumnName("flag_show_axis");
            entity.Property(e => e.FlagShowPercent).HasColumnName("flag_show_percent");
            entity.Property(e => e.Icon)
                .IsUnicode(false)
                .HasColumnName("icon");
            entity.Property(e => e.Thickness).HasColumnName("thickness");
            entity.Property(e => e.Xcolor)
                .IsUnicode(false)
                .HasColumnName("xcolor");
            entity.Property(e => e.Xcolor2)
                .IsUnicode(false)
                .HasColumnName("xcolor2");
            entity.Property(e => e.XcolorLine)
                .IsUnicode(false)
                .HasColumnName("xcolor_line");
            entity.Property(e => e.Xoverlap).HasColumnName("xoverlap");
        });

        modelBuilder.Entity<CommonClApprovalStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_approval_states");

            entity.ToTable("common.cl_approval_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonClAuthorTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_author_types");

            entity.ToTable("common.cl_author_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonClStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_states");

            entity.ToTable("common.cl_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCollectStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.collect_states");

            entity.ToTable("common.collect_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCommitteeMemberStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.committee_member_status_types");

            entity.ToTable("common.committee_member_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCommitteeMemberTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.committee_member_types");

            entity.ToTable("common.committee_member_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContactStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contact_status_types");

            entity.ToTable("common.contact_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonContentItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.content_items");

            entity.ToTable("common.content_items");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.AccessBlock)
                .IsUnicode(false)
                .HasColumnName("access_block");
            entity.Property(e => e.HtmlPage)
                .IsUnicode(false)
                .HasColumnName("html_page");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContestStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contest_states");

            entity.ToTable("common.contest_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContestTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contest_types");

            entity.ToTable("common.contest_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContestWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contest_web_templates");

            entity.ToTable("common.contest_web_templates");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCostTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cost_types");

            entity.ToTable("common.cost_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ShortName)
                .IsUnicode(false)
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<CommonCourseExpertTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_expert_types");

            entity.ToTable("common.course_expert_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCourseImportTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_import_types");

            entity.ToTable("common.course_import_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCoursePartTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_part_types");

            entity.ToTable("common.course_part_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IcoUrl)
                .IsUnicode(false)
                .HasColumnName("ico_url");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCourseTestStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_test_states");

            entity.ToTable("common.course_test_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCovenantStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.covenant_status_types");

            entity.ToTable("common.covenant_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCurriculumTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.curriculum_types");

            entity.ToTable("common.curriculum_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCwtTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cwt_types");

            entity.ToTable("common.cwt_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.day_types");

            entity.ToTable("common.day_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDeliveryTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.delivery_types");

            entity.ToTable("common.delivery_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDischargeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.discharge_types");

            entity.ToTable("common.discharge_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IsImport).HasColumnName("is_import");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SourceName)
                .IsUnicode(false)
                .HasColumnName("source_name");
        });

        modelBuilder.Entity<CommonDocumentSentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.document_sent_types");

            entity.ToTable("common.document_sent_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEducTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.educ_types");

            entity.ToTable("common.educ_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEducationLearningStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.education_learning_states");

            entity.ToTable("common.education_learning_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.LongDescriptor)
                .IsUnicode(false)
                .HasColumnName("long_descriptor");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .IsUnicode(false)
                .HasColumnName("short_descriptor");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEducationMethodTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.education_method_types");

            entity.ToTable("common.education_method_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEmploymentKinds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.employment_kinds");

            entity.ToTable("common.employment_kinds");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEmploymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.employment_types");

            entity.ToTable("common.employment_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEncodingTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.encoding_types");

            entity.ToTable("common.encoding_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEstaffEventStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.estaff_event_status_types");

            entity.ToTable("common.estaff_event_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEvalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.eval_types");

            entity.ToTable("common.eval_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEventFileVisibilityTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_file_visibility_types");

            entity.ToTable("common.event_file_visibility_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEventResultStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_result_status_types");

            entity.ToTable("common.event_result_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEventStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_status_types");

            entity.ToTable("common.event_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_types");

            entity.ToTable("common.event_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonExchangeObjectTypes>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.exchange_object_types");

            entity.ToTable("common.exchange_object_types");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.DispName)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.FormType).HasColumnName("form_type");
            entity.Property(e => e.FormUrl)
                .IsUnicode(false)
                .HasColumnName("form_url");
            entity.Property(e => e.FtIndex).HasColumnName("ft_index");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.IsHier).HasColumnName("is_hier");
            entity.Property(e => e.MaxRecordsNum).HasColumnName("max_records_num");
            entity.Property(e => e.Title)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.WebConst)
                .IsUnicode(false)
                .HasColumnName("web_const");
            entity.Property(e => e.WebTemplate)
                .IsUnicode(false)
                .HasColumnName("web_template");
            entity.Property(e => e.WebTitle)
                .IsUnicode(false)
                .HasColumnName("web_title");
        });

        modelBuilder.Entity<CommonExpendedEducTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.expended_educ_types");

            entity.ToTable("common.expended_educ_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonExpertEvalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.expert_eval_types");

            entity.ToTable("common.expert_eval_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonFieldNameTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.field_name_types");

            entity.ToTable("common.field_name_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.field_types");

            entity.ToTable("common.field_types");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonForumIconTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.forum_icon_types");

            entity.ToTable("common.forum_icon_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<CommonForumPersonInfoTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.forum_person_info_types");

            entity.ToTable("common.forum_person_info_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonForumSmileTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.forum_smile_types");

            entity.ToTable("common.forum_smile_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<CommonForumViewTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.forum_view_types");

            entity.ToTable("common.forum_view_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonGoodInstanceStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.good_instance_status_types");

            entity.ToTable("common.good_instance_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonGradingOptionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.grading_option_types");

            entity.ToTable("common.grading_option_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.OptionId)
                .IsUnicode(false)
                .HasColumnName("option_id");
            entity.Property(e => e.QtiTag)
                .IsUnicode(false)
                .HasColumnName("qti_tag");
        });

        modelBuilder.Entity<CommonGraphTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.graph_types");

            entity.ToTable("common.graph_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonIndicatorTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.indicator_types");

            entity.ToTable("common.indicator_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonInteractionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.interaction_types");

            entity.ToTable("common.interaction_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonItemStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.item_status_types");

            entity.ToTable("common.item_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonItemTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.item_types");

            entity.ToTable("common.item_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonJoinModeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.join_mode_types");

            entity.ToTable("common.join_mode_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKeyPositionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.key_position_status_types");

            entity.ToTable("common.key_position_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKeyboardTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.keyboard_types");

            entity.ToTable("common.keyboard_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKnowledgePartsObjects>(entity =>
        {
            entity.HasKey(e => e.KnowledgePartsObjectId).HasName("PK__common.knowledge_parts_objects");

            entity.ToTable("common.knowledge_parts_objects");

            entity.Property(e => e.KnowledgePartsObjectId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts_object_id");
            entity.Property(e => e.FormUrl)
                .IsUnicode(false)
                .HasColumnName("form_url");
            entity.Property(e => e.IsFunctional).HasColumnName("is_functional");
        });

        modelBuilder.Entity<CommonKpiCalcTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.kpi_calc_types");

            entity.ToTable("common.kpi_calc_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKpiTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.kpi_types");

            entity.ToTable("common.kpi_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLanguageLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.language_levels");

            entity.ToTable("common.language_levels");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLanguages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.languages");

            entity.ToTable("common.languages");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningCatalogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_catalogs");

            entity.ToTable("common.learning_catalogs");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningDynamicsCategoryTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_dynamics_category_types");

            entity.ToTable("common.learning_dynamics_category_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningRecordStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_record_statuss");

            entity.ToTable("common.learning_record_statuss");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_states");

            entity.ToTable("common.learning_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.LongDescriptor)
                .IsUnicode(false)
                .HasColumnName("long_descriptor");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .IsUnicode(false)
                .HasColumnName("short_descriptor");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonLearningStatisticsCategoryTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_statistics_category_types");

            entity.ToTable("common.learning_statistics_category_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CommonLearningTaskStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_task_status_types");

            entity.ToTable("common.learning_task_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLectorTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.lector_types");

            entity.ToTable("common.lector_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLessonStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.lesson_states");

            entity.ToTable("common.lesson_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLibrarySectionWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.library_section_web_templates");

            entity.ToTable("common.library_section_web_templates");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLinkingViews>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.linking_views");

            entity.ToTable("common.linking_views");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.DispName)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.Title)
                .IsUnicode(false)
                .HasColumnName("title");
        });

        modelBuilder.Entity<CommonMaterialFormatTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.material_format_types");

            entity.ToTable("common.material_format_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonMonths>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.months");

            entity.ToTable("common.months");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonNodeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.node_types");

            entity.ToTable("common.node_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonObjectResourceStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.object_resource_states");

            entity.ToTable("common.object_resource_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonObjectflowConditionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objectflow_condition_types");

            entity.ToTable("common.objectflow_condition_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IsPrimary).HasColumnName("is_primary");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonObjectflowOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objectflow_operation_types");

            entity.ToTable("common.objectflow_operation_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonObjectiveStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objective_status_types");

            entity.ToTable("common.objective_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .IsUnicode(false)
                .HasColumnName("short_descriptor");
        });

        modelBuilder.Entity<CommonObjectiveSuccessStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objective_success_status_types");

            entity.ToTable("common.objective_success_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .IsUnicode(false)
                .HasColumnName("short_descriptor");
        });

        modelBuilder.Entity<CommonOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.operation_types");

            entity.ToTable("common.operation_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OperationCatalog)
                .IsUnicode(false)
                .HasColumnName("operation_catalog");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CommonOracleDbTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.oracle_db_types");

            entity.ToTable("common.oracle_db_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOrderStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.order_status_types");

            entity.ToTable("common.order_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOrderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.order_types");

            entity.ToTable("common.order_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOutTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.out_types");

            entity.ToTable("common.out_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOutstaffContractTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.outstaff_contract_types");

            entity.ToTable("common.outstaff_contract_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOutstaffOrderExecutionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.outstaff_order_execution_status_types");

            entity.ToTable("common.outstaff_order_execution_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPackageStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.package_status_types");

            entity.ToTable("common.package_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPackageTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.package_types");

            entity.ToTable("common.package_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonParticipantStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.participant_states");

            entity.ToTable("common.participant_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPassportTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.passport_types");

            entity.ToTable("common.passport_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPaymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.payment_types");

            entity.ToTable("common.payment_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IsCanReceived).HasColumnName("is_can_received");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPeriodCalcTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.period_calc_types");

            entity.ToTable("common.period_calc_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPeriodicityTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.periodicity_types");

            entity.ToTable("common.periodicity_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPerioditys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.perioditys");

            entity.ToTable("common.perioditys");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<CommonPersonnelCommitteeStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_committee_status_types");

            entity.ToTable("common.personnel_committee_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonPersonnelReserveStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_reserve_status_types");

            entity.ToTable("common.personnel_reserve_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPersonnelReserveTaskStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_reserve_task_status_types");

            entity.ToTable("common.personnel_reserve_task_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerDisplayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_display_types");

            entity.ToTable("common.player_display_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerLanguages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_languages");

            entity.ToTable("common.player_languages");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_positions");

            entity.ToTable("common.player_positions");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerRubricDisplayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_rubric_display_types");

            entity.ToTable("common.player_rubric_display_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerSendTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_send_types");

            entity.ToTable("common.player_send_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_types");

            entity.ToTable("common.player_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ArchiveName)
                .IsUnicode(false)
                .HasColumnName("archive_name");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPollItemTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.poll_item_types");

            entity.ToTable("common.poll_item_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPollTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.poll_types");

            entity.ToTable("common.poll_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IsTable).HasColumnName("is_table");
            entity.Property(e => e.Multiple).HasColumnName("multiple");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPortalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.portal_types");

            entity.ToTable("common.portal_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPositionAssignmentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.position_assignment_types");

            entity.ToTable("common.position_assignment_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPositionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.position_types");

            entity.ToTable("common.position_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ModName)
                .IsUnicode(false)
                .HasColumnName("mod_name");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPossibleStorages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.possible_storages");

            entity.ToTable("common.possible_storages");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPrintFormTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.print_form_types");

            entity.ToTable("common.print_form_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.ContentType)
                .IsUnicode(false)
                .HasColumnName("content_type");
            entity.Property(e => e.Extension)
                .IsUnicode(false)
                .HasColumnName("extension");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProctoringObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.proctoring_objects");

            entity.ToTable("common.proctoring_objects");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProfessionalAreas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.professional_areas");

            entity.ToTable("common.professional_areas");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProgDisciplStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.prog_discipl_states");

            entity.ToTable("common.prog_discipl_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProjectStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.project_status_types");

            entity.ToTable("common.project_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonQualificationAssignmentStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qualification_assignment_states");

            entity.ToTable("common.qualification_assignment_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQualificationStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qualification_statuss");

            entity.ToTable("common.qualification_statuss");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRecipientTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.recipient_types");

            entity.ToTable("common.recipient_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.FuncMan).HasColumnName("func_man");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRecruitmentPlanStateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.recruitment_plan_state_types");

            entity.ToTable("common.recruitment_plan_state_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRegistrTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.registr_types");

            entity.ToTable("common.registr_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRequestStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.request_status_types");

            entity.ToTable("common.request_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonResourceTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.resource_types");

            entity.ToTable("common.resource_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Ext)
                .IsUnicode(false)
                .HasColumnName("ext");
            entity.Property(e => e.IsMedia).HasColumnName("is_media");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSentenceOptionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.sentence_option_types");

            entity.ToTable("common.sentence_option_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonServerAgentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.server_agent_types");

            entity.ToTable("common.server_agent_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonServerRunModes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.server_run_modes");

            entity.ToTable("common.server_run_modes");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonServerSettings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.server_settings");

            entity.ToTable("common.server_settings");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.DefaultValue)
                .IsUnicode(false)
                .HasColumnName("default_value");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PassiveInModes)
                .IsUnicode(false)
                .HasColumnName("passive_in_modes");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserName)
                .IsUnicode(false)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<CommonServiceProviderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.service_provider_types");

            entity.ToTable("common.service_provider_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.WithDate).HasColumnName("with_date");
        });

        modelBuilder.Entity<CommonSocialAvatarPriorityTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.social_avatar_priority_types");

            entity.ToTable("common.social_avatar_priority_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSpxmlTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.spxml_types");

            entity.ToTable("common.spxml_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStatusInKnowledgeMapTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.status_in_knowledge_map_types");

            entity.ToTable("common.status_in_knowledge_map_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudDocTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_doc_types");

            entity.ToTable("common.stud_doc_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudGroupStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_group_states");

            entity.ToTable("common.stud_group_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_types");

            entity.ToTable("common.stud_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudWorkStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_work_states");

            entity.ToTable("common.stud_work_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudentStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.student_states");

            entity.ToTable("common.student_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSubmissionStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.submission_states");

            entity.ToTable("common.submission_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSubstitutionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.substitution_status_types");

            entity.ToTable("common.substitution_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSuccessorStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.successor_status_types");

            entity.ToTable("common.successor_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSupplementaryQuestionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.supplementary_question_types");

            entity.ToTable("common.supplementary_question_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSystemEventOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.system_event_operation_types");

            entity.ToTable("common.system_event_operation_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTemplateCacheTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.template_cache_types");

            entity.ToTable("common.template_cache_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTemplateFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.template_field_types");

            entity.ToTable("common.template_field_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.FieldType)
                .IsUnicode(false)
                .HasColumnName("field_type");
            entity.Property(e => e.Icon)
                .IsUnicode(false)
                .HasColumnName("icon");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTenancyLimitTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.tenancy_limit_types");

            entity.ToTable("common.tenancy_limit_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTestProjectTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.test_project_types");

            entity.ToTable("common.test_project_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTimezones>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.timezones");

            entity.ToTable("common.timezones");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Tm).HasColumnName("tm");
        });

        modelBuilder.Entity<CommonTraningOrderStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.traning_order_states");

            entity.ToTable("common.traning_order_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTriggerTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.trigger_types");

            entity.ToTable("common.trigger_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTutorStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.tutor_status_types");

            entity.ToTable("common.tutor_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTypeMarks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.type_marks");

            entity.ToTable("common.type_marks");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonUploadTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.upload_types");

            entity.ToTable("common.upload_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonVacancyResponseStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.vacancy_response_status_types");

            entity.ToTable("common.vacancy_response_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonVendorStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.vendor_status_types");

            entity.ToTable("common.vendor_status_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonViewingStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.viewing_states");

            entity.ToTable("common.viewing_states");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .IsUnicode(false)
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .IsUnicode(false)
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonWebFilterTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.web_filter_types");

            entity.ToTable("common.web_filter_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWebTemplateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.web_template_types");

            entity.ToTable("common.web_template_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Mode)
                .IsUnicode(false)
                .HasColumnName("mode");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.Wvars)
                .HasColumnType("xml")
                .HasColumnName("wvars");
            entity.Property(e => e.WvarsSelector)
                .IsUnicode(false)
                .HasColumnName("wvars_selector");
        });

        modelBuilder.Entity<CommonWeekDayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.week_day_types");

            entity.ToTable("common.week_day_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ShortName)
                .IsUnicode(false)
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<CommonWeekDays>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.week_days");

            entity.ToTable("common.week_days");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWikiCommunicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.wiki_communication_types");

            entity.ToTable("common.wiki_communication_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWorkTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.work_types");

            entity.ToTable("common.work_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWorkflowOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.workflow_operation_types");

            entity.ToTable("common.workflow_operation_types");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonXamlInterpreters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.xaml_interpreters");

            entity.ToTable("common.xaml_interpreters");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<Competence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence");

            entity.ToTable("competence");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Competence)
                .HasForeignKey<Competence>(d => d.Id)
                .HasConstraintName("FK_objects_competence");
        });

        modelBuilder.Entity<CompetenceBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_block");

            entity.ToTable("competence_block");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompetenceBlock)
                .HasForeignKey<CompetenceBlock>(d => d.Id)
                .HasConstraintName("FK_objects_competence_block");
        });

        modelBuilder.Entity<CompetenceBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_blocks");

            entity.ToTable("competence_blocks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CompetenceProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profile");

            entity.ToTable("competence_profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompetenceProfile)
                .HasForeignKey<CompetenceProfile>(d => d.Id)
                .HasConstraintName("FK_objects_competence_profile");
        });

        modelBuilder.Entity<CompetenceProfileFamily>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profile_family");

            entity.ToTable("competence_profile_family");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompetenceProfileFamily)
                .HasForeignKey<CompetenceProfileFamily>(d => d.Id)
                .HasConstraintName("FK_objects_competence_profile_family");
        });

        modelBuilder.Entity<CompetenceProfileFamilys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profile_familys");

            entity.ToTable("competence_profile_familys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfiles)
                .IsUnicode(false)
                .HasColumnName("competence_profiles");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CompetenceProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profiles");

            entity.ToTable("competence_profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Competences>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competences");

            entity.ToTable("competences");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceBlockId).HasColumnName("competence_block_id");
            entity.Property(e => e.Exercises)
                .IsUnicode(false)
                .HasColumnName("exercises");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ComponentPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__component_package");

            entity.ToTable("component_package");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ComponentPackage)
                .HasForeignKey<ComponentPackage>(d => d.Id)
                .HasConstraintName("FK_objects_component_package");
        });

        modelBuilder.Entity<ComponentPackages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__component_packages");

            entity.ToTable("component_packages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ComponentModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("component_modification_date");
            entity.Property(e => e.DownloadDate)
                .HasColumnType("datetime")
                .HasColumnName("download_date");
            entity.Property(e => e.DownloadPackageFileId).HasColumnName("download_package_file_id");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<CompoundProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__compound_program");

            entity.ToTable("compound_program");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompoundProgram)
                .HasForeignKey<CompoundProgram>(d => d.Id)
                .HasConstraintName("FK_objects_compound_program");
        });

        modelBuilder.Entity<CompoundProgramEducationMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__compound_program_education_methods");

            entity.ToTable("compound_program_education_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .IsUnicode(false)
                .HasColumnName("cost_type");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationMethodName)
                .IsUnicode(false)
                .HasColumnName("education_method_name");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectCode)
                .IsUnicode(false)
                .HasColumnName("object_code");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.ParentProgpamId).HasColumnName("parent_progpam_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<CompoundPrograms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__compound_programs");

            entity.ToTable("compound_programs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Connection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__connection");

            entity.ToTable("connection");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Connection)
                .HasForeignKey<Connection>(d => d.Id)
                .HasConstraintName("FK_objects_connection");
        });

        modelBuilder.Entity<Connections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__connections");

            entity.ToTable("connections");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.DeleteDate)
                .HasColumnType("datetime")
                .HasColumnName("delete_date");
            entity.Property(e => e.HostPath)
                .IsUnicode(false)
                .HasColumnName("host_path");
            entity.Property(e => e.LearningXml)
                .IsUnicode(false)
                .HasColumnName("learning_xml");
            entity.Property(e => e.PartCode)
                .IsUnicode(false)
                .HasColumnName("part_code");
            entity.Property(e => e.State)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.Unauthorized).HasColumnName("unauthorized");
            entity.Property(e => e.UserFullname)
                .IsUnicode(false)
                .HasColumnName("user_fullname");
            entity.Property(e => e.UserId)
                .IsUnicode(false)
                .HasColumnName("user_id");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact");

            entity.ToTable("contact");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Contact)
                .HasForeignKey<Contact>(d => d.Id)
                .HasConstraintName("FK_objects_contact");
        });

        modelBuilder.Entity<ContactResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_result");

            entity.ToTable("contact_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContactResult)
                .HasForeignKey<ContactResult>(d => d.Id)
                .HasConstraintName("FK_objects_contact_result");
        });

        modelBuilder.Entity<ContactResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_results");

            entity.ToTable("contact_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ContactType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_type");

            entity.ToTable("contact_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContactType)
                .HasForeignKey<ContactType>(d => d.Id)
                .HasConstraintName("FK_objects_contact_type");
        });

        modelBuilder.Entity<ContactTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_types");

            entity.ToTable("contact_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Contacts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contacts");

            entity.ToTable("contacts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContactDate)
                .HasColumnType("datetime")
                .HasColumnName("contact_date");
            entity.Property(e => e.ContactOrgId).HasColumnName("contact_org_id");
            entity.Property(e => e.ContactOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("contact_org_name");
            entity.Property(e => e.ContactPersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("contact_person_fullname");
            entity.Property(e => e.ContactPersonId).HasColumnName("contact_person_id");
            entity.Property(e => e.ContactPositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("contact_position_name");
            entity.Property(e => e.InitiatorPersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("initiator_person_fullname");
            entity.Property(e => e.InitiatorPersonId).HasColumnName("initiator_person_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PreviousContactId).HasColumnName("previous_contact_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Contest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contest");

            entity.ToTable("contest");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Contest)
                .HasForeignKey<Contest>(d => d.Id)
                .HasConstraintName("FK_objects_contest");
        });

        modelBuilder.Entity<ContestMarks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contest_marks");

            entity.ToTable("contest_marks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContestId).HasColumnName("contest_id");
            entity.Property(e => e.ContestName)
                .IsUnicode(false)
                .HasColumnName("contest_name");
            entity.Property(e => e.GeneralMark)
                .IsUnicode(false)
                .HasColumnName("general_mark");
            entity.Property(e => e.JudgeId).HasColumnName("judge_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ParticipantId).HasColumnName("participant_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.Value)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<Contests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contests");

            entity.ToTable("contests");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EstimationId)
                .IsUnicode(false)
                .HasColumnName("estimation_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract");

            entity.ToTable("contract");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Contract)
                .HasForeignKey<Contract>(d => d.Id)
                .HasConstraintName("FK_objects_contract");
        });

        modelBuilder.Entity<ContractType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract_type");

            entity.ToTable("contract_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContractType)
                .HasForeignKey<ContractType>(d => d.Id)
                .HasConstraintName("FK_objects_contract_type");
        });

        modelBuilder.Entity<ContractTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract_types");

            entity.ToTable("contract_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrentNumber)
                .IsUnicode(false)
                .HasColumnName("current_number");
            entity.Property(e => e.DefaultFlag).HasColumnName("default_flag");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Prefix)
                .IsUnicode(false)
                .HasColumnName("prefix");
            entity.Property(e => e.Suffix)
                .IsUnicode(false)
                .HasColumnName("suffix");
        });

        modelBuilder.Entity<Contracts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contracts");

            entity.ToTable("contracts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.FilesCount).HasColumnName("files_count");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CostCenter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cost_center");

            entity.ToTable("cost_center");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CostCenter)
                .HasForeignKey<CostCenter>(d => d.Id)
                .HasConstraintName("FK_objects_cost_center");
        });

        modelBuilder.Entity<CostCenters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cost_centers");

            entity.ToTable("cost_centers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course");

            entity.ToTable("course");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Course)
                .HasForeignKey<Course>(d => d.Id)
                .HasConstraintName("FK_objects_course");
        });

        modelBuilder.Entity<CourseCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_collaborators");

            entity.ToTable("course_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CourseModule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_module");

            entity.ToTable("course_module");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CourseModule)
                .HasForeignKey<CourseModule>(d => d.Id)
                .HasConstraintName("FK_objects_course_module");
        });

        modelBuilder.Entity<CourseModules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_modules");

            entity.ToTable("course_modules");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.ActivationCount).HasColumnName("activation_count");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.Eid)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("eid");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LaunchCount).HasColumnName("launch_count");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CourseParts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_parts");

            entity.ToTable("course_parts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseModuleId).HasColumnName("course_module_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ParentPartCode)
                .IsUnicode(false)
                .HasColumnName("parent_part_code");
            entity.Property(e => e.PartCode)
                .IsUnicode(false)
                .HasColumnName("part_code");
            entity.Property(e => e.PartName)
                .IsUnicode(false)
                .HasColumnName("part_name");
            entity.Property(e => e.PartType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("part_type");
        });

        modelBuilder.Entity<Courses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__courses");

            entity.ToTable("courses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BaseUrl)
                .IsUnicode(false)
                .HasColumnName("base_url");
            entity.Property(e => e.ClCourseId).HasColumnName("cl_course_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.PwtDisp).HasColumnName("pwt_disp");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.YourselfStart).HasColumnName("yourself_start");
        });

        modelBuilder.Entity<Covenant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__covenant");

            entity.ToTable("covenant");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Covenant)
                .HasForeignKey<Covenant>(d => d.Id)
                .HasConstraintName("FK_objects_covenant");
        });

        modelBuilder.Entity<Covenants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__covenants");

            entity.ToTable("covenants");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CloseDate)
                .HasColumnType("datetime")
                .HasColumnName("close_date");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PeriodWork).HasColumnName("period_work");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ProcDeduct).HasColumnName("proc_deduct");
            entity.Property(e => e.ProcPayBank).HasColumnName("proc_pay_bank");
            entity.Property(e => e.ProcPayCollab).HasColumnName("proc_pay_collab");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CustomAdminTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_admin_template");

            entity.ToTable("custom_admin_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomAdminTemplate)
                .HasForeignKey<CustomAdminTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_custom_admin_template");
        });

        modelBuilder.Entity<CustomAdminTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_admin_templates");

            entity.ToTable("custom_admin_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FormName)
                .IsUnicode(false)
                .HasColumnName("form_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<CustomChatbotTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_chatbot_template");

            entity.ToTable("custom_chatbot_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomChatbotTemplate)
                .HasForeignKey<CustomChatbotTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_custom_chatbot_template");
        });

        modelBuilder.Entity<CustomChatbotTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_chatbot_templates");

            entity.ToTable("custom_chatbot_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<CustomReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_report");

            entity.ToTable("custom_report");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomReport)
                .HasForeignKey<CustomReport>(d => d.Id)
                .HasConstraintName("FK_objects_custom_report");
        });

        modelBuilder.Entity<CustomReports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_reports");

            entity.ToTable("custom_reports");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .IsUnicode(false)
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Block)
                .IsUnicode(false)
                .HasColumnName("block");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Connect2Object)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("connect_2_object");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.Subscription).HasColumnName("subscription");
        });

        modelBuilder.Entity<CustomWebTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_template");

            entity.ToTable("custom_web_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomWebTemplate)
                .HasForeignKey<CustomWebTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_custom_web_template");
        });

        modelBuilder.Entity<CustomWebTemplateGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_template_group");

            entity.ToTable("custom_web_template_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomWebTemplateGroup)
                .HasForeignKey<CustomWebTemplateGroup>(d => d.Id)
                .HasConstraintName("FK_objects_custom_web_template_group");
        });

        modelBuilder.Entity<CustomWebTemplateGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_template_groups");

            entity.ToTable("custom_web_template_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<CustomWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_templates");

            entity.ToTable("custom_web_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.CwtType)
                .IsUnicode(false)
                .HasColumnName("cwt_type");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.Mode)
                .IsUnicode(false)
                .HasColumnName("mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.OutType)
                .IsUnicode(false)
                .HasColumnName("out_type");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Template)
                .IsUnicode(false)
                .HasColumnName("template");
        });

        modelBuilder.Entity<DevelopmentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_method");

            entity.ToTable("development_method");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DevelopmentMethod)
                .HasForeignKey<DevelopmentMethod>(d => d.Id)
                .HasConstraintName("FK_objects_development_method");
        });

        modelBuilder.Entity<DevelopmentMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_methods");

            entity.ToTable("development_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DevelopmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_plan");

            entity.ToTable("development_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DevelopmentPlan)
                .HasForeignKey<DevelopmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_development_plan");
        });

        modelBuilder.Entity<DevelopmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_plans");

            entity.ToTable("development_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AppraiseDate)
                .HasColumnType("datetime")
                .HasColumnName("appraise_date");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentAppraiseType)
                .IsUnicode(false)
                .HasColumnName("assessment_appraise_type");
            entity.Property(e => e.AssessmentPlanId).HasColumnName("assessment_plan_id");
            entity.Property(e => e.CareerReserveId).HasColumnName("career_reserve_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CustomExperts)
                .IsUnicode(false)
                .HasColumnName("custom_experts");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .IsUnicode(false)
                .HasColumnName("department_name");
            entity.Property(e => e.ExpertPersonFullname)
                .IsUnicode(false)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .IsUnicode(false)
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.FlagAppraiseDepartment).HasColumnName("flag_appraise_department");
            entity.Property(e => e.FlagIsProcessed).HasColumnName("flag_is_processed");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsFinal).HasColumnName("is_final");
            entity.Property(e => e.IsReady).HasColumnName("is_ready");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DevelopmentPotential>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_potential");

            entity.ToTable("development_potential");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DevelopmentPotential)
                .HasForeignKey<DevelopmentPotential>(d => d.Id)
                .HasConstraintName("FK_objects_development_potential");
        });

        modelBuilder.Entity<DevelopmentPotentials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_potentials");

            entity.ToTable("development_potentials");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DeviceReg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__device_reg");

            entity.ToTable("device_reg");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DeviceReg)
                .HasForeignKey<DeviceReg>(d => d.Id)
                .HasConstraintName("FK_objects_device_reg");
        });

        modelBuilder.Entity<DeviceRegs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__device_regs");

            entity.ToTable("device_regs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DeviceId)
                .IsUnicode(false)
                .HasColumnName("device_id");
            entity.Property(e => e.LastAccessDate)
                .HasColumnType("datetime")
                .HasColumnName("last_access_date");
            entity.Property(e => e.MobileAppConfigId).HasColumnName("mobile_app_config_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DigitalSignature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__digital_signature");

            entity.ToTable("digital_signature");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DigitalSignature)
                .HasForeignKey<DigitalSignature>(d => d.Id)
                .HasConstraintName("FK_objects_digital_signature");
        });

        modelBuilder.Entity<DigitalSignatures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__digital_signatures");

            entity.ToTable("digital_signatures");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.IsSigned).HasColumnName("is_signed");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.SignDate)
                .HasColumnType("datetime")
                .HasColumnName("sign_date");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Dimension>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dimension");

            entity.ToTable("dimension");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Dimension)
                .HasForeignKey<Dimension>(d => d.Id)
                .HasConstraintName("FK_objects_dimension");
        });

        modelBuilder.Entity<Dimensions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dimensions");

            entity.ToTable("dimensions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Discharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__discharge");

            entity.ToTable("discharge");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Discharge)
                .HasForeignKey<Discharge>(d => d.Id)
                .HasConstraintName("FK_objects_discharge");
        });

        modelBuilder.Entity<Discharges>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__discharges");

            entity.ToTable("discharges");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<DnAcademDebt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_debt");

            entity.ToTable("dn_academ_debt");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnAcademDebt)
                .HasForeignKey<DnAcademDebt>(d => d.Id)
                .HasConstraintName("FK_objects_dn_academ_debt");
        });

        modelBuilder.Entity<DnAcademDebts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_debts");

            entity.ToTable("dn_academ_debts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContrFormId).HasColumnName("contr_form_id");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LatestDate)
                .HasColumnType("datetime")
                .HasColumnName("latest_date");
            entity.Property(e => e.LiquidDate)
                .HasColumnType("datetime")
                .HasColumnName("liquid_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.StudGroupId).HasColumnName("stud_group_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnAcademYear>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_year");

            entity.ToTable("dn_academ_year");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnAcademYear)
                .HasForeignKey<DnAcademYear>(d => d.Id)
                .HasConstraintName("FK_objects_dn_academ_year");
        });

        modelBuilder.Entity<DnAcademYears>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_years");

            entity.ToTable("dn_academ_years");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AmountWeekAutumnalTerm).HasColumnName("amount_week_autumnal_term");
            entity.Property(e => e.AmountWeekSpringTerm).HasColumnName("amount_week_spring_term");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EndYear)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("end_year");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StartYear)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("start_year");
            entity.Property(e => e.StrYears)
                .IsUnicode(false)
                .HasColumnName("str_years");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnAuditorium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_auditorium");

            entity.ToTable("dn_auditorium");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnAuditorium)
                .HasForeignKey<DnAuditorium>(d => d.Id)
                .HasConstraintName("FK_objects_dn_auditorium");
        });

        modelBuilder.Entity<DnAuditoriums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_auditoriums");

            entity.ToTable("dn_auditoriums");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NumberPlaces)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("number_places");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnBlockDiscipline>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_block_discipline");

            entity.ToTable("dn_block_discipline");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnBlockDiscipline)
                .HasForeignKey<DnBlockDiscipline>(d => d.Id)
                .HasConstraintName("FK_objects_dn_block_discipline");
        });

        modelBuilder.Entity<DnBlockDisciplines>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_block_disciplines");

            entity.ToTable("dn_block_disciplines");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnControlEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_event");

            entity.ToTable("dn_control_event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnControlEvent)
                .HasForeignKey<DnControlEvent>(d => d.Id)
                .HasConstraintName("FK_objects_dn_control_event");
        });

        modelBuilder.Entity<DnControlEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_events");

            entity.ToTable("dn_control_events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ControlFormId).HasColumnName("control_form_id");
            entity.Property(e => e.DateEvent)
                .HasColumnType("datetime")
                .HasColumnName("date_event");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.LessonId).HasColumnName("lesson_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.StudGroupId).HasColumnName("stud_group_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnControlForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_form");

            entity.ToTable("dn_control_form");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnControlForm)
                .HasForeignKey<DnControlForm>(d => d.Id)
                .HasConstraintName("FK_objects_dn_control_form");
        });

        modelBuilder.Entity<DnControlForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_forms");

            entity.ToTable("dn_control_forms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnDisciplBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_discipl_blocks");

            entity.ToTable("dn_discipl_blocks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BlockId).HasColumnName("block_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<DnDiscipline>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_discipline");

            entity.ToTable("dn_discipline");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnDiscipline)
                .HasForeignKey<DnDiscipline>(d => d.Id)
                .HasConstraintName("FK_objects_dn_discipline");
        });

        modelBuilder.Entity<DnDisciplines>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_disciplines");

            entity.ToTable("dn_disciplines");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DisciplBlockId).HasColumnName("discipl_block_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnEduCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_edu_condition");

            entity.ToTable("dn_edu_condition");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnEduCondition)
                .HasForeignKey<DnEduCondition>(d => d.Id)
                .HasConstraintName("FK_objects_dn_edu_condition");
        });

        modelBuilder.Entity<DnEduConditions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_edu_conditions");

            entity.ToTable("dn_edu_conditions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnEducatEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_event");

            entity.ToTable("dn_educat_event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnEducatEvent)
                .HasForeignKey<DnEducatEvent>(d => d.Id)
                .HasConstraintName("FK_objects_dn_educat_event");
        });

        modelBuilder.Entity<DnEducatEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_events");

            entity.ToTable("dn_educat_events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnEducatForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_form");

            entity.ToTable("dn_educat_form");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnEducatForm)
                .HasForeignKey<DnEducatForm>(d => d.Id)
                .HasConstraintName("FK_objects_dn_educat_form");
        });

        modelBuilder.Entity<DnEducatForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_forms");

            entity.ToTable("dn_educat_forms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnGroupStudents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_group_students");

            entity.ToTable("dn_group_students");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("birth_date");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Firstname)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Lastname)
                .IsUnicode(false)
                .HasColumnName("lastname");
            entity.Property(e => e.Login)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.MainGroupId).HasColumnName("main_group_id");
            entity.Property(e => e.Middlename)
                .IsUnicode(false)
                .HasColumnName("middlename");
            entity.Property(e => e.MobilePhone)
                .IsUnicode(false)
                .HasColumnName("mobile_phone");
            entity.Property(e => e.Password)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Phone)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Sex)
                .IsUnicode(false)
                .HasColumnName("sex");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.SystemEmail)
                .IsUnicode(false)
                .HasColumnName("system_email");
        });

        modelBuilder.Entity<DnIndEducatPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_ind_educat_plan");

            entity.ToTable("dn_ind_educat_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnIndEducatPlan)
                .HasForeignKey<DnIndEducatPlan>(d => d.Id)
                .HasConstraintName("FK_objects_dn_ind_educat_plan");
        });

        modelBuilder.Entity<DnIndEducatPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_ind_educat_plans");

            entity.ToTable("dn_ind_educat_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ControlFormId).HasColumnName("control_form_id");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.IsCourseWork)
                .IsUnicode(false)
                .HasColumnName("is_course_work");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProgDisciplId).HasColumnName("prog_discipl_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.ThemeCourseWork)
                .IsUnicode(false)
                .HasColumnName("theme_course_work");
        });

        modelBuilder.Entity<DnLesson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_lesson");

            entity.ToTable("dn_lesson");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnLesson)
                .HasForeignKey<DnLesson>(d => d.Id)
                .HasConstraintName("FK_objects_dn_lesson");
        });

        modelBuilder.Entity<DnLessons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_lessons");

            entity.ToTable("dn_lessons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuditoriumId).HasColumnName("auditorium_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.EducatEventFormId).HasColumnName("educat_event_form_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.LessonDate)
                .HasColumnType("datetime")
                .HasColumnName("lesson_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnProgDiscAppend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_prog_disc_append");

            entity.ToTable("dn_prog_disc_append");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnProgDiscAppend)
                .HasForeignKey<DnProgDiscAppend>(d => d.Id)
                .HasConstraintName("FK_objects_dn_prog_disc_append");
        });

        modelBuilder.Entity<DnProgDiscAppends>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_prog_disc_appends");

            entity.ToTable("dn_prog_disc_appends");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EducatFormId)
                .IsUnicode(false)
                .HasColumnName("educat_form_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ProgramDisciplineId).HasColumnName("program_discipline_id");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnProgramDiscipl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_program_discipl");

            entity.ToTable("dn_program_discipl");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnProgramDiscipl)
                .HasForeignKey<DnProgramDiscipl>(d => d.Id)
                .HasConstraintName("FK_objects_dn_program_discipl");
        });

        modelBuilder.Entity<DnProgramDiscipls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_program_discipls");

            entity.ToTable("dn_program_discipls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AllLaboriousnAudit).HasColumnName("all_laboriousn_audit");
            entity.Property(e => e.AllLaboriousnIndep).HasColumnName("all_laboriousn_indep");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ControlForm).HasColumnName("control_form");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.EducatFormId).HasColumnName("educat_form_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnRegister>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_register");

            entity.ToTable("dn_register");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnRegister)
                .HasForeignKey<DnRegister>(d => d.Id)
                .HasConstraintName("FK_objects_dn_register");
        });

        modelBuilder.Entity<DnRegisterStudents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_register_students");

            entity.ToTable("dn_register_students");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContrFormId).HasColumnName("contr_form_id");
            entity.Property(e => e.DateEvent)
                .HasColumnType("datetime")
                .HasColumnName("date_event");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.RegisterId).HasColumnName("register_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
        });

        modelBuilder.Entity<DnRegisters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_registers");

            entity.ToTable("dn_registers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContrFormId).HasColumnName("contr_form_id");
            entity.Property(e => e.ControlEventId).HasColumnName("control_event_id");
            entity.Property(e => e.DateEvent)
                .HasColumnType("datetime")
                .HasColumnName("date_event");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_schedule");

            entity.ToTable("dn_schedule");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSchedule)
                .HasForeignKey<DnSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_dn_schedule");
        });

        modelBuilder.Entity<DnSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_schedules");

            entity.ToTable("dn_schedules");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Chair).HasColumnName("chair");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Faculty).HasColumnName("faculty");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.TermId).HasColumnName("term_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnSpecial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_special");

            entity.ToTable("dn_special");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSpecial)
                .HasForeignKey<DnSpecial>(d => d.Id)
                .HasConstraintName("FK_objects_dn_special");
        });

        modelBuilder.Entity<DnSpecialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_specialization");

            entity.ToTable("dn_specialization");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSpecialization)
                .HasForeignKey<DnSpecialization>(d => d.Id)
                .HasConstraintName("FK_objects_dn_specialization");
        });

        modelBuilder.Entity<DnSpecializations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_specializations");

            entity.ToTable("dn_specializations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SpecialityId).HasColumnName("speciality_id");
        });

        modelBuilder.Entity<DnSpecials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_specials");

            entity.ToTable("dn_specials");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FacultId).HasColumnName("facult_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<DnStream>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stream");

            entity.ToTable("dn_stream");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStream)
                .HasForeignKey<DnStream>(d => d.Id)
                .HasConstraintName("FK_objects_dn_stream");
        });

        modelBuilder.Entity<DnStreams>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_streams");

            entity.ToTable("dn_streams");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnStudCentrtestResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_centrtest_result");

            entity.ToTable("dn_stud_centrtest_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStudCentrtestResult)
                .HasForeignKey<DnStudCentrtestResult>(d => d.Id)
                .HasConstraintName("FK_objects_dn_stud_centrtest_result");
        });

        modelBuilder.Entity<DnStudCentrtestResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_centrtest_results");

            entity.ToTable("dn_stud_centrtest_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ResultDate)
                .HasColumnType("datetime")
                .HasColumnName("result_date");
            entity.Property(e => e.StudentFullname)
                .IsUnicode(false)
                .HasColumnName("student_fullname");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.Subject)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnStudGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_group");

            entity.ToTable("dn_stud_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStudGroup)
                .HasForeignKey<DnStudGroup>(d => d.Id)
                .HasConstraintName("FK_objects_dn_stud_group");
        });

        modelBuilder.Entity<DnStudGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_groups");

            entity.ToTable("dn_stud_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Faculty).HasColumnName("faculty");
            entity.Property(e => e.GroupSize).HasColumnName("group_size");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnStudent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_student");

            entity.ToTable("dn_student");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStudent)
                .HasForeignKey<DnStudent>(d => d.Id)
                .HasConstraintName("FK_objects_dn_student");
        });

        modelBuilder.Entity<DnStudents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_students");

            entity.ToTable("dn_students");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdressFactLive)
                .IsUnicode(false)
                .HasColumnName("adress_fact_live");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EduConditionId)
                .IsUnicode(false)
                .HasColumnName("edu_condition_id");
            entity.Property(e => e.EducatFormId)
                .IsUnicode(false)
                .HasColumnName("educat_form_id");
            entity.Property(e => e.EducatGroups)
                .IsUnicode(false)
                .HasColumnName("educat_groups");
            entity.Property(e => e.EducatInstitution)
                .IsUnicode(false)
                .HasColumnName("educat_institution");
            entity.Property(e => e.Email)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.FileName)
                .IsUnicode(false)
                .HasColumnName("file_name");
            entity.Property(e => e.IsExcellent).HasColumnName("is_excellent");
            entity.Property(e => e.MainGroupId).HasColumnName("main_group_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Phone)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.Region)
                .IsUnicode(false)
                .HasColumnName("region");
            entity.Property(e => e.ScientAdviserId).HasColumnName("scient_adviser_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StudDtId)
                .IsUnicode(false)
                .HasColumnName("stud_dt_id");
            entity.Property(e => e.Subject)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnSubjectPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_subject_plan");

            entity.ToTable("dn_subject_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSubjectPlan)
                .HasForeignKey<DnSubjectPlan>(d => d.Id)
                .HasConstraintName("FK_objects_dn_subject_plan");
        });

        modelBuilder.Entity<DnSubjectPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_subject_plans");

            entity.ToTable("dn_subject_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EducatEventId).HasColumnName("educat_event_id");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProgDiscAppendId).HasColumnName("prog_disc_append_id");
            entity.Property(e => e.ProgramDisciplineId).HasColumnName("program_discipline_id");
            entity.Property(e => e.Subject)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnTerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_term");

            entity.ToTable("dn_term");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnTerm)
                .HasForeignKey<DnTerm>(d => d.Id)
                .HasConstraintName("FK_objects_dn_term");
        });

        modelBuilder.Entity<DnTerms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_terms");

            entity.ToTable("dn_terms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StrTerm)
                .IsUnicode(false)
                .HasColumnName("str_term");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnTrainMethodComplex>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_train_method_complex");

            entity.ToTable("dn_train_method_complex");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnTrainMethodComplex)
                .HasForeignKey<DnTrainMethodComplex>(d => d.Id)
                .HasConstraintName("FK_objects_dn_train_method_complex");
        });

        modelBuilder.Entity<DnTrainMethodComplexs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_train_method_complexs");

            entity.ToTable("dn_train_method_complexs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ProgramDisciplineId).HasColumnName("program_discipline_id");
            entity.Property(e => e.ProgramDisciplineName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("program_discipline_name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnWorkCurriculum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_work_curriculum");

            entity.ToTable("dn_work_curriculum");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnWorkCurriculum)
                .HasForeignKey<DnWorkCurriculum>(d => d.Id)
                .HasConstraintName("FK_objects_dn_work_curriculum");
        });

        modelBuilder.Entity<DnWorkCurriculums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_work_curriculums");

            entity.ToTable("dn_work_curriculums");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EducatFormId).HasColumnName("educat_form_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DocType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__doc_type");

            entity.ToTable("doc_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DocType)
                .HasForeignKey<DocType>(d => d.Id)
                .HasConstraintName("FK_objects_doc_type");
        });

        modelBuilder.Entity<DocTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__doc_types");

            entity.ToTable("doc_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .IsUnicode(false)
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CustomAdminTemplateId).HasColumnName("custom_admin_template_id");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.DispName)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.IsCraveForReboot).HasColumnName("is_crave_for_reboot");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document");

            entity.ToTable("document");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Document)
                .HasForeignKey<Document>(d => d.Id)
                .HasConstraintName("FK_objects_document");
        });

        modelBuilder.Entity<DocumentCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document_collaborators");

            entity.ToTable("document_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CanCreate).HasColumnName("can_create");
            entity.Property(e => e.CanDelete).HasColumnName("can_delete");
            entity.Property(e => e.CanEdit).HasColumnName("can_edit");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.ParentObjectName)
                .IsUnicode(false)
                .HasColumnName("parent_object_name");
            entity.Property(e => e.ParentObjectType)
                .IsUnicode(false)
                .HasColumnName("parent_object_type");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
        });

        modelBuilder.Entity<DocumentCommentEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document_comment_entry");

            entity.ToTable("document_comment_entry");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DocumentCommentEntry)
                .HasForeignKey<DocumentCommentEntry>(d => d.Id)
                .HasConstraintName("FK_objects_document_comment_entry");
        });

        modelBuilder.Entity<DocumentCommentEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document_comment_entrys");

            entity.ToTable("document_comment_entrys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorInfo)
                .IsUnicode(false)
                .HasColumnName("author_info");
            entity.Property(e => e.ChildNum).HasColumnName("child_num");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Deleted).HasColumnName("deleted");
            entity.Property(e => e.How2show)
                .IsUnicode(false)
                .HasColumnName("how2show");
            entity.Property(e => e.LastCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("last_create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentDocumentEntryId).HasColumnName("parent_document_entry_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PortalDocId).HasColumnName("portal_doc_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Documents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__documents");

            entity.ToTable("documents");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessExists).HasColumnName("access_exists");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogListDesc)
                .IsUnicode(false)
                .HasColumnName("catalog_list_desc");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomTemplateType).HasColumnName("custom_template_type");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.Invariable).HasColumnName("invariable");
            entity.Property(e => e.IsLink).HasColumnName("is_link");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpEndDate)
                .HasColumnType("datetime")
                .HasColumnName("kp_end_date");
            entity.Property(e => e.KpStartDate)
                .HasColumnType("datetime")
                .HasColumnName("kp_start_date");
            entity.Property(e => e.LinkHref)
                .IsUnicode(false)
                .HasColumnName("link_href");
            entity.Property(e => e.LinkTarget)
                .IsUnicode(false)
                .HasColumnName("link_target");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.ParentDocumentId).HasColumnName("parent_document_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.ParentObjectName)
                .IsUnicode(false)
                .HasColumnName("parent_object_name");
            entity.Property(e => e.ParentObjectType)
                .IsUnicode(false)
                .HasColumnName("parent_object_type");
            entity.Property(e => e.PermitSubscription).HasColumnName("permit_subscription");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .IsUnicode(false)
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Template)
                .IsUnicode(false)
                .HasColumnName("template");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DownloadPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__download_package");

            entity.ToTable("download_package");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DownloadPackage)
                .HasForeignKey<DownloadPackage>(d => d.Id)
                .HasConstraintName("FK_objects_download_package");
        });

        modelBuilder.Entity<DownloadPackages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__download_packages");

            entity.ToTable("download_packages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ExchangeServerId).HasColumnName("exchange_server_id");
            entity.Property(e => e.PackageDate)
                .HasColumnType("datetime")
                .HasColumnName("package_date");
            entity.Property(e => e.PackageId)
                .IsUnicode(false)
                .HasColumnName("package_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<EducationMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_method");

            entity.ToTable("education_method");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationMethod)
                .HasForeignKey<EducationMethod>(d => d.Id)
                .HasConstraintName("FK_objects_education_method");
        });

        modelBuilder.Entity<EducationMethodLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_method_lectors");

            entity.ToTable("education_method_lectors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.CostType)
                .IsUnicode(false)
                .HasColumnName("cost_type");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<EducationMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_methods");

            entity.ToTable("education_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.CostType)
                .IsUnicode(false)
                .HasColumnName("cost_type");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EventForm)
                .IsUnicode(false)
                .HasColumnName("event_form");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<EducationOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_org");

            entity.ToTable("education_org");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationOrg)
                .HasForeignKey<EducationOrg>(d => d.Id)
                .HasConstraintName("FK_objects_education_org");
        });

        modelBuilder.Entity<EducationOrgLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_org_lectors");

            entity.ToTable("education_org_lectors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DispName)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.IsProviderCourses).HasColumnName("is_provider_courses");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<EducationOrgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_orgs");

            entity.ToTable("education_orgs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContactMain)
                .IsUnicode(false)
                .HasColumnName("contact_main");
            entity.Property(e => e.DispName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.IsProviderCourses).HasColumnName("is_provider_courses");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.TelephoneMobile)
                .IsUnicode(false)
                .HasColumnName("telephone_mobile");
            entity.Property(e => e.TelephoneWork)
                .IsUnicode(false)
                .HasColumnName("telephone_work");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_plan");

            entity.ToTable("education_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationPlan)
                .HasForeignKey<EducationPlan>(d => d.Id)
                .HasConstraintName("FK_objects_education_plan");
        });

        modelBuilder.Entity<EducationPlanCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_plan_collaborators");

            entity.ToTable("education_plan_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.DevelopmentPlanId).HasColumnName("development_plan_id");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectCode)
                .IsUnicode(false)
                .HasColumnName("object_code");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectStartDate)
                .HasColumnType("datetime")
                .HasColumnName("object_start_date");
            entity.Property(e => e.ParentProgpamId).HasColumnName("parent_progpam_id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPosition)
                .IsUnicode(false)
                .HasColumnName("person_position");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.ResultObjectCode)
                .IsUnicode(false)
                .HasColumnName("result_object_code");
            entity.Property(e => e.ResultObjectFinishDate)
                .HasColumnType("datetime")
                .HasColumnName("result_object_finish_date");
            entity.Property(e => e.ResultObjectId).HasColumnName("result_object_id");
            entity.Property(e => e.ResultObjectName)
                .IsUnicode(false)
                .HasColumnName("result_object_name");
            entity.Property(e => e.ResultObjectStartDate)
                .HasColumnType("datetime")
                .HasColumnName("result_object_start_date");
            entity.Property(e => e.ResultType)
                .IsUnicode(false)
                .HasColumnName("result_type");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<EducationPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_plans");

            entity.ToTable("education_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.DevelopmentPlanId).HasColumnName("development_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastActivityDate)
                .HasColumnType("datetime")
                .HasColumnName("last_activity_date");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PlanDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_date");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_program");

            entity.ToTable("education_program");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationProgram)
                .HasForeignKey<EducationProgram>(d => d.Id)
                .HasConstraintName("FK_objects_education_program");
        });

        modelBuilder.Entity<EducationProgramEducationMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_program_education_methods");

            entity.ToTable("education_program_education_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .IsUnicode(false)
                .HasColumnName("cost_type");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationMethodName)
                .IsUnicode(false)
                .HasColumnName("education_method_name");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<EducationPrograms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_programs");

            entity.ToTable("education_programs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EfficiencyEstimation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__efficiency_estimation");

            entity.ToTable("efficiency_estimation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EfficiencyEstimation)
                .HasForeignKey<EfficiencyEstimation>(d => d.Id)
                .HasConstraintName("FK_objects_efficiency_estimation");
        });

        modelBuilder.Entity<EfficiencyEstimations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__efficiency_estimations");

            entity.ToTable("efficiency_estimations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EstaffEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_event");

            entity.ToTable("estaff_event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EstaffEvent)
                .HasForeignKey<EstaffEvent>(d => d.Id)
                .HasConstraintName("FK_objects_estaff_event");
        });

        modelBuilder.Entity<EstaffEventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_event_type");

            entity.ToTable("estaff_event_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EstaffEventType)
                .HasForeignKey<EstaffEventType>(d => d.Id)
                .HasConstraintName("FK_objects_estaff_event_type");
        });

        modelBuilder.Entity<EstaffEventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_event_types");

            entity.ToTable("estaff_event_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EventTypeEstaffId)
                .IsUnicode(false)
                .HasColumnName("event_type_estaff_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PositionCommons)
                .IsUnicode(false)
                .HasColumnName("position_commons");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EstaffEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_events");

            entity.ToTable("estaff_events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CodeEvent)
                .IsUnicode(false)
                .HasColumnName("code_event");
            entity.Property(e => e.EstaffEventEid).HasColumnName("estaff_event_eid");
            entity.Property(e => e.EstaffEventTypeId).HasColumnName("estaff_event_type_id");
            entity.Property(e => e.EstaffEventTypeName)
                .IsUnicode(false)
                .HasColumnName("estaff_event_type_name");
            entity.Property(e => e.EventName)
                .IsUnicode(false)
                .HasColumnName("event_name");
            entity.Property(e => e.EventStatusId)
                .IsUnicode(false)
                .HasColumnName("event_status_id");
            entity.Property(e => e.LinkedObjectUrl)
                .IsUnicode(false)
                .HasColumnName("linked_object_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.Objects)
                .IsUnicode(false)
                .HasColumnName("objects");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyCode)
                .IsUnicode(false)
                .HasColumnName("vacancy_code");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .IsUnicode(false)
                .HasColumnName("vacancy_name");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event");

            entity.ToTable("event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Event)
                .HasForeignKey<Event>(d => d.Id)
                .HasConstraintName("FK_objects_event");
        });

        modelBuilder.Entity<EventAssessmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_assessment_plan");

            entity.ToTable("event_assessment_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventAssessmentPlan)
                .HasForeignKey<EventAssessmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_event_assessment_plan");
        });

        modelBuilder.Entity<EventAssessmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_assessment_plans");

            entity.ToTable("event_assessment_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentType)
                .IsUnicode(false)
                .HasColumnName("assessment_type");
            entity.Property(e => e.AssessmentTypeId)
                .IsUnicode(false)
                .HasColumnName("assessment_type_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DateStart)
                .HasColumnType("datetime")
                .HasColumnName("date_start");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpertPersonFullname)
                .IsUnicode(false)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .IsUnicode(false)
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<EventCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_collaborators");

            entity.ToTable("event_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DurationFact).HasColumnName("duration_fact");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPreparation).HasColumnName("is_preparation");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_groups");

            entity.ToTable("event_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_lectors");

            entity.ToTable("event_lectors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsPreparation).HasColumnName("is_preparation");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.LectorFullname)
                .IsUnicode(false)
                .HasColumnName("lector_fullname");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventObjectResources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_object_resources");

            entity.ToTable("event_object_resources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectResourceId).HasColumnName("object_resource_id");
            entity.Property(e => e.ObjectResourceName)
                .IsUnicode(false)
                .HasColumnName("object_resource_name");
            entity.Property(e => e.ObjectResourceType)
                .IsUnicode(false)
                .HasColumnName("object_resource_type");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<EventPhases>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_phases");

            entity.ToTable("event_phases");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectResourceId).HasColumnName("object_resource_id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<EventResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_result");

            entity.ToTable("event_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventResult)
                .HasForeignKey<EventResult>(d => d.Id)
                .HasConstraintName("FK_objects_event_result");
        });

        modelBuilder.Entity<EventResultType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_result_type");

            entity.ToTable("event_result_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventResultType)
                .HasForeignKey<EventResultType>(d => d.Id)
                .HasConstraintName("FK_objects_event_result_type");
        });

        modelBuilder.Entity<EventResultTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_result_types");

            entity.ToTable("event_result_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<EventResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_results");

            entity.ToTable("event_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CertificateId).HasColumnName("certificate_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("event_name");
            entity.Property(e => e.EventResultTypeId).HasColumnName("event_result_type_id");
            entity.Property(e => e.EventStartDate)
                .HasColumnType("datetime")
                .HasColumnName("event_start_date");
            entity.Property(e => e.ExpenseSum).HasColumnName("expense_sum");
            entity.Property(e => e.IsAssist).HasColumnName("is_assist");
            entity.Property(e => e.IsBanned).HasColumnName("is_banned");
            entity.Property(e => e.IsConfirm).HasColumnName("is_confirm");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.LastSendingDate)
                .HasColumnType("datetime")
                .HasColumnName("last_sending_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NotParticipate).HasColumnName("not_participate");
            entity.Property(e => e.NotPay).HasColumnName("not_pay");
            entity.Property(e => e.ObjectResourceId).HasColumnName("object_resource_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_type");

            entity.ToTable("event_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventType)
                .HasForeignKey<EventType>(d => d.Id)
                .HasConstraintName("FK_objects_event_type");
        });

        modelBuilder.Entity<EventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_types");

            entity.ToTable("event_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SimplCustomWebTemplateId).HasColumnName("simpl_custom_web_template_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Events>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__events");

            entity.ToTable("events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .IsUnicode(false)
                .HasColumnName("cost_type");
            entity.Property(e => e.CourseBegan).HasColumnName("course_began");
            entity.Property(e => e.CourseFinished).HasColumnName("course_finished");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseProcess).HasColumnName("course_process");
            entity.Property(e => e.CourseStarted).HasColumnName("course_started");
            entity.Property(e => e.CreateCompoundProgramId).HasColumnName("create_compound_program_id");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DistributeCostType)
                .IsUnicode(false)
                .HasColumnName("distribute_cost_type");
            entity.Property(e => e.DurationDaysFact).HasColumnName("duration_days_fact");
            entity.Property(e => e.DurationFact).HasColumnName("duration_fact");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.EventForm)
                .IsUnicode(false)
                .HasColumnName("event_form");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupEducGroupId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("group_educ_group_id");
            entity.Property(e => e.GroupFormed).HasColumnName("group_formed");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.MandatoryFillResponse).HasColumnName("mandatory_fill_response");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("organizational_form");
            entity.Property(e => e.ParentEventId).HasColumnName("parent_event_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.RecordExists).HasColumnName("record_exists");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.SendPersonsTypes)
                .IsUnicode(false)
                .HasColumnName("send_persons_types");
            entity.Property(e => e.SendType)
                .IsUnicode(false)
                .HasColumnName("send_type");
            entity.Property(e => e.ShowRecord).HasColumnName("show_record");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.TestBegan).HasColumnName("test_began");
            entity.Property(e => e.TestFinished).HasColumnName("test_finished");
            entity.Property(e => e.TestProcess).HasColumnName("test_process");
            entity.Property(e => e.TestStarted).HasColumnName("test_started");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TrainingPlanId).HasColumnName("training_plan_id");
            entity.Property(e => e.TutorMain)
                .IsUnicode(false)
                .HasColumnName("tutor_main");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VclassHost)
                .IsUnicode(false)
                .HasColumnName("vclass_host");
        });

        modelBuilder.Entity<ExchangeServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exchange_server");

            entity.ToTable("exchange_server");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExchangeServer)
                .HasForeignKey<ExchangeServer>(d => d.Id)
                .HasConstraintName("FK_objects_exchange_server");
        });

        modelBuilder.Entity<ExchangeServers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exchange_servers");

            entity.ToTable("exchange_servers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.LastDownloadDate)
                .HasColumnType("datetime")
                .HasColumnName("last_download_date");
            entity.Property(e => e.LastUploadDate)
                .HasColumnType("datetime")
                .HasColumnName("last_upload_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.ServerVersion)
                .IsUnicode(false)
                .HasColumnName("server_version");
        });

        modelBuilder.Entity<ExclusionReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exclusion_reason");

            entity.ToTable("exclusion_reason");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExclusionReason)
                .HasForeignKey<ExclusionReason>(d => d.Id)
                .HasConstraintName("FK_objects_exclusion_reason");
        });

        modelBuilder.Entity<ExclusionReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exclusion_reasons");

            entity.ToTable("exclusion_reasons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Exercise>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exercise");

            entity.ToTable("exercise");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Exercise)
                .HasForeignKey<Exercise>(d => d.Id)
                .HasConstraintName("FK_objects_exercise");
        });

        modelBuilder.Entity<Exercises>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exercises");

            entity.ToTable("exercises");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Expense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expense");

            entity.ToTable("expense");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Expense)
                .HasForeignKey<Expense>(d => d.Id)
                .HasConstraintName("FK_objects_expense");
        });

        modelBuilder.Entity<ExpenseItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expense_item");

            entity.ToTable("expense_item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExpenseItem)
                .HasForeignKey<ExpenseItem>(d => d.Id)
                .HasConstraintName("FK_objects_expense_item");
        });

        modelBuilder.Entity<ExpenseItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expense_items");

            entity.ToTable("expense_items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Expenses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expenses");

            entity.ToTable("expenses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.ExpenseCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("expense_create_date");
            entity.Property(e => e.IsFormed).HasColumnName("is_formed");
            entity.Property(e => e.IsReceived).HasColumnName("is_received");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.PayStageId).HasColumnName("pay_stage_id");
            entity.Property(e => e.ReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("received_date");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<Expert>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expert");

            entity.ToTable("expert");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Expert)
                .HasForeignKey<Expert>(d => d.Id)
                .HasConstraintName("FK_objects_expert");
        });

        modelBuilder.Entity<ExpertQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expert_question");

            entity.ToTable("expert_question");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExpertQuestion)
                .HasForeignKey<ExpertQuestion>(d => d.Id)
                .HasConstraintName("FK_objects_expert_question");
        });

        modelBuilder.Entity<ExpertQuestions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expert_questions");

            entity.ToTable("expert_questions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnswerDate)
                .HasColumnType("datetime")
                .HasColumnName("answer_date");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.IsDisclosed).HasColumnName("is_disclosed");
            entity.Property(e => e.IsFaq).HasColumnName("is_faq");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.NormativeDate)
                .HasColumnType("datetime")
                .HasColumnName("normative_date");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Question)
                .IsUnicode(false)
                .HasColumnName("question");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Experts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__experts");

            entity.ToTable("experts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnswerExpireTime).HasColumnName("answer_expire_time");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.SubExpertId).HasColumnName("sub_expert_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ExternalSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__external_system");

            entity.ToTable("external_system");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExternalSystem)
                .HasForeignKey<ExternalSystem>(d => d.Id)
                .HasConstraintName("FK_objects_external_system");
        });

        modelBuilder.Entity<ExternalSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__external_systems");

            entity.ToTable("external_systems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnonymousUserId).HasColumnName("anonymous_user_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<FfSppk>(entity =>
        {
            entity.ToTable("ff_sppk");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasColumnName("code");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DurAdditional).HasColumnName("dur_additional");
            entity.Property(e => e.DurDouble).HasColumnName("dur_double");
            entity.Property(e => e.DurEquip).HasColumnName("dur_equip");
            entity.Property(e => e.DurPractice).HasColumnName("dur_practice");
            entity.Property(e => e.DurStaging).HasColumnName("dur_staging");
            entity.Property(e => e.DurTheory).HasColumnName("dur_theory");
            entity.Property(e => e.DurTotal).HasColumnName("dur_total");
            entity.Property(e => e.EduTypeId).HasColumnName("edu_type_id");
            entity.Property(e => e.IsNorm).HasColumnName("is_norm");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NormUncheck).HasColumnName("norm_uncheck");
            entity.Property(e => e.ResponsePerson).HasColumnName("response_person");
            entity.Property(e => e.ResponsePosition).HasColumnName("response_position");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<FfSppkDates>(entity =>
        {
            entity.ToTable("ff_sppk_dates");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FfSppkId).HasColumnName("ff_sppk_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.PersonsCnt).HasColumnName("persons_cnt");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.StartDate).HasColumnName("start_date");

            entity.HasOne(d => d.FfSppk).WithMany(p => p.FfSppkDates)
                .HasForeignKey(d => d.FfSppkId)
                .HasConstraintName("FK_ff_sppk_dates_ff_sppk");
        });

        modelBuilder.Entity<FfSppkPersons>(entity =>
        {
            entity.ToTable("ff_sppk_persons");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DurAdditional).HasColumnName("dur_additional");
            entity.Property(e => e.DurDouble).HasColumnName("dur_double");
            entity.Property(e => e.DurEquip).HasColumnName("dur_equip");
            entity.Property(e => e.DurPractice).HasColumnName("dur_practice");
            entity.Property(e => e.DurStaging).HasColumnName("dur_staging");
            entity.Property(e => e.DurTheory).HasColumnName("dur_theory");
            entity.Property(e => e.DurTotal).HasColumnName("dur_total");
            entity.Property(e => e.FfSppkDatesId).HasColumnName("ff_sppk_dates_id");
            entity.Property(e => e.IsFinished).HasColumnName("is_finished");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResponsePerson).HasColumnName("response_person");
            entity.Property(e => e.ResponsePosition).HasColumnName("response_position");

            entity.HasOne(d => d.FfSppkDates).WithMany(p => p.FfSppkPersons)
                .HasForeignKey(d => d.FfSppkDatesId)
                .HasConstraintName("FK_ff_sppk_persons_ff_sppk_dates");
        });

        modelBuilder.Entity<FileSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__file_source");

            entity.ToTable("file_source");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FileSource)
                .HasForeignKey<FileSource>(d => d.Id)
                .HasConstraintName("FK_objects_file_source");
        });

        modelBuilder.Entity<FileSources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__file_sources");

            entity.ToTable("file_sources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.SearchAvailable).HasColumnName("search_available");
            entity.Property(e => e.SelectionAvailable).HasColumnName("selection_available");
        });

        modelBuilder.Entity<Forum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum");

            entity.ToTable("forum");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Forum)
                .HasForeignKey<Forum>(d => d.Id)
                .HasConstraintName("FK_objects_forum");
        });

        modelBuilder.Entity<ForumEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_entry");

            entity.ToTable("forum_entry");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ForumEntry)
                .HasForeignKey<ForumEntry>(d => d.Id)
                .HasConstraintName("FK_objects_forum_entry");
        });

        modelBuilder.Entity<ForumEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_entrys");

            entity.ToTable("forum_entrys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorInfo)
                .IsUnicode(false)
                .HasColumnName("author_info");
            entity.Property(e => e.ChildNum).HasColumnName("child_num");
            entity.Property(e => e.Closed).HasColumnName("closed");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.How2show)
                .IsUnicode(false)
                .HasColumnName("how2show");
            entity.Property(e => e.IsModerApproved).HasColumnName("is_moder_approved");
            entity.Property(e => e.LastCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("last_create_date");
            entity.Property(e => e.MainForumEntryId).HasColumnName("main_forum_entry_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentForumEntryId).HasColumnName("parent_forum_entry_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.Pinned).HasColumnName("pinned");
            entity.Property(e => e.RemoteIp)
                .IsUnicode(false)
                .HasColumnName("remote_ip");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ForumThemeReadByCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_theme_read_by_collaborator");

            entity.ToTable("forum_theme_read_by_collaborator");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ForumThemeReadByCollaborator)
                .HasForeignKey<ForumThemeReadByCollaborator>(d => d.Id)
                .HasConstraintName("FK_objects_forum_theme_read_by_collaborator");
        });

        modelBuilder.Entity<ForumThemeReadByCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_theme_read_by_collaborators");

            entity.ToTable("forum_theme_read_by_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.ForumThemeId).HasColumnName("forum_theme_id");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Forums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forums");

            entity.ToTable("forums");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowAnonymousMessage).HasColumnName("allow_anonymous_message");
            entity.Property(e => e.AllowCreateClosedTheme).HasColumnName("allow_create_closed_theme");
            entity.Property(e => e.AllowUserDelete).HasColumnName("allow_user_delete");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Closed).HasColumnName("closed");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.DispUserStatus).HasColumnName("disp_user_status");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PermitSubscription).HasColumnName("permit_subscription");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<FtLastIndex>(entity =>
        {
            entity.HasKey(e => e.LastFtIndexDate);

            entity.ToTable("(ft_last_index)");

            entity.Property(e => e.LastFtIndexDate)
                .HasColumnType("datetime")
                .HasColumnName("last_ft_index_date");
        });

        modelBuilder.Entity<FuncManagers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__func_managers");

            entity.ToTable("func_managers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.IsNative).HasColumnName("is_native");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Good>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good");

            entity.ToTable("good");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Good)
                .HasForeignKey<Good>(d => d.Id)
                .HasConstraintName("FK_objects_good");
        });

        modelBuilder.Entity<GoodInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_instance");

            entity.ToTable("good_instance");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.GoodInstance)
                .HasForeignKey<GoodInstance>(d => d.Id)
                .HasConstraintName("FK_objects_good_instance");
        });

        modelBuilder.Entity<GoodInstances>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_instances");

            entity.ToTable("good_instances");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.GoodId).HasColumnName("good_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("datetime")
                .HasColumnName("paid_date");
            entity.Property(e => e.ReservedDate)
                .HasColumnType("datetime")
                .HasColumnName("reserved_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<GoodType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_type");

            entity.ToTable("good_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.GoodType)
                .HasForeignKey<GoodType>(d => d.Id)
                .HasConstraintName("FK_objects_good_type");
        });

        modelBuilder.Entity<GoodTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_types");

            entity.ToTable("good_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Goods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__goods");

            entity.ToTable("goods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CostDesc)
                .IsUnicode(false)
                .HasColumnName("cost_desc");
            entity.Property(e => e.GoodTypeId).HasColumnName("good_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Grade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__grade");

            entity.ToTable("grade");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Grade)
                .HasForeignKey<Grade>(d => d.Id)
                .HasConstraintName("FK_objects_grade");
        });

        modelBuilder.Entity<Grades>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__grades");

            entity.ToTable("grades");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__group");

            entity.ToTable("group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Group)
                .HasForeignKey<Group>(d => d.Id)
                .HasConstraintName("FK_objects_group");
        });

        modelBuilder.Entity<GroupCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__group_collaborators");

            entity.ToTable("group_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowSocialPost).HasColumnName("allow_social_post");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorFullname)
                .IsUnicode(false)
                .HasColumnName("collaborator_fullname");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.IsHidden).HasColumnName("is_hidden");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.TutorFullname)
                .IsUnicode(false)
                .HasColumnName("tutor_fullname");
            entity.Property(e => e.TutorId).HasColumnName("tutor_id");
        });

        modelBuilder.Entity<Groups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__groups");

            entity.ToTable("groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowSocialPost).HasColumnName("allow_social_post");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.IsEduc).HasColumnName("is_educ");
            entity.Property(e => e.IsHidden).HasColumnName("is_hidden");
            entity.Property(e => e.JoinMode)
                .IsUnicode(false)
                .HasColumnName("join_mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.TagId)
                .HasColumnType("xml")
                .HasColumnName("tag_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Host>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__host");

            entity.ToTable("host");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Host)
                .HasForeignKey<Host>(d => d.Id)
                .HasConstraintName("FK_objects_host");
        });

        modelBuilder.Entity<Hosts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__hosts");

            entity.ToTable("hosts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Host)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("host");
            entity.Property(e => e.Hostname)
                .IsUnicode(false)
                .HasColumnName("hostname");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Port).HasColumnName("port");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
        });

        modelBuilder.Entity<IndProgPassLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ind_prog_pass_log");

            entity.Property(e => e.CheckedDate)
                .HasColumnType("datetime")
                .HasColumnName("checked_date");
            entity.Property(e => e.IsChecked).HasColumnName("is_checked");
            entity.Property(e => e.IsPass).HasColumnName("is_pass");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.UpdateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("update_date");
            entity.Property(e => e.UpdateUser).HasColumnName("update_user");
        });

        modelBuilder.Entity<Indicator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__indicator");

            entity.ToTable("indicator");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Indicator)
                .HasForeignKey<Indicator>(d => d.Id)
                .HasConstraintName("FK_objects_indicator");
        });

        modelBuilder.Entity<Indicators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__indicators");

            entity.ToTable("indicators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceId).HasColumnName("competence_id");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__invoice");

            entity.ToTable("invoice");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Invoice)
                .HasForeignKey<Invoice>(d => d.Id)
                .HasConstraintName("FK_objects_invoice");
        });

        modelBuilder.Entity<Invoices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__invoices");

            entity.ToTable("invoices");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.IsPaid).HasColumnName("is_paid");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__item");

            entity.ToTable("item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Item)
                .HasForeignKey<Item>(d => d.Id)
                .HasConstraintName("FK_objects_item");
        });

        modelBuilder.Entity<Items>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__items");

            entity.ToTable("items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.QuestionPoints).HasColumnName("question_points");
            entity.Property(e => e.QuestionText)
                .IsUnicode(false)
                .HasColumnName("question_text");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Title)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KeyPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_position");

            entity.ToTable("key_position");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KeyPosition)
                .HasForeignKey<KeyPosition>(d => d.Id)
                .HasConstraintName("FK_objects_key_position");
        });

        modelBuilder.Entity<KeyPositionThreat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_position_threat");

            entity.ToTable("key_position_threat");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KeyPositionThreat)
                .HasForeignKey<KeyPositionThreat>(d => d.Id)
                .HasConstraintName("FK_objects_key_position_threat");
        });

        modelBuilder.Entity<KeyPositionThreats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_position_threats");

            entity.ToTable("key_position_threats");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Color)
                .IsUnicode(false)
                .HasColumnName("color");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KeyPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_positions");

            entity.ToTable("key_positions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.KeyPositionThreatId).HasColumnName("key_position_threat_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonCode)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.RiskLevels)
                .IsUnicode(false)
                .HasColumnName("risk_levels");
            entity.Property(e => e.RiskPerspectiveId).HasColumnName("risk_perspective_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KnowledgeClassifier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_classifier");

            entity.ToTable("knowledge_classifier");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgeClassifier)
                .HasForeignKey<KnowledgeClassifier>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_classifier");
        });

        modelBuilder.Entity<KnowledgeClassifiers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_classifiers");

            entity.ToTable("knowledge_classifiers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<KnowledgeObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_objects");

            entity.ToTable("knowledge_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.DocCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("doc_create_date");
            entity.Property(e => e.KnowledgePartId).HasColumnName("knowledge_part_id");
            entity.Property(e => e.KnowledgePartLevelId).HasColumnName("knowledge_part_level_id");
            entity.Property(e => e.KnowledgePartName)
                .IsUnicode(false)
                .HasColumnName("knowledge_part_name");
            entity.Property(e => e.ObjectEndDate)
                .HasColumnType("datetime")
                .HasColumnName("object_end_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectStartDate)
                .HasColumnType("datetime")
                .HasColumnName("object_start_date");
            entity.Property(e => e.ObjectStatus)
                .IsUnicode(false)
                .HasColumnName("object_status");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
        });

        modelBuilder.Entity<KnowledgePart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part");

            entity.ToTable("knowledge_part");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgePart)
                .HasForeignKey<KnowledgePart>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_part");
        });

        modelBuilder.Entity<KnowledgePartLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_level");

            entity.ToTable("knowledge_part_level");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgePartLevel)
                .HasForeignKey<KnowledgePartLevel>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_part_level");
        });

        modelBuilder.Entity<KnowledgePartLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_levels");

            entity.ToTable("knowledge_part_levels");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<KnowledgePartType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_type");

            entity.ToTable("knowledge_part_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgePartType)
                .HasForeignKey<KnowledgePartType>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_part_type");
        });

        modelBuilder.Entity<KnowledgePartTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_types");

            entity.ToTable("knowledge_part_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<KnowledgeParts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_parts");

            entity.ToTable("knowledge_parts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeClassifierId).HasColumnName("knowledge_classifier_id");
            entity.Property(e => e.KnowledgePartTypeId).HasColumnName("knowledge_part_type_id");
            entity.Property(e => e.KnowledgeParts1)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .IsUnicode(false)
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<KnowledgeProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_profile");

            entity.ToTable("knowledge_profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgeProfile)
                .HasForeignKey<KnowledgeProfile>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_profile");
        });

        modelBuilder.Entity<KnowledgeProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_profiles");

            entity.ToTable("knowledge_profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<Knowledges>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledges");

            entity.ToTable("knowledges");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.HasExperts).HasColumnName("has_experts");
            entity.Property(e => e.KnowledgeClassifierId).HasColumnName("knowledge_classifier_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentCatalog)
                .IsUnicode(false)
                .HasColumnName("parent_catalog");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Kpi>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi");

            entity.ToTable("kpi");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Kpi)
                .HasForeignKey<Kpi>(d => d.Id)
                .HasConstraintName("FK_objects_kpi");
        });

        modelBuilder.Entity<KpiProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_profile");

            entity.ToTable("kpi_profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KpiProfile)
                .HasForeignKey<KpiProfile>(d => d.Id)
                .HasConstraintName("FK_objects_kpi_profile");
        });

        modelBuilder.Entity<KpiProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_profiles");

            entity.ToTable("kpi_profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileFamilyId).HasColumnName("competence_profile_family_id");
            entity.Property(e => e.KpiId)
                .HasColumnType("xml")
                .HasColumnName("kpi_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KpiValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_value");

            entity.ToTable("kpi_value");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KpiValue)
                .HasForeignKey<KpiValue>(d => d.Id)
                .HasConstraintName("FK_objects_kpi_value");
        });

        modelBuilder.Entity<KpiValues>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_values");

            entity.ToTable("kpi_values");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.Fact).HasColumnName("fact");
            entity.Property(e => e.KpiId).HasColumnName("kpi_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectCatalog)
                .IsUnicode(false)
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<Kpis>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpis");

            entity.ToTable("kpis");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .IsUnicode(false)
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsKpi).HasColumnName("is_kpi");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnersIds)
                .IsUnicode(false)
                .HasColumnName("owners_ids");
            entity.Property(e => e.RangeMax).HasColumnName("range_max");
            entity.Property(e => e.RangeMin).HasColumnName("range_min");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Learning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning");

            entity.ToTable("learning");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Learning)
                .HasForeignKey<Learning>(d => d.Id)
                .HasConstraintName("FK_objects_learning");
        });

        modelBuilder.Entity<LearningPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_part");

            entity.ToTable("learning_part");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningPart)
                .HasForeignKey<LearningPart>(d => d.Id)
                .HasConstraintName("FK_objects_learning_part");
        });

        modelBuilder.Entity<LearningParts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_parts");

            entity.ToTable("learning_parts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.LearningId).HasColumnName("learning_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<LearningRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_record");

            entity.ToTable("learning_record");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningRecord)
                .HasForeignKey<LearningRecord>(d => d.Id)
                .HasConstraintName("FK_objects_learning_record");
        });

        modelBuilder.Entity<LearningRecords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_records");

            entity.ToTable("learning_records");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.DownloadMaterials).HasColumnName("download_materials");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsFinishRecord).HasColumnName("is_finish_record");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.ProctoringObjectId).HasColumnName("proctoring_object_id");
            entity.Property(e => e.ProctoringObjectName)
                .IsUnicode(false)
                .HasColumnName("proctoring_object_name");
            entity.Property(e => e.ProctoringObjectType)
                .IsUnicode(false)
                .HasColumnName("proctoring_object_type");
            entity.Property(e => e.ProctoringSystemId).HasColumnName("proctoring_system_id");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LearningStorage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_storage");

            entity.ToTable("learning_storage");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningStorage)
                .HasForeignKey<LearningStorage>(d => d.Id)
                .HasConstraintName("FK_objects_learning_storage");
        });

        modelBuilder.Entity<LearningStorages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_storages");

            entity.ToTable("learning_storages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<LearningTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_task");

            entity.ToTable("learning_task");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningTask)
                .HasForeignKey<LearningTask>(d => d.Id)
                .HasConstraintName("FK_objects_learning_task");
        });

        modelBuilder.Entity<LearningTaskResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_task_result");

            entity.ToTable("learning_task_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningTaskResult)
                .HasForeignKey<LearningTaskResult>(d => d.Id)
                .HasConstraintName("FK_objects_learning_task_result");
        });

        modelBuilder.Entity<LearningTaskResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_task_results");

            entity.ToTable("learning_task_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.LearningTaskId).HasColumnName("learning_task_id");
            entity.Property(e => e.LearningTaskName)
                .IsUnicode(false)
                .HasColumnName("learning_task_name");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanEndDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_end_date");
            entity.Property(e => e.PlanStartDate)
                .HasColumnType("datetime")
                .HasColumnName("plan_start_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LearningTasks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_tasks");

            entity.ToTable("learning_tasks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.YourselfStart).HasColumnName("yourself_start");
        });

        modelBuilder.Entity<Learnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learnings");

            entity.ToTable("learnings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseName)
                .IsUnicode(false)
                .HasColumnName("course_name");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("event_name");
            entity.Property(e => e.EventStartDate)
                .HasColumnType("datetime")
                .HasColumnName("event_start_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("datetime")
                .HasColumnName("max_end_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("datetime")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.TextResult)
                .IsUnicode(false)
                .HasColumnName("text_result");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Lector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__lector");

            entity.ToTable("lector");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Lector)
                .HasForeignKey<Lector>(d => d.Id)
                .HasConstraintName("FK_objects_lector");
        });

        modelBuilder.Entity<Lectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__lectors");

            entity.ToTable("lectors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.IsDismiss).HasColumnName("is_dismiss");
            entity.Property(e => e.LectorFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("lector_fullname");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Level>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__level");

            entity.ToTable("level");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Level)
                .HasForeignKey<Level>(d => d.Id)
                .HasConstraintName("FK_objects_level");
        });

        modelBuilder.Entity<Levels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__levels");

            entity.ToTable("levels");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.MaxValue).HasColumnName("max_value");
            entity.Property(e => e.MinValue).HasColumnName("min_value");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PrevLevelId).HasColumnName("prev_level_id");
        });

        modelBuilder.Entity<LibraryMaterial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material");

            entity.ToTable("library_material");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterial)
                .HasForeignKey<LibraryMaterial>(d => d.Id)
                .HasConstraintName("FK_objects_library_material");
        });

        modelBuilder.Entity<LibraryMaterialComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_comment");

            entity.ToTable("library_material_comment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialComment)
                .HasForeignKey<LibraryMaterialComment>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_comment");
        });

        modelBuilder.Entity<LibraryMaterialComments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_comments");

            entity.ToTable("library_material_comments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialFormat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_format");

            entity.ToTable("library_material_format");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialFormat)
                .HasForeignKey<LibraryMaterialFormat>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_format");
        });

        modelBuilder.Entity<LibraryMaterialFormats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_formats");

            entity.ToTable("library_material_formats");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FormatTypeId)
                .IsUnicode(false)
                .HasColumnName("format_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_item");

            entity.ToTable("library_material_item");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialItem)
                .HasForeignKey<LibraryMaterialItem>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_item");
        });

        modelBuilder.Entity<LibraryMaterialItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_items");

            entity.ToTable("library_material_items");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.FormatId).HasColumnName("format_id");
            entity.Property(e => e.IssueDate)
                .HasColumnType("datetime")
                .HasColumnName("issue_date");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ReturnPlanDate)
                .HasColumnType("datetime")
                .HasColumnName("return_plan_date");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_log");

            entity.ToTable("library_material_log");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialLog)
                .HasForeignKey<LibraryMaterialLog>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_log");
        });

        modelBuilder.Entity<LibraryMaterialObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_objects");

            entity.ToTable("library_material_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.LibraryMaterialId).HasColumnName("library_material_id");
            entity.Property(e => e.LibraryMaterialName)
                .IsUnicode(false)
                .HasColumnName("library_material_name");
            entity.Property(e => e.ObjectCatalog)
                .IsUnicode(false)
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
        });

        modelBuilder.Entity<LibraryMaterialSourceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_source_type");

            entity.ToTable("library_material_source_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialSourceType)
                .HasForeignKey<LibraryMaterialSourceType>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_source_type");
        });

        modelBuilder.Entity<LibraryMaterialSourceTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_source_types");

            entity.ToTable("library_material_source_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Filenamemask)
                .IsUnicode(false)
                .HasColumnName("filenamemask");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.LibraryPlayerId).HasColumnName("library_player_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<LibraryMaterialType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_type");

            entity.ToTable("library_material_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialType)
                .HasForeignKey<LibraryMaterialType>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_type");
        });

        modelBuilder.Entity<LibraryMaterialTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_types");

            entity.ToTable("library_material_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialViewing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_viewing");

            entity.ToTable("library_material_viewing");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialViewing)
                .HasForeignKey<LibraryMaterialViewing>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_viewing");
        });

        modelBuilder.Entity<LibraryMaterialViewings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_viewings");

            entity.ToTable("library_material_viewings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.FinishViewingDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_viewing_date");
            entity.Property(e => e.LastViewingDate)
                .HasColumnType("datetime")
                .HasColumnName("last_viewing_date");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.MaterialName)
                .IsUnicode(false)
                .HasColumnName("material_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartViewingDate)
                .HasColumnType("datetime")
                .HasColumnName("start_viewing_date");
            entity.Property(e => e.StateId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_materials");

            entity.ToTable("library_materials");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowDownload).HasColumnName("allow_download");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Author)
                .IsUnicode(false)
                .HasColumnName("author");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.ExternalId)
                .IsUnicode(false)
                .HasColumnName("external_id");
            entity.Property(e => e.HasDigital).HasColumnName("has_digital");
            entity.Property(e => e.HasPhysical).HasColumnName("has_physical");
            entity.Property(e => e.Isbn)
                .IsUnicode(false)
                .HasColumnName("isbn");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LibraryMaterialFormats)
                .IsUnicode(false)
                .HasColumnName("library_material_formats");
            entity.Property(e => e.LibraryMaterialTypeId).HasColumnName("library_material_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OnlineVideoPrepared).HasColumnName("online_video_prepared");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SectionId).HasColumnName("section_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .IsUnicode(false)
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<LibraryPlayer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_player");

            entity.ToTable("library_player");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryPlayer)
                .HasForeignKey<LibraryPlayer>(d => d.Id)
                .HasConstraintName("FK_objects_library_player");
        });

        modelBuilder.Entity<LibraryPlayers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_players");

            entity.ToTable("library_players");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Cmi5).HasColumnName("cmi5");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.LearningStorageId).HasColumnName("learning_storage_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibrarySection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_section");

            entity.ToTable("library_section");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibrarySection)
                .HasForeignKey<LibrarySection>(d => d.Id)
                .HasConstraintName("FK_objects_library_section");
        });

        modelBuilder.Entity<LibrarySections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_sections");

            entity.ToTable("library_sections");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ExternalId)
                .IsUnicode(false)
                .HasColumnName("external_id");
            entity.Property(e => e.Link)
                .IsUnicode(false)
                .HasColumnName("link");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibrarySystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_system");

            entity.ToTable("library_system");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibrarySystem)
                .HasForeignKey<LibrarySystem>(d => d.Id)
                .HasConstraintName("FK_objects_library_system");
        });

        modelBuilder.Entity<LibrarySystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_systems");

            entity.ToTable("library_systems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<License>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__license");

            entity.ToTable("license");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.License)
                .HasForeignKey<License>(d => d.Id)
                .HasConstraintName("FK_objects_license");
        });

        modelBuilder.Entity<Licenses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__licenses");

            entity.ToTable("licenses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UsersNum).HasColumnName("users_num");
        });

        modelBuilder.Entity<Like>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__like");

            entity.ToTable("like");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Like)
                .HasForeignKey<Like>(d => d.Id)
                .HasConstraintName("FK_objects_like");
        });

        modelBuilder.Entity<Likes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__likes");

            entity.ToTable("likes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<MessengerService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__messenger_service");

            entity.ToTable("messenger_service");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.MessengerService)
                .HasForeignKey<MessengerService>(d => d.Id)
                .HasConstraintName("FK_objects_messenger_service");
        });

        modelBuilder.Entity<MessengerServices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__messenger_services");

            entity.ToTable("messenger_services");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<MobileAppConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__mobile_app_config");

            entity.ToTable("mobile_app_config");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.MobileAppConfig)
                .HasForeignKey<MobileAppConfig>(d => d.Id)
                .HasConstraintName("FK_objects_mobile_app_config");
        });

        modelBuilder.Entity<MobileAppConfigs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__mobile_app_configs");

            entity.ToTable("mobile_app_configs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification");

            entity.ToTable("notification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Notification)
                .HasForeignKey<Notification>(d => d.Id)
                .HasConstraintName("FK_objects_notification");
        });

        modelBuilder.Entity<NotificationSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_system");

            entity.ToTable("notification_system");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.NotificationSystem)
                .HasForeignKey<NotificationSystem>(d => d.Id)
                .HasConstraintName("FK_objects_notification_system");
        });

        modelBuilder.Entity<NotificationSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_systems");

            entity.ToTable("notification_systems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<NotificationTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_template");

            entity.ToTable("notification_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.NotificationTemplate)
                .HasForeignKey<NotificationTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_notification_template");
        });

        modelBuilder.Entity<NotificationTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_templates");

            entity.ToTable("notification_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Notifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notifications");

            entity.ToTable("notifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<ObjectData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_data");

            entity.ToTable("object_data");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectData)
                .HasForeignKey<ObjectData>(d => d.Id)
                .HasConstraintName("FK_objects_object_data");
        });

        modelBuilder.Entity<ObjectDataType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_data_type");

            entity.ToTable("object_data_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectDataType)
                .HasForeignKey<ObjectDataType>(d => d.Id)
                .HasConstraintName("FK_objects_object_data_type");
        });

        modelBuilder.Entity<ObjectDataTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_data_types");

            entity.ToTable("object_data_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .IsUnicode(false)
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<ObjectDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_datas");

            entity.ToTable("object_datas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectDataTypeId).HasColumnName("object_data_type_id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ObjectExperts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_experts");

            entity.ToTable("object_experts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<ObjectResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_resource");

            entity.ToTable("object_resource");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectResource)
                .HasForeignKey<ObjectResource>(d => d.Id)
                .HasConstraintName("FK_objects_object_resource");
        });

        modelBuilder.Entity<ObjectResources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_resources");

            entity.ToTable("object_resources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ObjectVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_version");

            entity.ToTable("object_version");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectVersion)
                .HasForeignKey<ObjectVersion>(d => d.Id)
                .HasConstraintName("FK_objects_object_version");
        });

        modelBuilder.Entity<ObjectVersions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_versions");

            entity.ToTable("object_versions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("object_modification_date");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Objectflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__objectflow");

            entity.ToTable("objectflow");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Objectflow)
                .HasForeignKey<Objectflow>(d => d.Id)
                .HasConstraintName("FK_objects_objectflow");
        });

        modelBuilder.Entity<Objectflows>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__objectflows");

            entity.ToTable("objectflows");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ObjectiveTranslate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__objective_translate");

            entity.ToTable("objective_translate");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectiveTranslate)
                .HasForeignKey<ObjectiveTranslate>(d => d.Id)
                .HasConstraintName("FK_objects_objective_translate");
        });

        modelBuilder.Entity<ObjectiveTranslates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__objective_translates");

            entity.ToTable("objective_translates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.RecipientObjectiveId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("recipient_objective_id");
            entity.Property(e => e.RecipientObjectiveName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("recipient_objective_name");
            entity.Property(e => e.RecipientPaId).HasColumnName("recipient_pa_id");
            entity.Property(e => e.RecipientPersonFullname)
                .IsUnicode(false)
                .HasColumnName("recipient_person_fullname");
            entity.Property(e => e.RecipientPersonId).HasColumnName("recipient_person_id");
            entity.Property(e => e.TranslatorObjectiveId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("translator_objective_id");
            entity.Property(e => e.TranslatorObjectiveName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("translator_objective_name");
            entity.Property(e => e.TranslatorPaId).HasColumnName("translator_pa_id");
            entity.Property(e => e.TranslatorPersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("translator_person_fullname");
            entity.Property(e => e.TranslatorPersonId).HasColumnName("translator_person_id");
        });

        modelBuilder.Entity<Operation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__operation");

            entity.ToTable("operation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Operation)
                .HasForeignKey<Operation>(d => d.Id)
                .HasConstraintName("FK_objects_operation");
        });

        modelBuilder.Entity<Operations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__operations");

            entity.ToTable("operations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Action)
                .IsUnicode(false)
                .HasColumnName("action");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Group)
                .IsUnicode(false)
                .HasColumnName("group");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.IsSystem).HasColumnName("is_system");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.OperationCatalogList)
                .IsUnicode(false)
                .HasColumnName("operation_catalog_list");
            entity.Property(e => e.OperationType).HasColumnName("operation_type");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UseAccessEval).HasColumnName("use_access_eval");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__order");

            entity.ToTable("order");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Order)
                .HasForeignKey<Order>(d => d.Id)
                .HasConstraintName("FK_objects_order");
        });

        modelBuilder.Entity<OrderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__order_type");

            entity.ToTable("order_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OrderType)
                .HasForeignKey<OrderType>(d => d.Id)
                .HasConstraintName("FK_objects_order_type");
        });

        modelBuilder.Entity<OrderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__order_types");

            entity.ToTable("order_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DefaultFlag).HasColumnName("default_flag");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.PerformerPersonFullname)
                .IsUnicode(false)
                .HasColumnName("performer_person_fullname");
            entity.Property(e => e.Prefix)
                .IsUnicode(false)
                .HasColumnName("prefix");
            entity.Property(e => e.ResponsiblePersonFullname)
                .IsUnicode(false)
                .HasColumnName("responsible_person_fullname");
            entity.Property(e => e.SigningPersonFullname)
                .IsUnicode(false)
                .HasColumnName("signing_person_fullname");
            entity.Property(e => e.Suffix)
                .IsUnicode(false)
                .HasColumnName("suffix");
        });

        modelBuilder.Entity<OrderedCollaborators>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ordered_collaborators");

            entity.Property(e => e.CommonDivisionId).HasColumnName("common_division_id");
            entity.Property(e => e.CommonDivisionName)
                .IsUnicode(false)
                .HasColumnName("common_division_name");
            entity.Property(e => e.CommonPositionId).HasColumnName("common_position_id");
            entity.Property(e => e.CommonPositionName).HasColumnName("common_position_name");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_name");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__orders");

            entity.ToTable("orders");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.FormedDate)
                .HasColumnType("datetime")
                .HasColumnName("formed_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("datetime")
                .HasColumnName("paid_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Sum).HasColumnName("sum");
        });

        modelBuilder.Entity<Org>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__org");

            entity.ToTable("org");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Org)
                .HasForeignKey<Org>(d => d.Id)
                .HasConstraintName("FK_objects_org");
        });

        modelBuilder.Entity<OrgVendorState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__org_vendor_state");

            entity.ToTable("org_vendor_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OrgVendorState)
                .HasForeignKey<OrgVendorState>(d => d.Id)
                .HasConstraintName("FK_objects_org_vendor_state");
        });

        modelBuilder.Entity<OrgVendorStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__org_vendor_states");

            entity.ToTable("org_vendor_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.RecertificationDate)
                .HasColumnType("datetime")
                .HasColumnName("recertification_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VendorStatusId).HasColumnName("vendor_status_id");
            entity.Property(e => e.VendorStatusTypeId)
                .IsUnicode(false)
                .HasColumnName("vendor_status_type_id");
        });

        modelBuilder.Entity<Orgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__orgs");

            entity.ToTable("orgs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DispName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.TagId)
                .HasColumnType("xml")
                .HasColumnName("tag_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<OutstaffAdditionalWork>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_additional_work");

            entity.ToTable("outstaff_additional_work");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffAdditionalWork)
                .HasForeignKey<OutstaffAdditionalWork>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_additional_work");
        });

        modelBuilder.Entity<OutstaffAdditionalWorks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_additional_works");

            entity.ToTable("outstaff_additional_works");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<OutstaffContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_contract");

            entity.ToTable("outstaff_contract");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffContract)
                .HasForeignKey<OutstaffContract>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_contract");
        });

        modelBuilder.Entity<OutstaffContracts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_contracts");

            entity.ToTable("outstaff_contracts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DispName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("disp_name");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.OutstaffProviderId).HasColumnName("outstaff_provider_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<OutstaffOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order");

            entity.ToTable("outstaff_order");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffOrder)
                .HasForeignKey<OutstaffOrder>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_order");
        });

        modelBuilder.Entity<OutstaffOrderExecution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order_execution");

            entity.ToTable("outstaff_order_execution");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffOrderExecution)
                .HasForeignKey<OutstaffOrderExecution>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_order_execution");
        });

        modelBuilder.Entity<OutstaffOrderExecutionStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order_execution_stages");

            entity.ToTable("outstaff_order_execution_stages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FormedDate)
                .HasColumnType("datetime")
                .HasColumnName("formed_date");
            entity.Property(e => e.OutstaffContractId).HasColumnName("outstaff_contract_id");
            entity.Property(e => e.OutstaffOrderExecutionId).HasColumnName("outstaff_order_execution_id");
            entity.Property(e => e.OutstaffOrderId).HasColumnName("outstaff_order_id");
            entity.Property(e => e.OutstaffProviderId).HasColumnName("outstaff_provider_id");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.StageCollaboratorId).HasColumnName("stage_collaborator_id");
            entity.Property(e => e.StageDate)
                .HasColumnType("datetime")
                .HasColumnName("stage_date");
            entity.Property(e => e.StageFactDate)
                .HasColumnType("datetime")
                .HasColumnName("stage_fact_date");
            entity.Property(e => e.StageHourNum).HasColumnName("stage_hour_num");
            entity.Property(e => e.StageHoursWorked).HasColumnName("stage_hours_worked");
            entity.Property(e => e.StageId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("stage_id");
            entity.Property(e => e.StageIsAssist).HasColumnName("stage_is_assist");
            entity.Property(e => e.StageParentId)
                .IsUnicode(false)
                .HasColumnName("stage_parent_id");
            entity.Property(e => e.StageStatusType)
                .IsUnicode(false)
                .HasColumnName("stage_status_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
        });

        modelBuilder.Entity<OutstaffOrderExecutions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order_executions");

            entity.ToTable("outstaff_order_executions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("collaborator_fullname");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FormedDate)
                .HasColumnType("datetime")
                .HasColumnName("formed_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OutstaffContractId).HasColumnName("outstaff_contract_id");
            entity.Property(e => e.OutstaffContractName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("outstaff_contract_name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("datetime")
                .HasColumnName("paid_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionCommonName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_common_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("subdivision_name");
        });

        modelBuilder.Entity<OutstaffOrders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_orders");

            entity.ToTable("outstaff_orders");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AgreementPersonId).HasColumnName("agreement_person_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CostHour).HasColumnName("cost_hour");
            entity.Property(e => e.CostSum).HasColumnName("cost_sum");
            entity.Property(e => e.FormedDate)
                .HasColumnType("datetime")
                .HasColumnName("formed_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("datetime")
                .HasColumnName("paid_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
        });

        modelBuilder.Entity<OutstaffProvider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_provider");

            entity.ToTable("outstaff_provider");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffProvider)
                .HasForeignKey<OutstaffProvider>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_provider");
        });

        modelBuilder.Entity<OutstaffProviders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_providers");

            entity.ToTable("outstaff_providers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
        });

        modelBuilder.Entity<OutstaffTypeMaterial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_type_material");

            entity.ToTable("outstaff_type_material");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffTypeMaterial)
                .HasForeignKey<OutstaffTypeMaterial>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_type_material");
        });

        modelBuilder.Entity<OutstaffTypeMaterials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_type_materials");

            entity.ToTable("outstaff_type_materials");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<OverrideWebTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__override_web_template");

            entity.ToTable("override_web_template");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OverrideWebTemplate)
                .HasForeignKey<OverrideWebTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_override_web_template");
        });

        modelBuilder.Entity<OverrideWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__override_web_templates");

            entity.ToTable("override_web_templates");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.CustomWebTemplateName)
                .IsUnicode(false)
                .HasColumnName("custom_web_template_name");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.Mode)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("mode");
            entity.Property(e => e.ModeException)
                .IsUnicode(false)
                .HasColumnName("mode_exception");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.Zone)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("zone");
        });

        modelBuilder.Entity<Pa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pa");

            entity.ToTable("pa");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Pa)
                .HasForeignKey<Pa>(d => d.Id)
                .HasConstraintName("FK_objects_pa");
        });

        modelBuilder.Entity<Participant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__participant");

            entity.ToTable("participant");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Participant)
                .HasForeignKey<Participant>(d => d.Id)
                .HasConstraintName("FK_objects_participant");
        });

        modelBuilder.Entity<Participants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__participants");

            entity.ToTable("participants");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContestId).HasColumnName("contest_id");
            entity.Property(e => e.ContestName)
                .IsUnicode(false)
                .HasColumnName("contest_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkName)
                .IsUnicode(false)
                .HasColumnName("work_name");
        });

        modelBuilder.Entity<Pas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pas");

            entity.ToTable("pas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AppraiseDate)
                .HasColumnType("datetime")
                .HasColumnName("appraise_date");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentAppraiseType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("assessment_appraise_type");
            entity.Property(e => e.AssessmentPlanId).HasColumnName("assessment_plan_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileId).HasColumnName("competence_profile_id");
            entity.Property(e => e.CustomExperts)
                .IsUnicode(false)
                .HasColumnName("custom_experts");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .IsUnicode(false)
                .HasColumnName("department_name");
            entity.Property(e => e.ExpertPersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .IsUnicode(false)
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.FlagAppraiseDepartment).HasColumnName("flag_appraise_department");
            entity.Property(e => e.FlagIsProcessed).HasColumnName("flag_is_processed");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsFinal).HasColumnName("is_final");
            entity.Property(e => e.IsReady).HasColumnName("is_ready");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Overall).HasColumnName("overall");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PayPhase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_phase");

            entity.ToTable("pay_phase");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PayPhase)
                .HasForeignKey<PayPhase>(d => d.Id)
                .HasConstraintName("FK_objects_pay_phase");
        });

        modelBuilder.Entity<PayPhases>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_phases");

            entity.ToTable("pay_phases");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActSum).HasColumnName("act_sum");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.DraftSum).HasColumnName("draft_sum");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .IsUnicode(false)
                .HasColumnName("event_name");
            entity.Property(e => e.InvoiceSum).HasColumnName("invoice_sum");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PayStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_stage");

            entity.ToTable("pay_stage");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PayStage)
                .HasForeignKey<PayStage>(d => d.Id)
                .HasConstraintName("FK_objects_pay_stage");
        });

        modelBuilder.Entity<PayStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_stages");

            entity.ToTable("pay_stages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.CloseType)
                .IsUnicode(false)
                .HasColumnName("close_type");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FactCost).HasColumnName("fact_cost");
            entity.Property(e => e.IsPrepayment).HasColumnName("is_prepayment");
            entity.Property(e => e.MaxCost).HasColumnName("max_cost");
            entity.Property(e => e.MinCost).HasColumnName("min_cost");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.SaleContractId).HasColumnName("sale_contract_id");
            entity.Property(e => e.SaleId).HasColumnName("sale_id");
            entity.Property(e => e.TypeId)
                .IsUnicode(false)
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payment");

            entity.ToTable("payment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Payment)
                .HasForeignKey<Payment>(d => d.Id)
                .HasConstraintName("FK_objects_payment");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payment_type");

            entity.ToTable("payment_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PaymentType)
                .HasForeignKey<PaymentType>(d => d.Id)
                .HasConstraintName("FK_objects_payment_type");
        });

        modelBuilder.Entity<PaymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payment_types");

            entity.ToTable("payment_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payments");

            entity.ToTable("payments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetId).HasColumnName("budget_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PayDate)
                .HasColumnType("datetime")
                .HasColumnName("pay_date");
            entity.Property(e => e.PaymentTypeId).HasColumnName("payment_type_id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Sum).HasColumnName("sum");
        });

        modelBuilder.Entity<PersonObjectLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_link");

            entity.ToTable("person_object_link");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonObjectLink)
                .HasForeignKey<PersonObjectLink>(d => d.Id)
                .HasConstraintName("FK_objects_person_object_link");
        });

        modelBuilder.Entity<PersonObjectLinkObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_link_objects");

            entity.ToTable("person_object_link_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CanDelete).HasColumnName("can_delete");
            entity.Property(e => e.CanEdit).HasColumnName("can_edit");
            entity.Property(e => e.ObjectCatalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonObjectId).HasColumnName("person_object_id");
            entity.Property(e => e.PersonObjectType)
                .IsUnicode(false)
                .HasColumnName("person_object_type");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SubjectType)
                .IsUnicode(false)
                .HasColumnName("subject_type");
        });

        modelBuilder.Entity<PersonObjectLinks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_links");

            entity.ToTable("person_object_links");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllCanCreate).HasColumnName("all_can_create");
            entity.Property(e => e.AllCanDelete).HasColumnName("all_can_delete");
            entity.Property(e => e.AllCanEdit).HasColumnName("all_can_edit");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectCatalog)
                .IsUnicode(false)
                .HasColumnName("object_catalog");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SubjectType)
                .IsUnicode(false)
                .HasColumnName("subject_type");
            entity.Property(e => e.Title)
                .IsUnicode(false)
                .HasColumnName("title");
        });

        modelBuilder.Entity<PersonObjectProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_profile");

            entity.ToTable("person_object_profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonObjectProfile)
                .HasForeignKey<PersonObjectProfile>(d => d.Id)
                .HasConstraintName("FK_objects_person_object_profile");
        });

        modelBuilder.Entity<PersonObjectProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_profiles");

            entity.ToTable("person_object_profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectCatalog)
                .HasColumnType("xml")
                .HasColumnName("object_catalog");
        });

        modelBuilder.Entity<PersonalChats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personal_chats");

            entity.ToTable("personal_chats");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ChatId).HasColumnName("chat_id");
            entity.Property(e => e.Confirmed).HasColumnName("confirmed");
            entity.Property(e => e.LastMessageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_message_date");
            entity.Property(e => e.LastMessageSenderId).HasColumnName("last_message_sender_id");
            entity.Property(e => e.LastMessageText)
                .IsUnicode(false)
                .HasColumnName("last_message_text");
            entity.Property(e => e.LastViewDate)
                .HasColumnType("datetime")
                .HasColumnName("last_view_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PartnerConfirmed).HasColumnName("partner_confirmed");
            entity.Property(e => e.PartnerFullname)
                .IsUnicode(false)
                .HasColumnName("partner_fullname");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerProhibited).HasColumnName("partner_prohibited");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Prohibited).HasColumnName("prohibited");
        });

        modelBuilder.Entity<PersonnelCommittee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_committee");

            entity.ToTable("personnel_committee");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonnelCommittee)
                .HasForeignKey<PersonnelCommittee>(d => d.Id)
                .HasConstraintName("FK_objects_personnel_committee");
        });

        modelBuilder.Entity<PersonnelCommittees>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_committees");

            entity.ToTable("personnel_committees");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CommitteeDate)
                .HasColumnType("datetime")
                .HasColumnName("committee_date");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParticipantsStatus)
                .IsUnicode(false)
                .HasColumnName("participants_status");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PersonnelReserve>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_reserve");

            entity.ToTable("personnel_reserve");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonnelReserve)
                .HasForeignKey<PersonnelReserve>(d => d.Id)
                .HasConstraintName("FK_objects_personnel_reserve");
        });

        modelBuilder.Entity<PersonnelReserves>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_reserves");

            entity.ToTable("personnel_reserves");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.ExclusionReasonId).HasColumnName("exclusion_reason_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IncludeReserveDate)
                .HasColumnType("datetime")
                .HasColumnName("include_reserve_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NominationId).HasColumnName("nomination_id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Place>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__place");

            entity.ToTable("place");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Place)
                .HasForeignKey<Place>(d => d.Id)
                .HasConstraintName("FK_objects_place");
        });

        modelBuilder.Entity<Places>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__places");

            entity.ToTable("places");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.TimezoneId).HasColumnName("timezone_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Plugin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__plugin");

            entity.ToTable("plugin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Plugin)
                .HasForeignKey<Plugin>(d => d.Id)
                .HasConstraintName("FK_objects_plugin");
        });

        modelBuilder.Entity<Plugins>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__plugins");

            entity.ToTable("plugins");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Block)
                .IsUnicode(false)
                .HasColumnName("block");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PluginId)
                .IsUnicode(false)
                .HasColumnName("plugin_id");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<Poll>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll");

            entity.ToTable("poll");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Poll)
                .HasForeignKey<Poll>(d => d.Id)
                .HasConstraintName("FK_objects_poll");
        });

        modelBuilder.Entity<PollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_procedure");

            entity.ToTable("poll_procedure");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PollProcedure)
                .HasForeignKey<PollProcedure>(d => d.Id)
                .HasConstraintName("FK_objects_poll_procedure");
        });

        modelBuilder.Entity<PollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_procedures");

            entity.ToTable("poll_procedures");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("end_date");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StrSubBossesIds)
                .IsUnicode(false)
                .HasColumnName("str_sub_bosses_ids");
            entity.Property(e => e.TriggerType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("trigger_type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebDisplay).HasColumnName("web_display");
        });

        modelBuilder.Entity<PollResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_result");

            entity.ToTable("poll_result");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PollResult)
                .HasForeignKey<PollResult>(d => d.Id)
                .HasConstraintName("FK_objects_poll_result");
        });

        modelBuilder.Entity<PollResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_results");

            entity.ToTable("poll_results");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.MainValue)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("main_value");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.PollProcedureId).HasColumnName("poll_procedure_id");
            entity.Property(e => e.QuestionId)
                .HasColumnType("xml")
                .HasColumnName("question_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Polls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__polls");

            entity.ToTable("polls");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsAnonymous).HasColumnName("is_anonymous");
            entity.Property(e => e.IsMain).HasColumnName("is_main");
            entity.Property(e => e.IsOneTime).HasColumnName("is_one_time");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position");

            entity.ToTable("position");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Position)
                .HasForeignKey<Position>(d => d.Id)
                .HasConstraintName("FK_objects_position");
        });

        modelBuilder.Entity<PositionAssessmentForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_assessment_form");

            entity.ToTable("position_assessment_form");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionAssessmentForm)
                .HasForeignKey<PositionAssessmentForm>(d => d.Id)
                .HasConstraintName("FK_objects_position_assessment_form");
        });

        modelBuilder.Entity<PositionAssessmentForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_assessment_forms");

            entity.ToTable("position_assessment_forms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.GradeId).HasColumnName("grade_id");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.Scale).HasColumnName("scale");
        });

        modelBuilder.Entity<PositionCommon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_common");

            entity.ToTable("position_common");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionCommon)
                .HasForeignKey<PositionCommon>(d => d.Id)
                .HasConstraintName("FK_objects_position_common");
        });

        modelBuilder.Entity<PositionCommonInstruction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_common_instruction");

            entity.ToTable("position_common_instruction");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionCommonInstruction)
                .HasForeignKey<PositionCommonInstruction>(d => d.Id)
                .HasConstraintName("FK_objects_position_common_instruction");
        });

        modelBuilder.Entity<PositionCommonInstructions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_common_instructions");

            entity.ToTable("position_common_instructions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionCommonName)
                .IsUnicode(false)
                .HasColumnName("position_common_name");
            entity.Property(e => e.SectionInstructionId).HasColumnName("section_instruction_id");
            entity.Property(e => e.SectionInstructionName)
                .IsUnicode(false)
                .HasColumnName("section_instruction_name");
        });

        modelBuilder.Entity<PositionCommons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_commons");

            entity.ToTable("position_commons");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowOutstaff).HasColumnName("allow_outstaff");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.MaxSalary).HasColumnName("max_salary");
            entity.Property(e => e.MinSalary).HasColumnName("min_salary");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentPositionCommonId)
                .HasColumnType("xml")
                .HasColumnName("parent_position_common_id");
            entity.Property(e => e.PositionFamilys)
                .IsUnicode(false)
                .HasColumnName("position_familys");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<PositionFamily>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_family");

            entity.ToTable("position_family");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionFamily)
                .HasForeignKey<PositionFamily>(d => d.Id)
                .HasConstraintName("FK_objects_position_family");
        });

        modelBuilder.Entity<PositionFamilys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_familys");

            entity.ToTable("position_familys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentPositionFamilyId).HasColumnName("parent_position_family_id");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PositionLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_level");

            entity.ToTable("position_level");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionLevel)
                .HasForeignKey<PositionLevel>(d => d.Id)
                .HasConstraintName("FK_objects_position_level");
        });

        modelBuilder.Entity<PositionLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_levels");

            entity.ToTable("position_levels");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Positions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__positions");

            entity.ToTable("positions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BasicCollaboratorFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("basic_collaborator_fullname");
            entity.Property(e => e.BasicCollaboratorId).HasColumnName("basic_collaborator_id");
            entity.Property(e => e.BasicRate).HasColumnName("basic_rate");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileId).HasColumnName("competence_profile_id");
            entity.Property(e => e.IsBoss).HasColumnName("is_boss");
            entity.Property(e => e.IsPositionFinished).HasColumnName("is_position_finished");
            entity.Property(e => e.KnowledgeProfileId).HasColumnName("knowledge_profile_id");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PositionAssignmentType)
                .IsUnicode(false)
                .HasColumnName("position_assignment_type");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionDate)
                .HasColumnType("datetime")
                .HasColumnName("position_date");
            entity.Property(e => e.PositionFinishDate)
                .HasColumnType("datetime")
                .HasColumnName("position_finish_date");
        });

        modelBuilder.Entity<PresenceState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__presence_state");

            entity.ToTable("presence_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PresenceState)
                .HasForeignKey<PresenceState>(d => d.Id)
                .HasConstraintName("FK_objects_presence_state");
        });

        modelBuilder.Entity<PresenceStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__presence_states");

            entity.ToTable("presence_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Accessible).HasColumnName("accessible");
            entity.Property(e => e.AllDay).HasColumnName("all_day");
            entity.Property(e => e.IsSubWorkTime).HasColumnName("is_sub_work_time");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.StateName)
                .IsUnicode(false)
                .HasColumnName("state_name");
            entity.Property(e => e.StyleCss)
                .IsUnicode(false)
                .HasColumnName("style_css");
        });

        modelBuilder.Entity<PrintForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__print_form");

            entity.ToTable("print_form");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PrintForm)
                .HasForeignKey<PrintForm>(d => d.Id)
                .HasConstraintName("FK_objects_print_form");
        });

        modelBuilder.Entity<PrintForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__print_forms");

            entity.ToTable("print_forms");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FileName)
                .IsUnicode(false)
                .HasColumnName("file_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<ProctoringSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__proctoring_system");

            entity.ToTable("proctoring_system");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProctoringSystem)
                .HasForeignKey<ProctoringSystem>(d => d.Id)
                .HasConstraintName("FK_objects_proctoring_system");
        });

        modelBuilder.Entity<ProctoringSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__proctoring_systems");

            entity.ToTable("proctoring_systems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ProfessionalArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professional_area");

            entity.ToTable("professional_area");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProfessionalArea)
                .HasForeignKey<ProfessionalArea>(d => d.Id)
                .HasConstraintName("FK_objects_professional_area");
        });

        modelBuilder.Entity<ProfessionalAreas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professional_areas");

            entity.ToTable("professional_areas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profile");

            entity.ToTable("profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Profile)
                .HasForeignKey<Profile>(d => d.Id)
                .HasConstraintName("FK_objects_profile");
        });

        modelBuilder.Entity<Profiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profiles");

            entity.ToTable("profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityCode)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("activity_code");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AgentJsonStr)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("agent_json_str");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<ProfilingRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profiling_record");

            entity.ToTable("profiling_record");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProfilingRecord)
                .HasForeignKey<ProfilingRecord>(d => d.Id)
                .HasConstraintName("FK_objects_profiling_record");
        });

        modelBuilder.Entity<ProfilingRecords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profiling_records");

            entity.ToTable("profiling_records");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ParentTemplateId).HasColumnName("parent_template_id");
            entity.Property(e => e.ParentTemplateType)
                .IsUnicode(false)
                .HasColumnName("parent_template_type");
            entity.Property(e => e.Sid)
                .IsUnicode(false)
                .HasColumnName("sid");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.TemplateType)
                .IsUnicode(false)
                .HasColumnName("template_type");
            entity.Property(e => e.Ticks).HasColumnName("ticks");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project");

            entity.ToTable("project");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Project)
                .HasForeignKey<Project>(d => d.Id)
                .HasConstraintName("FK_objects_project");
        });

        modelBuilder.Entity<ProjectParticipant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_participant");

            entity.ToTable("project_participant");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProjectParticipant)
                .HasForeignKey<ProjectParticipant>(d => d.Id)
                .HasConstraintName("FK_objects_project_participant");
        });

        modelBuilder.Entity<ProjectParticipants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_participants");

            entity.ToTable("project_participants");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Projects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__projects");

            entity.ToTable("projects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.EndDateFact)
                .HasColumnType("datetime")
                .HasColumnName("end_date_fact");
            entity.Property(e => e.EndDatePlan)
                .HasColumnType("datetime")
                .HasColumnName("end_date_plan");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.JoinMode)
                .IsUnicode(false)
                .HasColumnName("join_mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ResourceTypeId).HasColumnName("resource_type_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartDateFact)
                .HasColumnType("datetime")
                .HasColumnName("start_date_fact");
            entity.Property(e => e.StartDatePlan)
                .HasColumnType("datetime")
                .HasColumnName("start_date_plan");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Provider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__provider");

            entity.ToTable("provider");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Provider)
                .HasForeignKey<Provider>(d => d.Id)
                .HasConstraintName("FK_objects_provider");
        });

        modelBuilder.Entity<Providers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__providers");

            entity.ToTable("providers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DimensionId).HasColumnName("dimension_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ProviderProduct).HasColumnName("provider_product");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Pryce>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pryce");

            entity.ToTable("pryce");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Pryce)
                .HasForeignKey<Pryce>(d => d.Id)
                .HasConstraintName("FK_objects_pryce");
        });

        modelBuilder.Entity<Pryces>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pryces");

            entity.ToTable("pryces");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StateId)
                .IsUnicode(false)
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Qualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualification");

            entity.ToTable("qualification");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Qualification)
                .HasForeignKey<Qualification>(d => d.Id)
                .HasConstraintName("FK_objects_qualification");
        });

        modelBuilder.Entity<QualificationAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualification_assignment");

            entity.ToTable("qualification_assignment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.QualificationAssignment)
                .HasForeignKey<QualificationAssignment>(d => d.Id)
                .HasConstraintName("FK_objects_qualification_assignment");
        });

        modelBuilder.Entity<QualificationAssignments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualification_assignments");

            entity.ToTable("qualification_assignments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssignmentDate)
                .HasColumnType("datetime")
                .HasColumnName("assignment_date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("expiration_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.Reason)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Qualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualifications");

            entity.ToTable("qualifications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.JoinMode)
                .IsUnicode(false)
                .HasColumnName("join_mode");
            entity.Property(e => e.LevelId).HasColumnName("level_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.QualificationId)
                .HasColumnType("xml")
                .HasColumnName("qualification_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.YourselfStart).HasColumnName("yourself_start");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__rating");

            entity.ToTable("rating");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Rating)
                .HasForeignKey<Rating>(d => d.Id)
                .HasConstraintName("FK_objects_rating");
        });

        modelBuilder.Entity<Ratings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ratings");

            entity.ToTable("ratings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ExpertPersonFullname)
                .IsUnicode(false)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .IsUnicode(false)
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ReadinessLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__readiness_level");

            entity.ToTable("readiness_level");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ReadinessLevel)
                .HasForeignKey<ReadinessLevel>(d => d.Id)
                .HasConstraintName("FK_objects_readiness_level");
        });

        modelBuilder.Entity<ReadinessLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__readiness_levels");

            entity.ToTable("readiness_levels");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Recommendation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommendation");

            entity.ToTable("recommendation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Recommendation)
                .HasForeignKey<Recommendation>(d => d.Id)
                .HasConstraintName("FK_objects_recommendation");
        });

        modelBuilder.Entity<Recommendations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommendations");

            entity.ToTable("recommendations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Email)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Fullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.MobilePhone)
                .IsUnicode(false)
                .HasColumnName("mobile_phone");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Phone)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.SrcPersonFullname)
                .IsUnicode(false)
                .HasColumnName("src_person_fullname");
            entity.Property(e => e.SrcPersonId).HasColumnName("src_person_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .IsUnicode(false)
                .HasColumnName("vacancy_name");
            entity.Property(e => e.WorkPhone)
                .IsUnicode(false)
                .HasColumnName("work_phone");
        });

        modelBuilder.Entity<RecruitmentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_method");

            entity.ToTable("recruitment_method");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecruitmentMethod)
                .HasForeignKey<RecruitmentMethod>(d => d.Id)
                .HasConstraintName("FK_objects_recruitment_method");
        });

        modelBuilder.Entity<RecruitmentMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_methods");

            entity.ToTable("recruitment_methods");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<RecruitmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_plan");

            entity.ToTable("recruitment_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecruitmentPlan)
                .HasForeignKey<RecruitmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_recruitment_plan");
        });

        modelBuilder.Entity<RecruitmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_plans");

            entity.ToTable("recruitment_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionFamilyId).HasColumnName("position_family_id");
            entity.Property(e => e.PositionName)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.PositionType)
                .IsUnicode(false)
                .HasColumnName("position_type");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.State)
                .IsUnicode(false)
                .HasColumnName("state");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyTypeId).HasColumnName("vacancy_type_id");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__region");

            entity.ToTable("region");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Region)
                .HasForeignKey<Region>(d => d.Id)
                .HasConstraintName("FK_objects_region");
        });

        modelBuilder.Entity<Regions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__regions");

            entity.ToTable("regions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
        });

        modelBuilder.Entity<RemoteAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_action");

            entity.ToTable("remote_action");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteAction)
                .HasForeignKey<RemoteAction>(d => d.Id)
                .HasConstraintName("FK_objects_remote_action");
        });

        modelBuilder.Entity<RemoteActions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_actions");

            entity.ToTable("remote_actions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
        });

        modelBuilder.Entity<RemoteCollection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_collection");

            entity.ToTable("remote_collection");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteCollection)
                .HasForeignKey<RemoteCollection>(d => d.Id)
                .HasConstraintName("FK_objects_remote_collection");
        });

        modelBuilder.Entity<RemoteCollections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_collections");

            entity.ToTable("remote_collections");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .IsUnicode(false)
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<RemoteSecurityProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_security_profile");

            entity.ToTable("remote_security_profile");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteSecurityProfile)
                .HasForeignKey<RemoteSecurityProfile>(d => d.Id)
                .HasConstraintName("FK_objects_remote_security_profile");
        });

        modelBuilder.Entity<RemoteSecurityProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_security_profiles");

            entity.ToTable("remote_security_profiles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Repositorium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositorium");

            entity.ToTable("repositorium");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Repositorium)
                .HasForeignKey<Repositorium>(d => d.Id)
                .HasConstraintName("FK_objects_repositorium");
        });

        modelBuilder.Entity<RepositoriumAuthors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositorium_authors");

            entity.ToTable("repositorium_authors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RepositoriumId).HasColumnName("repositorium_id");
            entity.Property(e => e.RepositoriumName)
                .IsUnicode(false)
                .HasColumnName("repositorium_name");
        });

        modelBuilder.Entity<RepositoriumResources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositorium_resources");

            entity.ToTable("repositorium_resources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.RepositoriumId).HasColumnName("repositorium_id");
            entity.Property(e => e.RepositoriumName)
                .IsUnicode(false)
                .HasColumnName("repositorium_name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<Repositoriums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositoriums");

            entity.ToTable("repositoriums");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorsCount).HasColumnName("authors_count");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Reprimand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimand");

            entity.ToTable("reprimand");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Reprimand)
                .HasForeignKey<Reprimand>(d => d.Id)
                .HasConstraintName("FK_objects_reprimand");
        });

        modelBuilder.Entity<ReprimandType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimand_type");

            entity.ToTable("reprimand_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ReprimandType)
                .HasForeignKey<ReprimandType>(d => d.Id)
                .HasConstraintName("FK_objects_reprimand_type");
        });

        modelBuilder.Entity<ReprimandTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimand_types");

            entity.ToTable("reprimand_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Reprimands>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimands");

            entity.ToTable("reprimands");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ReprimandTypeId).HasColumnName("reprimand_type_id");
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request");

            entity.ToTable("request");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Request)
                .HasForeignKey<Request>(d => d.Id)
                .HasConstraintName("FK_objects_request");
        });

        modelBuilder.Entity<RequestCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request_collaborators");

            entity.ToTable("request_collaborators");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.IsGroup).HasColumnName("is_group");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.RequestTypeId).HasColumnName("request_type_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<RequestType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request_type");

            entity.ToTable("request_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RequestType)
                .HasForeignKey<RequestType>(d => d.Id)
                .HasConstraintName("FK_objects_request_type");
        });

        modelBuilder.Entity<RequestTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request_types");

            entity.ToTable("request_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .IsUnicode(false)
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsGroup).HasColumnName("is_group");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Requests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__requests");

            entity.ToTable("requests");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CloseDate)
                .HasColumnType("datetime")
                .HasColumnName("close_date");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsGroup).HasColumnName("is_group");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.RequestTypeId).HasColumnName("request_type_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.TagId)
                .HasColumnType("xml")
                .HasColumnName("tag_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resource");

            entity.ToTable("resource");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Resource)
                .HasForeignKey<Resource>(d => d.Id)
                .HasConstraintName("FK_objects_resource");
        });

        modelBuilder.Entity<ResourceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resource_type");

            entity.ToTable("resource_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ResourceType)
                .HasForeignKey<ResourceType>(d => d.Id)
                .HasConstraintName("FK_objects_resource_type");
        });

        modelBuilder.Entity<ResourceTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resource_types");

            entity.ToTable("resource_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Resources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resources");

            entity.ToTable("resources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowDownload).HasColumnName("allow_download");
            entity.Property(e => e.AllowSearch).HasColumnName("allow_search");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Checksum)
                .IsUnicode(false)
                .HasColumnName("checksum");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.FileName)
                .IsUnicode(false)
                .HasColumnName("file_name");
            entity.Property(e => e.FilePath)
                .IsUnicode(false)
                .HasColumnName("file_path");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ResourceTypeId).HasColumnName("resource_type_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UseCount).HasColumnName("use_count");
        });

        modelBuilder.Entity<Response>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response");

            entity.ToTable("response");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Response)
                .HasForeignKey<Response>(d => d.Id)
                .HasConstraintName("FK_objects_response");
        });

        modelBuilder.Entity<ResponseType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response_type");

            entity.ToTable("response_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ResponseType)
                .HasForeignKey<ResponseType>(d => d.Id)
                .HasConstraintName("FK_objects_response_type");
        });

        modelBuilder.Entity<ResponseTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response_types");

            entity.ToTable("response_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .IsUnicode(false)
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Responses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__responses");

            entity.ToTable("responses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.ResponseTypeId).HasColumnName("response_type_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Resume>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resume");

            entity.ToTable("resume");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Resume)
                .HasForeignKey<Resume>(d => d.Id)
                .HasConstraintName("FK_objects_resume");
        });

        modelBuilder.Entity<ResumeSkills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resume_skills");

            entity.ToTable("resume_skills");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatorPersonFullname)
                .IsUnicode(false)
                .HasColumnName("creator_person_fullname");
            entity.Property(e => e.CreatorPersonId).HasColumnName("creator_person_id");
            entity.Property(e => e.LevelId)
                .IsUnicode(false)
                .HasColumnName("level_id");
            entity.Property(e => e.LevelName)
                .IsUnicode(false)
                .HasColumnName("level_name");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPosition)
                .IsUnicode(false)
                .HasColumnName("person_position");
            entity.Property(e => e.ResumeId).HasColumnName("resume_id");
            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.SkillIdWithLevels).HasColumnName("skill_id_with_levels");
            entity.Property(e => e.SkillName)
                .IsUnicode(false)
                .HasColumnName("skill_name");
        });

        modelBuilder.Entity<Resumes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resumes");

            entity.ToTable("resumes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("birth_date");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorPersonFullname)
                .IsUnicode(false)
                .HasColumnName("creator_person_fullname");
            entity.Property(e => e.CreatorPersonId).HasColumnName("creator_person_id");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.EducTypeId)
                .HasColumnType("xml")
                .HasColumnName("educ_type_id");
            entity.Property(e => e.Education)
                .IsUnicode(false)
                .HasColumnName("education");
            entity.Property(e => e.Email)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.EmploymentTypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("employment_type_id");
            entity.Property(e => e.ExpYears).HasColumnName("exp_years");
            entity.Property(e => e.FamilyStatus)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("family_status");
            entity.Property(e => e.FillingType)
                .IsUnicode(false)
                .HasColumnName("filling_type");
            entity.Property(e => e.ForbidPortalDelete).HasColumnName("forbid_portal_delete");
            entity.Property(e => e.IsArchive).HasColumnName("is_archive");
            entity.Property(e => e.IsCandidate).HasColumnName("is_candidate");
            entity.Property(e => e.LngId)
                .HasColumnType("xml")
                .HasColumnName("lng_id");
            entity.Property(e => e.MainEducTypeId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("main_educ_type_id");
            entity.Property(e => e.MaxWage).HasColumnName("max_wage");
            entity.Property(e => e.MinWage).HasColumnName("min_wage");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPosition)
                .IsUnicode(false)
                .HasColumnName("person_position");
            entity.Property(e => e.PersonSubdivision)
                .IsUnicode(false)
                .HasColumnName("person_subdivision");
            entity.Property(e => e.ProfessionArea)
                .IsUnicode(false)
                .HasColumnName("profession_area");
            entity.Property(e => e.ProfessionAreaId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("profession_area_id");
            entity.Property(e => e.ProfessionId).HasColumnName("profession_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ScheduleWorkId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("schedule_work_id");
            entity.Property(e => e.Sex)
                .IsUnicode(false)
                .HasColumnName("sex");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancySourceId).HasColumnName("vacancy_source_id");
        });

        modelBuilder.Entity<RiskLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_level");

            entity.ToTable("risk_level");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RiskLevel)
                .HasForeignKey<RiskLevel>(d => d.Id)
                .HasConstraintName("FK_objects_risk_level");
        });

        modelBuilder.Entity<RiskLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_levels");

            entity.ToTable("risk_levels");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<RiskPerspective>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_perspective");

            entity.ToTable("risk_perspective");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RiskPerspective)
                .HasForeignKey<RiskPerspective>(d => d.Id)
                .HasConstraintName("FK_objects_risk_perspective");
        });

        modelBuilder.Entity<RiskPerspectives>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_perspectives");

            entity.ToTable("risk_perspectives");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__role");

            entity.ToTable("role");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Role)
                .HasForeignKey<Role>(d => d.Id)
                .HasConstraintName("FK_objects_role");
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__roles");

            entity.ToTable("roles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentRoleId).HasColumnName("parent_role_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<SalarySurvey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_survey");

            entity.ToTable("salary_survey");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SalarySurvey)
                .HasForeignKey<SalarySurvey>(d => d.Id)
                .HasConstraintName("FK_objects_salary_survey");
        });

        modelBuilder.Entity<SalarySurveySource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_survey_source");

            entity.ToTable("salary_survey_source");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SalarySurveySource)
                .HasForeignKey<SalarySurveySource>(d => d.Id)
                .HasConstraintName("FK_objects_salary_survey_source");
        });

        modelBuilder.Entity<SalarySurveySources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_survey_sources");

            entity.ToTable("salary_survey_sources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SalarySurveys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_surveys");

            entity.ToTable("salary_surveys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AvgSalary).HasColumnName("avg_salary");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.MaxSalary).HasColumnName("max_salary");
            entity.Property(e => e.MinSalary).HasColumnName("min_salary");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionLevelId).HasColumnName("position_level_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("position_name");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.SalarySurveySourceId).HasColumnName("salary_survey_source_id");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale");

            entity.ToTable("sale");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Sale)
                .HasForeignKey<Sale>(d => d.Id)
                .HasConstraintName("FK_objects_sale");
        });

        modelBuilder.Entity<SaleContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_contract");

            entity.ToTable("sale_contract");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SaleContract)
                .HasForeignKey<SaleContract>(d => d.Id)
                .HasConstraintName("FK_objects_sale_contract");
        });

        modelBuilder.Entity<SaleContracts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_contracts");

            entity.ToTable("sale_contracts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllActSigned).HasColumnName("all_act_signed");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ContractSigned).HasColumnName("contract_signed");
            entity.Property(e => e.CostCurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("cost_currency_type_id");
            entity.Property(e => e.CostValue).HasColumnName("cost_value");
            entity.Property(e => e.DateSignature)
                .HasColumnType("datetime")
                .HasColumnName("date_signature");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentSaleContractId).HasColumnName("parent_sale_contract_id");
            entity.Property(e => e.SaleId).HasColumnName("sale_id");
            entity.Property(e => e.SerialNumber)
                .IsUnicode(false)
                .HasColumnName("serial_number");
        });

        modelBuilder.Entity<SaleStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_status");

            entity.ToTable("sale_status");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SaleStatus)
                .HasForeignKey<SaleStatus>(d => d.Id)
                .HasConstraintName("FK_objects_sale_status");
        });

        modelBuilder.Entity<SaleStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_statuss");

            entity.ToTable("sale_statuss");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Sales>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sales");

            entity.ToTable("sales");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ClientManagerId).HasColumnName("client_manager_id");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ScheduleDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_day");

            entity.ToTable("schedule_day");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ScheduleDay)
                .HasForeignKey<ScheduleDay>(d => d.Id)
                .HasConstraintName("FK_objects_schedule_day");
        });

        modelBuilder.Entity<ScheduleDays>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_days");

            entity.ToTable("schedule_days");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.FinishTime)
                .IsUnicode(false)
                .HasColumnName("finish_time");
            entity.Property(e => e.ScheduleTypeId).HasColumnName("schedule_type_id");
            entity.Property(e => e.ScheduleTypeName)
                .IsUnicode(false)
                .HasColumnName("schedule_type_name");
            entity.Property(e => e.StartTime)
                .IsUnicode(false)
                .HasColumnName("start_time");
        });

        modelBuilder.Entity<ScheduleType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_type");

            entity.ToTable("schedule_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ScheduleType)
                .HasForeignKey<ScheduleType>(d => d.Id)
                .HasConstraintName("FK_objects_schedule_type");
        });

        modelBuilder.Entity<ScheduleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_types");

            entity.ToTable("schedule_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ScriptQueueElem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__script_queue_elem");

            entity.ToTable("script_queue_elem");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ScriptQueueElem)
                .HasForeignKey<ScriptQueueElem>(d => d.Id)
                .HasConstraintName("FK_objects_script_queue_elem");
        });

        modelBuilder.Entity<ScriptQueueElems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__script_queue_elems");

            entity.ToTable("script_queue_elems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Block)
                .IsUnicode(false)
                .HasColumnName("block");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.Delay).HasColumnName("delay");
            entity.Property(e => e.DeleteAutomatically).HasColumnName("delete_automatically");
            entity.Property(e => e.FinishTime)
                .HasColumnType("datetime")
                .HasColumnName("finish_time");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartTime)
                .HasColumnType("datetime")
                .HasColumnName("start_time");
        });

        modelBuilder.Entity<SectionInstruction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__section_instruction");

            entity.ToTable("section_instruction");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SectionInstruction)
                .HasForeignKey<SectionInstruction>(d => d.Id)
                .HasConstraintName("FK_objects_section_instruction");
        });

        modelBuilder.Entity<SectionInstructions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__section_instructions");

            entity.ToTable("section_instructions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
        });

        modelBuilder.Entity<SelectedResume>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_resume");

            entity.ToTable("selected_resume");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SelectedResume)
                .HasForeignKey<SelectedResume>(d => d.Id)
                .HasConstraintName("FK_objects_selected_resume");
        });

        modelBuilder.Entity<SelectedResumes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_resumes");

            entity.ToTable("selected_resumes");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResumeId).HasColumnName("resume_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SelectedVacancy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_vacancy");

            entity.ToTable("selected_vacancy");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SelectedVacancy)
                .HasForeignKey<SelectedVacancy>(d => d.Id)
                .HasConstraintName("FK_objects_selected_vacancy");
        });

        modelBuilder.Entity<SelectedVacancys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_vacancys");

            entity.ToTable("selected_vacancys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .IsUnicode(false)
                .HasColumnName("vacancy_name");
        });

        modelBuilder.Entity<ServerAgent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__server_agent");

            entity.ToTable("server_agent");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ServerAgent)
                .HasForeignKey<ServerAgent>(d => d.Id)
                .HasConstraintName("FK_objects_server_agent");
        });

        modelBuilder.Entity<ServerAgents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__server_agents");

            entity.ToTable("server_agents");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllDay).HasColumnName("all_day");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Block)
                .IsUnicode(false)
                .HasColumnName("block");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.FinishTime)
                .IsUnicode(false)
                .HasColumnName("finish_time");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LastRunDate)
                .HasColumnType("datetime")
                .HasColumnName("last_run_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.StartDay).HasColumnName("start_day");
            entity.Property(e => e.StartTime)
                .IsUnicode(false)
                .HasColumnName("start_time");
            entity.Property(e => e.StartWeekDay).HasColumnName("start_week_day");
            entity.Property(e => e.TriggerType)
                .IsUnicode(false)
                .HasColumnName("trigger_type");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__site");

            entity.ToTable("site");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Site)
                .HasForeignKey<Site>(d => d.Id)
                .HasConstraintName("FK_objects_site");
        });

        modelBuilder.Entity<SiteOwnerObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__site_owner_objects");

            entity.ToTable("site_owner_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CatalogName)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
        });

        modelBuilder.Entity<Sites>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sites");

            entity.ToTable("sites");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LngId)
                .IsUnicode(false)
                .HasColumnName("lng_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OwnerObject)
                .HasColumnType("xml")
                .HasColumnName("owner_object");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
        });

        modelBuilder.Entity<Skill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__skill");

            entity.ToTable("skill");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Skill)
                .HasForeignKey<Skill>(d => d.Id)
                .HasConstraintName("FK_objects_skill");
        });

        modelBuilder.Entity<Skills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__skills");

            entity.ToTable("skills");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UseParentLevels).HasColumnName("use_parent_levels");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SocialEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__social_entrys");

            entity.ToTable("social_entrys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.CatalogName)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.LikeId).HasColumnName("like_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<SpxmlBlobs>(entity =>
        {
            entity.HasKey(e => e.Url);

            entity.ToTable("(spxml_blobs)");

            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data).HasColumnName("data");
            entity.Property(e => e.Ext)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComputedColumnSql("(reverse(substring(reverse([url]),(1),charindex('.',reverse([url])))))", true)
                .HasColumnName("ext");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Hashdata)
                .HasComputedColumnSql("([dbo].[hashdata]('SHA1',[data]))", true)
                .HasColumnName("hashdata");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");
        });

        modelBuilder.Entity<SpxmlForeignArrays>(entity =>
        {
            entity.HasKey(e => new { e.Catalog, e.CatalogElem, e.Name }).HasName("PK_(spxml_foreign_arrays)_1");

            entity.ToTable("(spxml_foreign_arrays)");

            entity.Property(e => e.Catalog)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.CatalogElem)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("catalog_elem");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ForeignArray)
                .HasMaxLength(96)
                .IsUnicode(false)
                .HasColumnName("foreign_array");
        });

        modelBuilder.Entity<SpxmlMetadata>(entity =>
        {
            entity.HasKey(e => new { e.Schema, e.Form }).HasName("PK_spxml_metadata");

            entity.ToTable("(spxml_metadata)");

            entity.Property(e => e.Schema)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("schema");
            entity.Property(e => e.Form)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("form");
            entity.Property(e => e.DocList).HasColumnName("doc_list");
            entity.Property(e => e.FtIdx).HasColumnName("ft_idx");
            entity.Property(e => e.Hash)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("hash");
            entity.Property(e => e.ParentIdElem)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("parent_id_elem");
            entity.Property(e => e.PrimaryKey)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("primary_key");
            entity.Property(e => e.SingleTenant).HasColumnName("single_tenant");
            entity.Property(e => e.SpxmlForm)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("spxml_form");
            entity.Property(e => e.SpxmlFormElem)
                .HasMaxLength(96)
                .IsUnicode(false)
                .HasColumnName("spxml_form_elem");
            entity.Property(e => e.SpxmlFormType).HasColumnName("spxml_form_type");
            entity.Property(e => e.Tablename)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("tablename");
        });

        modelBuilder.Entity<SpxmlObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_spxml_objects");

            entity.ToTable("(spxml_objects)");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Form)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("form");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");
            entity.Property(e => e.SpxmlForm)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("spxml_form");
        });

        modelBuilder.Entity<Statement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement");

            entity.ToTable("statement");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Statement)
                .HasForeignKey<Statement>(d => d.Id)
                .HasConstraintName("FK_objects_statement");
        });

        modelBuilder.Entity<Statements>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statements");

            entity.ToTable("statements");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityCode)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("activity_code");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AgentJsonStr)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("agent_json_str");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateTicks).HasColumnName("create_ticks");
            entity.Property(e => e.LearningStorageId).HasColumnName("learning_storage_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Registration)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("registration");
            entity.Property(e => e.StatementRefId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("statement_ref_id");
            entity.Property(e => e.VerbId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("verb_id");
            entity.Property(e => e.VerbName)
                .IsUnicode(false)
                .HasColumnName("verb_name");
            entity.Property(e => e.Voited).HasColumnName("voited");
        });

        modelBuilder.Entity<StatisticData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_data");

            entity.ToTable("statistic_data");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatisticData)
                .HasForeignKey<StatisticData>(d => d.Id)
                .HasConstraintName("FK_objects_statistic_data");
        });

        modelBuilder.Entity<StatisticDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_datas");

            entity.ToTable("statistic_datas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditinalInfo)
                .IsUnicode(false)
                .HasColumnName("additinal_info");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PeriodDay).HasColumnName("period_day");
            entity.Property(e => e.PeriodHour).HasColumnName("period_hour");
            entity.Property(e => e.PeriodMinute).HasColumnName("period_minute");
            entity.Property(e => e.PeriodMonth).HasColumnName("period_month");
            entity.Property(e => e.PeriodQuarter).HasColumnName("period_quarter");
            entity.Property(e => e.PeriodType)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("period_type");
            entity.Property(e => e.PeriodYear).HasColumnName("period_year");
            entity.Property(e => e.StatisticDate)
                .HasColumnType("datetime")
                .HasColumnName("statistic_date");
            entity.Property(e => e.StatisticRecId).HasColumnName("statistic_rec_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.ValueDate)
                .HasColumnType("datetime")
                .HasColumnName("value_date");
            entity.Property(e => e.ValueStr)
                .IsUnicode(false)
                .HasColumnName("value_str");
        });

        modelBuilder.Entity<StatisticRec>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_rec");

            entity.ToTable("statistic_rec");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatisticRec)
                .HasForeignKey<StatisticRec>(d => d.Id)
                .HasConstraintName("FK_objects_statistic_rec");
        });

        modelBuilder.Entity<StatisticRecs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_recs");

            entity.ToTable("statistic_recs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AutoCalc).HasColumnName("auto_calc");
            entity.Property(e => e.CalcPeriod).HasColumnName("calc_period");
            entity.Property(e => e.Catalog)
                .HasColumnType("xml")
                .HasColumnName("catalog");
            entity.Property(e => e.CatalogName)
                .IsUnicode(false)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Depth).HasColumnName("depth");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LastCalculateDate)
                .HasColumnType("datetime")
                .HasColumnName("last_calculate_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.NormFrom).HasColumnName("norm_from");
            entity.Property(e => e.NormTo).HasColumnName("norm_to");
            entity.Property(e => e.NotificationTypeId).HasColumnName("notification_type_id");
            entity.Property(e => e.PeriodCalcType)
                .IsUnicode(false)
                .HasColumnName("period_calc_type");
            entity.Property(e => e.PeriodType)
                .HasColumnType("xml")
                .HasColumnName("period_type");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<Subdivision>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision");

            entity.ToTable("subdivision");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Subdivision)
                .HasForeignKey<Subdivision>(d => d.Id)
                .HasConstraintName("FK_objects_subdivision");
        });

        modelBuilder.Entity<SubdivisionGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision_group");

            entity.ToTable("subdivision_group");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SubdivisionGroup)
                .HasForeignKey<SubdivisionGroup>(d => d.Id)
                .HasConstraintName("FK_objects_subdivision_group");
        });

        modelBuilder.Entity<SubdivisionGroupSubdivisions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision_group_subdivisions");

            entity.ToTable("subdivision_group_subdivisions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .IsUnicode(false)
                .HasColumnName("subdivision_name");
        });

        modelBuilder.Entity<SubdivisionGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision_groups");

            entity.ToTable("subdivision_groups");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Subdivisions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivisions");

            entity.ToTable("subdivisions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.IsDisbanded).HasColumnName("is_disbanded");
            entity.Property(e => e.IsFaculty).HasColumnName("is_faculty");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Submission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission");

            entity.ToTable("submission");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Submission)
                .HasForeignKey<Submission>(d => d.Id)
                .HasConstraintName("FK_objects_submission");
        });

        modelBuilder.Entity<SubmissionRecipients>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission_recipients");

            entity.ToTable("submission_recipients");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.SubmissionTypeId).HasColumnName("submission_type_id");
            entity.Property(e => e.SubmissionTypeName)
                .IsUnicode(false)
                .HasColumnName("submission_type_name");
        });

        modelBuilder.Entity<SubmissionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission_type");

            entity.ToTable("submission_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SubmissionType)
                .HasForeignKey<SubmissionType>(d => d.Id)
                .HasConstraintName("FK_objects_submission_type");
        });

        modelBuilder.Entity<SubmissionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission_types");

            entity.ToTable("submission_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PeriodityId)
                .IsUnicode(false)
                .HasColumnName("periodity_id");
        });

        modelBuilder.Entity<Submissions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submissions");

            entity.ToTable("submissions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PeriodDateFinish)
                .HasColumnType("datetime")
                .HasColumnName("period_date_finish");
            entity.Property(e => e.PeriodDateStart)
                .HasColumnType("datetime")
                .HasColumnName("period_date_start");
            entity.Property(e => e.PersonCode)
                .IsUnicode(false)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .IsUnicode(false)
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .IsUnicode(false)
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PhaseId).HasColumnName("phase_id");
            entity.Property(e => e.PhaseName)
                .IsUnicode(false)
                .HasColumnName("phase_name");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.SubmissionTypeId).HasColumnName("submission_type_id");
            entity.Property(e => e.SubmissionTypeName)
                .IsUnicode(false)
                .HasColumnName("submission_type_name");
        });

        modelBuilder.Entity<Subs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subs");

            entity.ToTable("subs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BasicCollaboratorFullname)
                .IsUnicode(false)
                .HasColumnName("basic_collaborator_fullname");
            entity.Property(e => e.BasicCollaboratorId).HasColumnName("basic_collaborator_id");
            entity.Property(e => e.IsBoss).HasColumnName("is_boss");
            entity.Property(e => e.IsDisbanded).HasColumnName("is_disbanded");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subscription");

            entity.ToTable("subscription");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Subscription)
                .HasForeignKey<Subscription>(d => d.Id)
                .HasConstraintName("FK_objects_subscription");
        });

        modelBuilder.Entity<Subscriptions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subscriptions");

            entity.ToTable("subscriptions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.DateLastAction)
                .HasColumnType("datetime")
                .HasColumnName("date_last_action");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.IncludeSubdocs).HasColumnName("include_subdocs");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Substitution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitution");

            entity.ToTable("substitution");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Substitution)
                .HasForeignKey<Substitution>(d => d.Id)
                .HasConstraintName("FK_objects_substitution");
        });

        modelBuilder.Entity<SubstitutionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitution_type");

            entity.ToTable("substitution_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SubstitutionType)
                .HasForeignKey<SubstitutionType>(d => d.Id)
                .HasConstraintName("FK_objects_substitution_type");
        });

        modelBuilder.Entity<SubstitutionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitution_types");

            entity.ToTable("substitution_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<Substitutions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitutions");

            entity.ToTable("substitutions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .IsUnicode(false)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubstitutionTypeId).HasColumnName("substitution_type_id");
        });

        modelBuilder.Entity<Successor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__successor");

            entity.ToTable("successor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Successor)
                .HasForeignKey<Successor>(d => d.Id)
                .HasConstraintName("FK_objects_successor");
        });

        modelBuilder.Entity<Successors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__successors");

            entity.ToTable("successors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.KeyPersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("key_person_fullname");
            entity.Property(e => e.KeyPersonId).HasColumnName("key_person_id");
            entity.Property(e => e.KeyPositionId).HasColumnName("key_position_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.ReadinessLevelId).HasColumnName("readiness_level_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SupplementaryQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__supplementary_question");

            entity.ToTable("supplementary_question");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SupplementaryQuestion)
                .HasForeignKey<SupplementaryQuestion>(d => d.Id)
                .HasConstraintName("FK_objects_supplementary_question");
        });

        modelBuilder.Entity<SupplementaryQuestions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__supplementary_questions");

            entity.ToTable("supplementary_questions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Section)
                .IsUnicode(false)
                .HasColumnName("section");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SystemEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__system_event");

            entity.ToTable("system_event");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SystemEvent)
                .HasForeignKey<SystemEvent>(d => d.Id)
                .HasConstraintName("FK_objects_system_event");
        });

        modelBuilder.Entity<SystemEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__system_events");

            entity.ToTable("system_events");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tag");

            entity.ToTable("tag");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Tag)
                .HasForeignKey<Tag>(d => d.Id)
                .HasConstraintName("FK_objects_tag");
        });

        modelBuilder.Entity<TaggedObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tagged_objects");

            entity.ToTable("tagged_objects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.DocCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("doc_create_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.TagName)
                .IsUnicode(false)
                .HasColumnName("tag_name");
        });

        modelBuilder.Entity<Tags>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tags");

            entity.ToTable("tags");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .IsUnicode(false)
                .HasColumnName("experts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TalentPoolFuncManagers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__talent_pool_func_managers");

            entity.ToTable("talent_pool_func_managers");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("catalog");
            entity.Property(e => e.IsNative).HasColumnName("is_native");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<TalentPoolNomination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__talent_pool_nomination");

            entity.ToTable("talent_pool_nomination");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TalentPoolNomination)
                .HasForeignKey<TalentPoolNomination>(d => d.Id)
                .HasConstraintName("FK_objects_talent_pool_nomination");
        });

        modelBuilder.Entity<TalentPoolNominations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__talent_pool_nominations");

            entity.ToTable("talent_pool_nominations");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__task");

            entity.ToTable("task");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Task)
                .HasForeignKey<Task>(d => d.Id)
                .HasConstraintName("FK_objects_task");
        });

        modelBuilder.Entity<TaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__task_type");

            entity.ToTable("task_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TaskType)
                .HasForeignKey<TaskType>(d => d.Id)
                .HasConstraintName("FK_objects_task_type");
        });

        modelBuilder.Entity<TaskTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__task_types");

            entity.ToTable("task_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Tasks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tasks");

            entity.ToTable("tasks");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssignerId).HasColumnName("assigner_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.DateFact)
                .HasColumnType("datetime")
                .HasColumnName("date_fact");
            entity.Property(e => e.DatePlan)
                .HasColumnType("datetime")
                .HasColumnName("date_plan");
            entity.Property(e => e.EndDatePlan)
                .HasColumnType("datetime")
                .HasColumnName("end_date_plan");
            entity.Property(e => e.ExecutorId).HasColumnName("executor_id");
            entity.Property(e => e.ExecutorType)
                .IsUnicode(false)
                .HasColumnName("executor_type");
            entity.Property(e => e.ExpertId)
                .HasColumnType("xml")
                .HasColumnName("expert_id");
            entity.Property(e => e.FactObjectId).HasColumnName("fact_object_id");
            entity.Property(e => e.FactObjectType)
                .IsUnicode(false)
                .HasColumnName("fact_object_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ParentTaskId).HasColumnName("parent_task_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.SourceObjectId).HasColumnName("source_object_id");
            entity.Property(e => e.SourceObjectType)
                .IsUnicode(false)
                .HasColumnName("source_object_type");
            entity.Property(e => e.StartDatePlan)
                .HasColumnType("datetime")
                .HasColumnName("start_date_plan");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.TargetObjectId).HasColumnName("target_object_id");
            entity.Property(e => e.TargetObjectType)
                .IsUnicode(false)
                .HasColumnName("target_object_type");
            entity.Property(e => e.TaskTypeId).HasColumnName("task_type_id");
            entity.Property(e => e.TranslatedTargetId).HasColumnName("translated_target_id");
            entity.Property(e => e.TranslatedTargetType)
                .IsUnicode(false)
                .HasColumnName("translated_target_type");
            entity.Property(e => e.TranslatedTaskId).HasColumnName("translated_task_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<Tenancy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tenancy");

            entity.ToTable("tenancy");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Tenancy)
                .HasForeignKey<Tenancy>(d => d.Id)
                .HasConstraintName("FK_objects_tenancy");
        });

        modelBuilder.Entity<Tenancys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tenancys");

            entity.ToTable("tenancys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreatorFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("creator_fullname");
            entity.Property(e => e.CreatorId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("creator_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("datetime")
                .HasColumnName("finish_date");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("org_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<TestLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_learning");

            entity.ToTable("test_learning");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TestLearning)
                .HasForeignKey<TestLearning>(d => d.Id)
                .HasConstraintName("FK_objects_test_learning");
        });

        modelBuilder.Entity<TestLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_learnings");

            entity.ToTable("test_learnings");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveTestLearningId).HasColumnName("active_test_learning_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.AssessmentName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("assessment_name");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("datetime")
                .HasColumnName("max_end_date");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .IsUnicode(false)
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QuestionAnsweredNum).HasColumnName("question_answered_num");
            entity.Property(e => e.QuestionNum).HasColumnName("question_num");
            entity.Property(e => e.QuestionPassedNum).HasColumnName("question_passed_num");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("datetime")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("datetime")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.TextResult)
                .IsUnicode(false)
                .HasColumnName("text_result");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TestProject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_project");

            entity.ToTable("test_project");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TestProject)
                .HasForeignKey<TestProject>(d => d.Id)
                .HasConstraintName("FK_objects_test_project");
        });

        modelBuilder.Entity<TestProjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_projects");

            entity.ToTable("test_projects");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<TestingSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__testing_system");

            entity.ToTable("testing_system");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TestingSystem)
                .HasForeignKey<TestingSystem>(d => d.Id)
                .HasConstraintName("FK_objects_testing_system");
        });

        modelBuilder.Entity<TestingSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__testing_systems");

            entity.ToTable("testing_systems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TrainingPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__training_plan");

            entity.ToTable("training_plan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TrainingPlan)
                .HasForeignKey<TrainingPlan>(d => d.Id)
                .HasConstraintName("FK_objects_training_plan");
        });

        modelBuilder.Entity<TrainingPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__training_plans");

            entity.ToTable("training_plans");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TraningOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__traning_order");

            entity.ToTable("traning_order");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TraningOrder)
                .HasForeignKey<TraningOrder>(d => d.Id)
                .HasConstraintName("FK_objects_traning_order");
        });

        modelBuilder.Entity<TraningOrders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__traning_orders");

            entity.ToTable("traning_orders");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Currency)
                .IsUnicode(false)
                .HasColumnName("currency");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .IsUnicode(false)
                .HasColumnName("number");
            entity.Property(e => e.OrderTypeId).HasColumnName("order_type_id");
            entity.Property(e => e.PayPhaseId).HasColumnName("pay_phase_id");
            entity.Property(e => e.PerformerPersonFullname)
                .IsUnicode(false)
                .HasColumnName("performer_person_fullname");
            entity.Property(e => e.ResponsiblePersonFullname)
                .IsUnicode(false)
                .HasColumnName("responsible_person_fullname");
            entity.Property(e => e.SigningPersonFullname)
                .IsUnicode(false)
                .HasColumnName("signing_person_fullname");
            entity.Property(e => e.Status)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__transaction");

            entity.ToTable("transaction");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Transaction)
                .HasForeignKey<Transaction>(d => d.Id)
                .HasConstraintName("FK_objects_transaction");
        });

        modelBuilder.Entity<Transactions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__transactions");

            entity.ToTable("transactions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Objects)
                .HasColumnType("xml")
                .HasColumnName("objects");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TrashDocs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__trash_docs");

            entity.ToTable("trash_docs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.DelDate)
                .HasColumnType("datetime")
                .HasColumnName("del_date");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
        });

        modelBuilder.Entity<Tutor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tutor");

            entity.ToTable("tutor");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Tutor)
                .HasForeignKey<Tutor>(d => d.Id)
                .HasConstraintName("FK_objects_tutor");
        });

        modelBuilder.Entity<Tutors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tutors");

            entity.ToTable("tutors");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .IsUnicode(false)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .IsUnicode(false)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TypicalDevelopmentProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__typical_development_program");

            entity.ToTable("typical_development_program");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TypicalDevelopmentProgram)
                .HasForeignKey<TypicalDevelopmentProgram>(d => d.Id)
                .HasConstraintName("FK_objects_typical_development_program");
        });

        modelBuilder.Entity<TypicalDevelopmentPrograms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__typical_development_programs");

            entity.ToTable("typical_development_programs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .IsUnicode(false)
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<UploadPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__upload_package");

            entity.ToTable("upload_package");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UploadPackage)
                .HasForeignKey<UploadPackage>(d => d.Id)
                .HasConstraintName("FK_objects_upload_package");
        });

        modelBuilder.Entity<UploadPackages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__upload_packages");

            entity.ToTable("upload_packages");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasColumnName("comment");
            entity.Property(e => e.FileUrl)
                .IsUnicode(false)
                .HasColumnName("file_url");
            entity.Property(e => e.PackageDate)
                .HasColumnType("datetime")
                .HasColumnName("package_date");
            entity.Property(e => e.Type)
                .IsUnicode(false)
                .HasColumnName("type");
        });

        modelBuilder.Entity<UserAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_assignment");

            entity.ToTable("user_assignment");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UserAssignment)
                .HasForeignKey<UserAssignment>(d => d.Id)
                .HasConstraintName("FK_objects_user_assignment");
        });

        modelBuilder.Entity<UserAssignments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_assignments");

            entity.ToTable("user_assignments");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .IsUnicode(false)
                .HasColumnName("object_name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
        });

        modelBuilder.Entity<UserData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_data");

            entity.ToTable("user_data");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UserData)
                .HasForeignKey<UserData>(d => d.Id)
                .HasConstraintName("FK_objects_user_data");
        });

        modelBuilder.Entity<UserDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_datas");

            entity.ToTable("user_datas");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.DeleteDate)
                .HasColumnType("datetime")
                .HasColumnName("delete_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Vacancy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy");

            entity.ToTable("vacancy");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Vacancy)
                .HasForeignKey<Vacancy>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy");
        });

        modelBuilder.Entity<VacancyResponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_response");

            entity.ToTable("vacancy_response");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancyResponse)
                .HasForeignKey<VacancyResponse>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_response");
        });

        modelBuilder.Entity<VacancyResponses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_responses");

            entity.ToTable("vacancy_responses");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveId).HasColumnName("career_reserve_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DateInvitation)
                .HasColumnType("datetime")
                .HasColumnName("date_invitation");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RecruiterPersonFullname)
                .IsUnicode(false)
                .HasColumnName("recruiter_person_fullname");
            entity.Property(e => e.RecruiterPersonId).HasColumnName("recruiter_person_id");
            entity.Property(e => e.ResponseAuthorFullname)
                .IsUnicode(false)
                .HasColumnName("response_author_fullname");
            entity.Property(e => e.ResponseAuthorPersonId).HasColumnName("response_author_person_id");
            entity.Property(e => e.ResumeId).HasColumnName("resume_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .IsUnicode(false)
                .HasColumnName("vacancy_name");
        });

        modelBuilder.Entity<VacancySource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_source");

            entity.ToTable("vacancy_source");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancySource)
                .HasForeignKey<VacancySource>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_source");
        });

        modelBuilder.Entity<VacancySources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_sources");

            entity.ToTable("vacancy_sources");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<VacancySubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_subscription");

            entity.ToTable("vacancy_subscription");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancySubscription)
                .HasForeignKey<VacancySubscription>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_subscription");
        });

        modelBuilder.Entity<VacancySubscriptions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_subscriptions");

            entity.ToTable("vacancy_subscriptions");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.FullTextSearchStr)
                .IsUnicode(false)
                .HasColumnName("full_text_search_str");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .IsUnicode(false)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SendVacancyDate)
                .HasColumnType("datetime")
                .HasColumnName("send_vacancy_date");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<VacancyType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_type");

            entity.ToTable("vacancy_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancyType)
                .HasForeignKey<VacancyType>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_type");
        });

        modelBuilder.Entity<VacancyTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_types");

            entity.ToTable("vacancy_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Vacancys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancys");

            entity.ToTable("vacancys");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AvgWage).HasColumnName("avg_wage");
            entity.Property(e => e.BudgetCurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("budget_currency_type_id");
            entity.Property(e => e.CloseDate)
                .HasColumnType("datetime")
                .HasColumnName("close_date");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("creation_date");
            entity.Property(e => e.CurrencyTypeId)
                .IsUnicode(false)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("datetime")
                .HasColumnName("edit_date");
            entity.Property(e => e.EducTypeId)
                .IsUnicode(false)
                .HasColumnName("educ_type_id");
            entity.Property(e => e.EmploymentTypeId)
                .IsUnicode(false)
                .HasColumnName("employment_type_id");
            entity.Property(e => e.IsClosed).HasColumnName("is_closed");
            entity.Property(e => e.MaxAge).HasColumnName("max_age");
            entity.Property(e => e.MaxBudget).HasColumnName("max_budget");
            entity.Property(e => e.MaxWage).HasColumnName("max_wage");
            entity.Property(e => e.MinAge).HasColumnName("min_age");
            entity.Property(e => e.MinBudget).HasColumnName("min_budget");
            entity.Property(e => e.MinWage).HasColumnName("min_wage");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgName)
                .IsUnicode(false)
                .HasColumnName("org_name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.ProfessionAreaId)
                .IsUnicode(false)
                .HasColumnName("profession_area_id");
            entity.Property(e => e.ProfessionId).HasColumnName("profession_id");
            entity.Property(e => e.PubDate)
                .HasColumnType("datetime")
                .HasColumnName("pub_date");
            entity.Property(e => e.PubPeriod).HasColumnName("pub_period");
            entity.Property(e => e.RecruiterId).HasColumnName("recruiter_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ScheduleWorkId)
                .IsUnicode(false)
                .HasColumnName("schedule_work_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.SourceId)
                .IsUnicode(false)
                .HasColumnName("source_id");
            entity.Property(e => e.SubId).HasColumnName("sub_id");
            entity.Property(e => e.SubName)
                .IsUnicode(false)
                .HasColumnName("sub_name");
            entity.Property(e => e.Subordination)
                .IsUnicode(false)
                .HasColumnName("subordination");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<VendorState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vendor_state");

            entity.ToTable("vendor_state");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VendorState)
                .HasForeignKey<VendorState>(d => d.Id)
                .HasConstraintName("FK_objects_vendor_state");
        });

        modelBuilder.Entity<VendorStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vendor_states");

            entity.ToTable("vendor_states");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VendorStatusTypeId)
                .IsUnicode(false)
                .HasColumnName("vendor_status_type_id");
        });

        modelBuilder.Entity<Verb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__verb");

            entity.ToTable("verb");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Verb)
                .HasForeignKey<Verb>(d => d.Id)
                .HasConstraintName("FK_objects_verb");
        });

        modelBuilder.Entity<Verbs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__verbs");

            entity.ToTable("verbs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Processed).HasColumnName("processed");
        });

        modelBuilder.Entity<Walkthrough>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__walkthrough");

            entity.ToTable("walkthrough");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Walkthrough)
                .HasForeignKey<Walkthrough>(d => d.Id)
                .HasConstraintName("FK_objects_walkthrough");
        });

        modelBuilder.Entity<Walkthroughs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__walkthroughs");

            entity.ToTable("walkthroughs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ExternalSystemId).HasColumnName("external_system_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WebDesign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_design");

            entity.ToTable("web_design");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebDesign)
                .HasForeignKey<WebDesign>(d => d.Id)
                .HasConstraintName("FK_objects_web_design");
        });

        modelBuilder.Entity<WebDesigns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_designs");

            entity.ToTable("web_designs");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<WebRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_rule");

            entity.ToTable("web_rule");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebRule)
                .HasForeignKey<WebRule>(d => d.Id)
                .HasConstraintName("FK_objects_web_rule");
        });

        modelBuilder.Entity<WebRules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_rules");

            entity.ToTable("web_rules");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsPattern).HasColumnName("is_pattern");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RedirectType).HasColumnName("redirect_type");
            entity.Property(e => e.RedirectUrl)
                .IsUnicode(false)
                .HasColumnName("redirect_url");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.UseMatches).HasColumnName("use_matches");
        });

        modelBuilder.Entity<WebinarSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__webinar_system");

            entity.ToTable("webinar_system");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebinarSystem)
                .HasForeignKey<WebinarSystem>(d => d.Id)
                .HasConstraintName("FK_objects_webinar_system");
        });

        modelBuilder.Entity<WebinarSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__webinar_systems");

            entity.ToTable("webinar_systems");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WikiArticle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article");

            entity.ToTable("wiki_article");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticle)
                .HasForeignKey<WikiArticle>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article");
        });

        modelBuilder.Entity<WikiArticleCommunication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communication");

            entity.ToTable("wiki_article_communication");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticleCommunication)
                .HasForeignKey<WikiArticleCommunication>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article_communication");
        });

        modelBuilder.Entity<WikiArticleCommunicationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communication_type");

            entity.ToTable("wiki_article_communication_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticleCommunicationType)
                .HasForeignKey<WikiArticleCommunicationType>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article_communication_type");
        });

        modelBuilder.Entity<WikiArticleCommunicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communication_types");

            entity.ToTable("wiki_article_communication_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BaseWikiArticleTypeId).HasColumnName("base_wiki_article_type_id");
            entity.Property(e => e.ChildWikiArticleTypeId).HasColumnName("child_wiki_article_type_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.IsMandatory).HasColumnName("is_mandatory");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.WikiCommunicationTypeId)
                .IsUnicode(false)
                .HasColumnName("wiki_communication_type_id");
        });

        modelBuilder.Entity<WikiArticleCommunications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communications");

            entity.ToTable("wiki_article_communications");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BaseWikiArticleId).HasColumnName("base_wiki_article_id");
            entity.Property(e => e.ChildWikiArticleId).HasColumnName("child_wiki_article_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.WikiArticleCommunicationTypeId).HasColumnName("wiki_article_communication_type_id");
        });

        modelBuilder.Entity<WikiArticleType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_type");

            entity.ToTable("wiki_article_type");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticleType)
                .HasForeignKey<WikiArticleType>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article_type");
        });

        modelBuilder.Entity<WikiArticleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_types");

            entity.ToTable("wiki_article_types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<WikiArticles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_articles");

            entity.ToTable("wiki_articles");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StatusId)
                .IsUnicode(false)
                .HasColumnName("status_id");
            entity.Property(e => e.WikiArticleTypeId).HasColumnName("wiki_article_type_id");
            entity.Property(e => e.WikiBaseId).HasColumnName("wiki_base_id");
        });

        modelBuilder.Entity<WikiBase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_base");

            entity.ToTable("wiki_base");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiBase)
                .HasForeignKey<WikiBase>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_base");
        });

        modelBuilder.Entity<WikiBases>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_bases");

            entity.ToTable("wiki_bases");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.KnowledgeParts)
                .IsUnicode(false)
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .IsUnicode(false)
                .HasColumnName("operator");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .IsUnicode(false)
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .IsUnicode(false)
                .HasColumnName("tags");
        });

        modelBuilder.Entity<WorkSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_schedule");

            entity.ToTable("work_schedule");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkSchedule)
                .HasForeignKey<WorkSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_work_schedule");
        });

        modelBuilder.Entity<WorkSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_schedules");

            entity.ToTable("work_schedules");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .IsUnicode(false)
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Workflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__workflow");

            entity.ToTable("workflow");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("ftime");
            entity.Property(e => e.Modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Workflow)
                .HasForeignKey<Workflow>(d => d.Id)
                .HasConstraintName("FK_objects_workflow");
        });

        modelBuilder.Entity<Workflows>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__workflows");

            entity.ToTable("workflows");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .IsUnicode(false)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .IsUnicode(false)
                .HasColumnName("code");
            entity.Property(e => e.ConditionEvalStr)
                .IsUnicode(false)
                .HasColumnName("condition_eval_str");
            entity.Property(e => e.EscalationStagesStr)
                .IsUnicode(false)
                .HasColumnName("escalation_stages_str");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("datetime")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RoleId)
                .HasColumnType("xml")
                .HasColumnName("role_id");
            entity.Property(e => e.UseTriggers).HasColumnName("use_triggers");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
