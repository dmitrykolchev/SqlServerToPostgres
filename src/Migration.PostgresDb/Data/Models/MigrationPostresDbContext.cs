using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Migration.PostgresDb.Data.Models;

public partial class MigrationPostresDbContext : DbContext
{
    public MigrationPostresDbContext(DbContextOptions<MigrationPostresDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AbsenceReserve> AbsenceReserve { get; set; }

    public virtual DbSet<AbsenceReserves> AbsenceReserves { get; set; }

    public virtual DbSet<Account> Account { get; set; }

    public virtual DbSet<Accounts> Accounts { get; set; }

    public virtual DbSet<Acquaint> Acquaint { get; set; }

    public virtual DbSet<AcquaintAssign> AcquaintAssign { get; set; }

    public virtual DbSet<AcquaintAssigns> AcquaintAssigns { get; set; }

    public virtual DbSet<Acquaints> Acquaints { get; set; }

    public virtual DbSet<ActionReport> ActionReport { get; set; }

    public virtual DbSet<ActionReports> ActionReports { get; set; }

    public virtual DbSet<ActiveLearning> ActiveLearning { get; set; }

    public virtual DbSet<ActiveLearnings> ActiveLearnings { get; set; }

    public virtual DbSet<ActiveNotification> ActiveNotification { get; set; }

    public virtual DbSet<ActiveNotifications> ActiveNotifications { get; set; }

    public virtual DbSet<ActiveTestLearning> ActiveTestLearning { get; set; }

    public virtual DbSet<ActiveTestLearnings> ActiveTestLearnings { get; set; }

    public virtual DbSet<ActiveWebTemplate> ActiveWebTemplate { get; set; }

    public virtual DbSet<ActiveWebTemplates> ActiveWebTemplates { get; set; }

    public virtual DbSet<Activity> Activity { get; set; }

    public virtual DbSet<ActivityState> ActivityState { get; set; }

    public virtual DbSet<ActivityStates> ActivityStates { get; set; }

    public virtual DbSet<Activitys> Activitys { get; set; }

    public virtual DbSet<AdminConfiguration> AdminConfiguration { get; set; }

    public virtual DbSet<AdminConfigurations> AdminConfigurations { get; set; }

    public virtual DbSet<Application> Application { get; set; }

    public virtual DbSet<ApplicationInstance> ApplicationInstance { get; set; }

    public virtual DbSet<ApplicationInstances> ApplicationInstances { get; set; }

    public virtual DbSet<Applications> Applications { get; set; }

    public virtual DbSet<AppointmentType> AppointmentType { get; set; }

    public virtual DbSet<AppointmentTypes> AppointmentTypes { get; set; }

    public virtual DbSet<Article> Article { get; set; }

    public virtual DbSet<Articles> Articles { get; set; }

    public virtual DbSet<Assessment> Assessment { get; set; }

    public virtual DbSet<AssessmentAppraise> AssessmentAppraise { get; set; }

    public virtual DbSet<AssessmentAppraiseMatrix> AssessmentAppraiseMatrix { get; set; }

    public virtual DbSet<AssessmentAppraiseMatrixs> AssessmentAppraiseMatrixs { get; set; }

    public virtual DbSet<AssessmentAppraises> AssessmentAppraises { get; set; }

    public virtual DbSet<AssessmentPlan> AssessmentPlan { get; set; }

    public virtual DbSet<AssessmentPlans> AssessmentPlans { get; set; }

    public virtual DbSet<AssessmentResultRecommend> AssessmentResultRecommend { get; set; }

    public virtual DbSet<AssessmentResultRecommends> AssessmentResultRecommends { get; set; }

    public virtual DbSet<Assessments> Assessments { get; set; }

    public virtual DbSet<Attorney> Attorney { get; set; }

    public virtual DbSet<Attorneys> Attorneys { get; set; }

    public virtual DbSet<AuthType> AuthType { get; set; }

    public virtual DbSet<AuthTypes> AuthTypes { get; set; }

    public virtual DbSet<AvailabilityPlan> AvailabilityPlan { get; set; }

    public virtual DbSet<AvailabilityPlans> AvailabilityPlans { get; set; }

    public virtual DbSet<Banner> Banner { get; set; }

    public virtual DbSet<Banners> Banners { get; set; }

    public virtual DbSet<Basket> Basket { get; set; }

    public virtual DbSet<Baskets> Baskets { get; set; }

    public virtual DbSet<Benefit> Benefit { get; set; }

    public virtual DbSet<BenefitItem> BenefitItem { get; set; }

    public virtual DbSet<BenefitItems> BenefitItems { get; set; }

    public virtual DbSet<BenefitProfile> BenefitProfile { get; set; }

    public virtual DbSet<BenefitProfiles> BenefitProfiles { get; set; }

    public virtual DbSet<Benefits> Benefits { get; set; }

    public virtual DbSet<BlockMessage> BlockMessage { get; set; }

    public virtual DbSet<BlockMessages> BlockMessages { get; set; }

    public virtual DbSet<Blog> Blog { get; set; }

    public virtual DbSet<BlogAuthors> BlogAuthors { get; set; }

    public virtual DbSet<BlogEntry> BlogEntry { get; set; }

    public virtual DbSet<BlogEntryComment> BlogEntryComment { get; set; }

    public virtual DbSet<BlogEntryComments> BlogEntryComments { get; set; }

    public virtual DbSet<BlogEntrys> BlogEntrys { get; set; }

    public virtual DbSet<Blogs> Blogs { get; set; }

    public virtual DbSet<BonusItem> BonusItem { get; set; }

    public virtual DbSet<BonusItems> BonusItems { get; set; }

    public virtual DbSet<BonusProfile> BonusProfile { get; set; }

    public virtual DbSet<BonusProfiles> BonusProfiles { get; set; }

    public virtual DbSet<Book> Book { get; set; }

    public virtual DbSet<Books> Books { get; set; }

    public virtual DbSet<BossType> BossType { get; set; }

    public virtual DbSet<BossTypes> BossTypes { get; set; }

    public virtual DbSet<Bp> Bp { get; set; }

    public virtual DbSet<BpRole> BpRole { get; set; }

    public virtual DbSet<BpRoles> BpRoles { get; set; }

    public virtual DbSet<BprocessRoles> BprocessRoles { get; set; }

    public virtual DbSet<BproleCollaborators> BproleCollaborators { get; set; }

    public virtual DbSet<Bps> Bps { get; set; }

    public virtual DbSet<Budget> Budget { get; set; }

    public virtual DbSet<BudgetObjects> BudgetObjects { get; set; }

    public virtual DbSet<BudgetPeriod> BudgetPeriod { get; set; }

    public virtual DbSet<BudgetPeriods> BudgetPeriods { get; set; }

    public virtual DbSet<BudgetType> BudgetType { get; set; }

    public virtual DbSet<BudgetTypes> BudgetTypes { get; set; }

    public virtual DbSet<Budgets> Budgets { get; set; }

    public virtual DbSet<CaApprove> CaApprove { get; set; }

    public virtual DbSet<CaPlan> CaPlan { get; set; }

    public virtual DbSet<CaPlanUpdates> CaPlanUpdates { get; set; }

    public virtual DbSet<CaPlanUpdatesCost> CaPlanUpdatesCost { get; set; }

    public virtual DbSet<CaPlanUpdatesDuration> CaPlanUpdatesDuration { get; set; }

    public virtual DbSet<CalendarEvent> CalendarEvent { get; set; }

    public virtual DbSet<CalendarEvents> CalendarEvents { get; set; }

    public virtual DbSet<Call> Call { get; set; }

    public virtual DbSet<Calls> Calls { get; set; }

    public virtual DbSet<CandidateSource> CandidateSource { get; set; }

    public virtual DbSet<CandidateSources> CandidateSources { get; set; }

    public virtual DbSet<CandidateStatusType> CandidateStatusType { get; set; }

    public virtual DbSet<CandidateStatusTypes> CandidateStatusTypes { get; set; }

    public virtual DbSet<CareerPlan> CareerPlan { get; set; }

    public virtual DbSet<CareerPlans> CareerPlans { get; set; }

    public virtual DbSet<CareerReserve> CareerReserve { get; set; }

    public virtual DbSet<CareerReserveTutors> CareerReserveTutors { get; set; }

    public virtual DbSet<CareerReserveType> CareerReserveType { get; set; }

    public virtual DbSet<CareerReserveTypes> CareerReserveTypes { get; set; }

    public virtual DbSet<CareerReserves> CareerReserves { get; set; }

    public virtual DbSet<CareerTrees> CareerTrees { get; set; }

    public virtual DbSet<CcAccessDivison> CcAccessDivison { get; set; }

    public virtual DbSet<CcAccessDivisons> CcAccessDivisons { get; set; }

    public virtual DbSet<CcAccessElement> CcAccessElement { get; set; }

    public virtual DbSet<CcAccessElements> CcAccessElements { get; set; }

    public virtual DbSet<CcAccessPeriod> CcAccessPeriod { get; set; }

    public virtual DbSet<CcAccessPeriods> CcAccessPeriods { get; set; }

    public virtual DbSet<CcAccessTemplate> CcAccessTemplate { get; set; }

    public virtual DbSet<CcAccessTemplates> CcAccessTemplates { get; set; }

    public virtual DbSet<CcAppCourse> CcAppCourse { get; set; }

    public virtual DbSet<CcAppCourses> CcAppCourses { get; set; }

    public virtual DbSet<CcAttestation> CcAttestation { get; set; }

    public virtual DbSet<CcAttestations> CcAttestations { get; set; }

    public virtual DbSet<CcCollaborator> CcCollaborator { get; set; }

    public virtual DbSet<CcCollaborators> CcCollaborators { get; set; }

    public virtual DbSet<CcContragentImport> CcContragentImport { get; set; }

    public virtual DbSet<CcContragentImports> CcContragentImports { get; set; }

    public virtual DbSet<CcCostHistory> CcCostHistory { get; set; }

    public virtual DbSet<CcCostHistorys> CcCostHistorys { get; set; }

    public virtual DbSet<CcCourseDate> CcCourseDate { get; set; }

    public virtual DbSet<CcCourseDates> CcCourseDates { get; set; }

    public virtual DbSet<CcCourseOrg> CcCourseOrg { get; set; }

    public virtual DbSet<CcCourseOrgs> CcCourseOrgs { get; set; }

    public virtual DbSet<CcDirect> CcDirect { get; set; }

    public virtual DbSet<CcDirects> CcDirects { get; set; }

    public virtual DbSet<CcDocField> CcDocField { get; set; }

    public virtual DbSet<CcDocFields> CcDocFields { get; set; }

    public virtual DbSet<CcDocSetting> CcDocSetting { get; set; }

    public virtual DbSet<CcDocSettings> CcDocSettings { get; set; }

    public virtual DbSet<CcEditLog> CcEditLog { get; set; }

    public virtual DbSet<CcEditLogs> CcEditLogs { get; set; }

    public virtual DbSet<CcEduField> CcEduField { get; set; }

    public virtual DbSet<CcEduFieldType> CcEduFieldType { get; set; }

    public virtual DbSet<CcEduFieldTypes> CcEduFieldTypes { get; set; }

    public virtual DbSet<CcEduFields> CcEduFields { get; set; }

    public virtual DbSet<CcEduOrgCode> CcEduOrgCode { get; set; }

    public virtual DbSet<CcEduOrgCodes> CcEduOrgCodes { get; set; }

    public virtual DbSet<CcEduTheme> CcEduTheme { get; set; }

    public virtual DbSet<CcEduThemes> CcEduThemes { get; set; }

    public virtual DbSet<CcEduType> CcEduType { get; set; }

    public virtual DbSet<CcEduTypes> CcEduTypes { get; set; }

    public virtual DbSet<CcEduapp> CcEduapp { get; set; }

    public virtual DbSet<CcEduapps> CcEduapps { get; set; }

    public virtual DbSet<CcEducation> CcEducation { get; set; }

    public virtual DbSet<CcEducations> CcEducations { get; set; }

    public virtual DbSet<CcEdufieldApp> CcEdufieldApp { get; set; }

    public virtual DbSet<CcEdufieldApps> CcEdufieldApps { get; set; }

    public virtual DbSet<CcEventPresence> CcEventPresence { get; set; }

    public virtual DbSet<CcEventPresences> CcEventPresences { get; set; }

    public virtual DbSet<CcEventTheme> CcEventTheme { get; set; }

    public virtual DbSet<CcEventThemeCompl> CcEventThemeCompl { get; set; }

    public virtual DbSet<CcEventThemeCompls> CcEventThemeCompls { get; set; }

    public virtual DbSet<CcEventThemes> CcEventThemes { get; set; }

    public virtual DbSet<CcFlow> CcFlow { get; set; }

    public virtual DbSet<CcFlows> CcFlows { get; set; }

    public virtual DbSet<CcGroupCount> CcGroupCount { get; set; }

    public virtual DbSet<CcGroupCounts> CcGroupCounts { get; set; }

    public virtual DbSet<CcIndProgramTheme> CcIndProgramTheme { get; set; }

    public virtual DbSet<CcIndProgramThemes> CcIndProgramThemes { get; set; }

    public virtual DbSet<CcInoutControl> CcInoutControl { get; set; }

    public virtual DbSet<CcInoutControls> CcInoutControls { get; set; }

    public virtual DbSet<CcKcPerson> CcKcPerson { get; set; }

    public virtual DbSet<CcKcPersons> CcKcPersons { get; set; }

    public virtual DbSet<CcKnowledgeClassifier> CcKnowledgeClassifier { get; set; }

    public virtual DbSet<CcKnowledgeClassifiers> CcKnowledgeClassifiers { get; set; }

    public virtual DbSet<CcLocalStorage> CcLocalStorage { get; set; }

    public virtual DbSet<CcLocalStorages> CcLocalStorages { get; set; }

    public virtual DbSet<CcLogExport> CcLogExport { get; set; }

    public virtual DbSet<CcLogExports> CcLogExports { get; set; }

    public virtual DbSet<CcLogImport> CcLogImport { get; set; }

    public virtual DbSet<CcLogImports> CcLogImports { get; set; }

    public virtual DbSet<CcOrg> CcOrg { get; set; }

    public virtual DbSet<CcOrgs> CcOrgs { get; set; }

    public virtual DbSet<CcOssImport> CcOssImport { get; set; }

    public virtual DbSet<CcOssImports> CcOssImports { get; set; }

    public virtual DbSet<CcPeriodType> CcPeriodType { get; set; }

    public virtual DbSet<CcPeriodTypes> CcPeriodTypes { get; set; }

    public virtual DbSet<CcPfoAssessmentCriteria> CcPfoAssessmentCriteria { get; set; }

    public virtual DbSet<CcPfoAssessmentCriterias> CcPfoAssessmentCriterias { get; set; }

    public virtual DbSet<CcPfoDiv> CcPfoDiv { get; set; }

    public virtual DbSet<CcPfoDivs> CcPfoDivs { get; set; }

    public virtual DbSet<CcPfoGrafic> CcPfoGrafic { get; set; }

    public virtual DbSet<CcPfoGrafics> CcPfoGrafics { get; set; }

    public virtual DbSet<CcPfoMethod> CcPfoMethod { get; set; }

    public virtual DbSet<CcPfoMethodResult> CcPfoMethodResult { get; set; }

    public virtual DbSet<CcPfoMethodResults> CcPfoMethodResults { get; set; }

    public virtual DbSet<CcPfoMethodScale> CcPfoMethodScale { get; set; }

    public virtual DbSet<CcPfoMethodScales> CcPfoMethodScales { get; set; }

    public virtual DbSet<CcPfoMethods> CcPfoMethods { get; set; }

    public virtual DbSet<CcPfoPassword> CcPfoPassword { get; set; }

    public virtual DbSet<CcPfoPasswords> CcPfoPasswords { get; set; }

    public virtual DbSet<CcPfoPoll> CcPfoPoll { get; set; }

    public virtual DbSet<CcPfoPollProcedure> CcPfoPollProcedure { get; set; }

    public virtual DbSet<CcPfoPollProcedures> CcPfoPollProcedures { get; set; }

    public virtual DbSet<CcPfoPollResult> CcPfoPollResult { get; set; }

    public virtual DbSet<CcPfoPollResults> CcPfoPollResults { get; set; }

    public virtual DbSet<CcPfoPolls> CcPfoPolls { get; set; }

    public virtual DbSet<CcPfoPositionGroup> CcPfoPositionGroup { get; set; }

    public virtual DbSet<CcPfoPositionGroups> CcPfoPositionGroups { get; set; }

    public virtual DbSet<CcPfoQualCourseOrder> CcPfoQualCourseOrder { get; set; }

    public virtual DbSet<CcPfoQualCourseOrders> CcPfoQualCourseOrders { get; set; }

    public virtual DbSet<CcPfoQualificationCourse> CcPfoQualificationCourse { get; set; }

    public virtual DbSet<CcPfoQualificationCourses> CcPfoQualificationCourses { get; set; }

    public virtual DbSet<CcPfoQualificationPosition> CcPfoQualificationPosition { get; set; }

    public virtual DbSet<CcPfoQualificationPositions> CcPfoQualificationPositions { get; set; }

    public virtual DbSet<CcPfoRequest> CcPfoRequest { get; set; }

    public virtual DbSet<CcPfoRequestMethod> CcPfoRequestMethod { get; set; }

    public virtual DbSet<CcPfoRequestMethods> CcPfoRequestMethods { get; set; }

    public virtual DbSet<CcPfoRequestToLearning> CcPfoRequestToLearning { get; set; }

    public virtual DbSet<CcPfoRequestToLearnings> CcPfoRequestToLearnings { get; set; }

    public virtual DbSet<CcPfoRequestTransfer> CcPfoRequestTransfer { get; set; }

    public virtual DbSet<CcPfoRequestTransfers> CcPfoRequestTransfers { get; set; }

    public virtual DbSet<CcPfoRequests> CcPfoRequests { get; set; }

    public virtual DbSet<CcPfoResultGroup> CcPfoResultGroup { get; set; }

    public virtual DbSet<CcPfoResultGroups> CcPfoResultGroups { get; set; }

    public virtual DbSet<CcPfoScaleResult> CcPfoScaleResult { get; set; }

    public virtual DbSet<CcPfoScaleResults> CcPfoScaleResults { get; set; }

    public virtual DbSet<CcPmtoNppBlock> CcPmtoNppBlock { get; set; }

    public virtual DbSet<CcPmtoNppBlocks> CcPmtoNppBlocks { get; set; }

    public virtual DbSet<CcPmtoObservation> CcPmtoObservation { get; set; }

    public virtual DbSet<CcPmtoObservationDirector> CcPmtoObservationDirector { get; set; }

    public virtual DbSet<CcPmtoObservationDirectors> CcPmtoObservationDirectors { get; set; }

    public virtual DbSet<CcPmtoObservationEmployee> CcPmtoObservationEmployee { get; set; }

    public virtual DbSet<CcPmtoObservationEmployees> CcPmtoObservationEmployees { get; set; }

    public virtual DbSet<CcPmtoObservationResult> CcPmtoObservationResult { get; set; }

    public virtual DbSet<CcPmtoObservationResults> CcPmtoObservationResults { get; set; }

    public virtual DbSet<CcPmtoObservationSpecialist> CcPmtoObservationSpecialist { get; set; }

    public virtual DbSet<CcPmtoObservationSpecialists> CcPmtoObservationSpecialists { get; set; }

    public virtual DbSet<CcPmtoObservations> CcPmtoObservations { get; set; }

    public virtual DbSet<CcPmtoPosition> CcPmtoPosition { get; set; }

    public virtual DbSet<CcPmtoPositionShort> CcPmtoPositionShort { get; set; }

    public virtual DbSet<CcPmtoPositionShorts> CcPmtoPositionShorts { get; set; }

    public virtual DbSet<CcPmtoPositions> CcPmtoPositions { get; set; }

    public virtual DbSet<CcPmtoShift> CcPmtoShift { get; set; }

    public virtual DbSet<CcPmtoShifts> CcPmtoShifts { get; set; }

    public virtual DbSet<CcPollProcedure> CcPollProcedure { get; set; }

    public virtual DbSet<CcPollProcedures> CcPollProcedures { get; set; }

    public virtual DbSet<CcPrevWork> CcPrevWork { get; set; }

    public virtual DbSet<CcPrevWorks> CcPrevWorks { get; set; }

    public virtual DbSet<CcProgramDate> CcProgramDate { get; set; }

    public virtual DbSet<CcProgramDates> CcProgramDates { get; set; }

    public virtual DbSet<CcQualification> CcQualification { get; set; }

    public virtual DbSet<CcQualifications> CcQualifications { get; set; }

    public virtual DbSet<CcQuiz> CcQuiz { get; set; }

    public virtual DbSet<CcQuizs> CcQuizs { get; set; }

    public virtual DbSet<CcRejectReason> CcRejectReason { get; set; }

    public virtual DbSet<CcRejectReasons> CcRejectReasons { get; set; }

    public virtual DbSet<CcReqDateHistory> CcReqDateHistory { get; set; }

    public virtual DbSet<CcReqDateHistorys> CcReqDateHistorys { get; set; }

    public virtual DbSet<CcRequestReason> CcRequestReason { get; set; }

    public virtual DbSet<CcRequestReasons> CcRequestReasons { get; set; }

    public virtual DbSet<CcResultHistory> CcResultHistory { get; set; }

    public virtual DbSet<CcResultHistorys> CcResultHistorys { get; set; }

    public virtual DbSet<CcRtn> CcRtn { get; set; }

    public virtual DbSet<CcRtnActivity> CcRtnActivity { get; set; }

    public virtual DbSet<CcRtnActivitys> CcRtnActivitys { get; set; }

    public virtual DbSet<CcRtnApplication> CcRtnApplication { get; set; }

    public virtual DbSet<CcRtnApplicationType> CcRtnApplicationType { get; set; }

    public virtual DbSet<CcRtnApplicationTypes> CcRtnApplicationTypes { get; set; }

    public virtual DbSet<CcRtnApplications> CcRtnApplications { get; set; }

    public virtual DbSet<CcRtnControlKind> CcRtnControlKind { get; set; }

    public virtual DbSet<CcRtnControlKinds> CcRtnControlKinds { get; set; }

    public virtual DbSet<CcRtnControlResultType> CcRtnControlResultType { get; set; }

    public virtual DbSet<CcRtnControlResultTypes> CcRtnControlResultTypes { get; set; }

    public virtual DbSet<CcRtnControlType> CcRtnControlType { get; set; }

    public virtual DbSet<CcRtnControlTypes> CcRtnControlTypes { get; set; }

    public virtual DbSet<CcRtnDuty> CcRtnDuty { get; set; }

    public virtual DbSet<CcRtnDutys> CcRtnDutys { get; set; }

    public virtual DbSet<CcRtnExamMedical> CcRtnExamMedical { get; set; }

    public virtual DbSet<CcRtnExamMedicals> CcRtnExamMedicals { get; set; }

    public virtual DbSet<CcRtnExamPsychical> CcRtnExamPsychical { get; set; }

    public virtual DbSet<CcRtnExamPsychicals> CcRtnExamPsychicals { get; set; }

    public virtual DbSet<CcRtnFault> CcRtnFault { get; set; }

    public virtual DbSet<CcRtnFaults> CcRtnFaults { get; set; }

    public virtual DbSet<CcRtnKnowledge> CcRtnKnowledge { get; set; }

    public virtual DbSet<CcRtnKnowledgeSafety> CcRtnKnowledgeSafety { get; set; }

    public virtual DbSet<CcRtnKnowledgeSafetys> CcRtnKnowledgeSafetys { get; set; }

    public virtual DbSet<CcRtnKnowledgeTheory> CcRtnKnowledgeTheory { get; set; }

    public virtual DbSet<CcRtnKnowledgeTheorys> CcRtnKnowledgeTheorys { get; set; }

    public virtual DbSet<CcRtnKnowledges> CcRtnKnowledges { get; set; }

    public virtual DbSet<CcRtnLicense> CcRtnLicense { get; set; }

    public virtual DbSet<CcRtnLicense2> CcRtnLicense2 { get; set; }

    public virtual DbSet<CcRtnLicense2s> CcRtnLicense2s { get; set; }

    public virtual DbSet<CcRtnLicenseActivity> CcRtnLicenseActivity { get; set; }

    public virtual DbSet<CcRtnLicenseActivityResult> CcRtnLicenseActivityResult { get; set; }

    public virtual DbSet<CcRtnLicenseActivityResults> CcRtnLicenseActivityResults { get; set; }

    public virtual DbSet<CcRtnLicenseActivitys> CcRtnLicenseActivitys { get; set; }

    public virtual DbSet<CcRtnLicenseControl> CcRtnLicenseControl { get; set; }

    public virtual DbSet<CcRtnLicenseControlResult> CcRtnLicenseControlResult { get; set; }

    public virtual DbSet<CcRtnLicenseControlResults> CcRtnLicenseControlResults { get; set; }

    public virtual DbSet<CcRtnLicenseControls> CcRtnLicenseControls { get; set; }

    public virtual DbSet<CcRtnLicenseDoubling> CcRtnLicenseDoubling { get; set; }

    public virtual DbSet<CcRtnLicenseDoublings> CcRtnLicenseDoublings { get; set; }

    public virtual DbSet<CcRtnLicenseFault> CcRtnLicenseFault { get; set; }

    public virtual DbSet<CcRtnLicenseFaults> CcRtnLicenseFaults { get; set; }

    public virtual DbSet<CcRtnLicenseHolder> CcRtnLicenseHolder { get; set; }

    public virtual DbSet<CcRtnLicenseHolderType> CcRtnLicenseHolderType { get; set; }

    public virtual DbSet<CcRtnLicenseHolderTypes> CcRtnLicenseHolderTypes { get; set; }

    public virtual DbSet<CcRtnLicenseHolders> CcRtnLicenseHolders { get; set; }

    public virtual DbSet<CcRtnLicensePerm> CcRtnLicensePerm { get; set; }

    public virtual DbSet<CcRtnLicensePermState> CcRtnLicensePermState { get; set; }

    public virtual DbSet<CcRtnLicensePermStates> CcRtnLicensePermStates { get; set; }

    public virtual DbSet<CcRtnLicensePerms> CcRtnLicensePerms { get; set; }

    public virtual DbSet<CcRtnLicensePost> CcRtnLicensePost { get; set; }

    public virtual DbSet<CcRtnLicensePost2> CcRtnLicensePost2 { get; set; }

    public virtual DbSet<CcRtnLicensePost2s> CcRtnLicensePost2s { get; set; }

    public virtual DbSet<CcRtnLicensePostHistory> CcRtnLicensePostHistory { get; set; }

    public virtual DbSet<CcRtnLicensePostHistorys> CcRtnLicensePostHistorys { get; set; }

    public virtual DbSet<CcRtnLicensePosts> CcRtnLicensePosts { get; set; }

    public virtual DbSet<CcRtnLicensePrepareState> CcRtnLicensePrepareState { get; set; }

    public virtual DbSet<CcRtnLicensePrepareStates> CcRtnLicensePrepareStates { get; set; }

    public virtual DbSet<CcRtnLicenseQual> CcRtnLicenseQual { get; set; }

    public virtual DbSet<CcRtnLicenseQuals> CcRtnLicenseQuals { get; set; }

    public virtual DbSet<CcRtnLicenseSkill> CcRtnLicenseSkill { get; set; }

    public virtual DbSet<CcRtnLicenseSkillResult> CcRtnLicenseSkillResult { get; set; }

    public virtual DbSet<CcRtnLicenseSkillResults> CcRtnLicenseSkillResults { get; set; }

    public virtual DbSet<CcRtnLicenseSkills> CcRtnLicenseSkills { get; set; }

    public virtual DbSet<CcRtnLicenseState> CcRtnLicenseState { get; set; }

    public virtual DbSet<CcRtnLicenseStates> CcRtnLicenseStates { get; set; }

    public virtual DbSet<CcRtnLicenseTraining> CcRtnLicenseTraining { get; set; }

    public virtual DbSet<CcRtnLicenseTraining2> CcRtnLicenseTraining2 { get; set; }

    public virtual DbSet<CcRtnLicenseTraining2s> CcRtnLicenseTraining2s { get; set; }

    public virtual DbSet<CcRtnLicenseTrainings> CcRtnLicenseTrainings { get; set; }

    public virtual DbSet<CcRtnLicenses> CcRtnLicenses { get; set; }

    public virtual DbSet<CcRtnNppBlock> CcRtnNppBlock { get; set; }

    public virtual DbSet<CcRtnNppBlockStage> CcRtnNppBlockStage { get; set; }

    public virtual DbSet<CcRtnNppBlockStages> CcRtnNppBlockStages { get; set; }

    public virtual DbSet<CcRtnNppBlocks> CcRtnNppBlocks { get; set; }

    public virtual DbSet<CcRtnPermission> CcRtnPermission { get; set; }

    public virtual DbSet<CcRtnPermissionStatusType> CcRtnPermissionStatusType { get; set; }

    public virtual DbSet<CcRtnPermissionStatusTypes> CcRtnPermissionStatusTypes { get; set; }

    public virtual DbSet<CcRtnPermissionStop> CcRtnPermissionStop { get; set; }

    public virtual DbSet<CcRtnPermissionStops> CcRtnPermissionStops { get; set; }

    public virtual DbSet<CcRtnPermissions> CcRtnPermissions { get; set; }

    public virtual DbSet<CcRtnPostApproved> CcRtnPostApproved { get; set; }

    public virtual DbSet<CcRtnPostApproveds> CcRtnPostApproveds { get; set; }

    public virtual DbSet<CcRtnPostCategory> CcRtnPostCategory { get; set; }

    public virtual DbSet<CcRtnPostCategorys> CcRtnPostCategorys { get; set; }

    public virtual DbSet<CcRtnPostLicensed> CcRtnPostLicensed { get; set; }

    public virtual DbSet<CcRtnPostLicenseds> CcRtnPostLicenseds { get; set; }

    public virtual DbSet<CcRtnPostOperative> CcRtnPostOperative { get; set; }

    public virtual DbSet<CcRtnPostOperativeBlock> CcRtnPostOperativeBlock { get; set; }

    public virtual DbSet<CcRtnPostOperativeBlocks> CcRtnPostOperativeBlocks { get; set; }

    public virtual DbSet<CcRtnPostOperatives> CcRtnPostOperatives { get; set; }

    public virtual DbSet<CcRtnPostStation> CcRtnPostStation { get; set; }

    public virtual DbSet<CcRtnPostStationActivity> CcRtnPostStationActivity { get; set; }

    public virtual DbSet<CcRtnPostStationActivitys> CcRtnPostStationActivitys { get; set; }

    public virtual DbSet<CcRtnPostStationLicensed> CcRtnPostStationLicensed { get; set; }

    public virtual DbSet<CcRtnPostStationLicenseds> CcRtnPostStationLicenseds { get; set; }

    public virtual DbSet<CcRtnPostStations> CcRtnPostStations { get; set; }

    public virtual DbSet<CcRtnPostStructure> CcRtnPostStructure { get; set; }

    public virtual DbSet<CcRtnPostStructureControl> CcRtnPostStructureControl { get; set; }

    public virtual DbSet<CcRtnPostStructureControls> CcRtnPostStructureControls { get; set; }

    public virtual DbSet<CcRtnPostStructures> CcRtnPostStructures { get; set; }

    public virtual DbSet<CcRtnPostSubcategory> CcRtnPostSubcategory { get; set; }

    public virtual DbSet<CcRtnPostSubcategorys> CcRtnPostSubcategorys { get; set; }

    public virtual DbSet<CcRtnSkill> CcRtnSkill { get; set; }

    public virtual DbSet<CcRtnSkills> CcRtnSkills { get; set; }

    public virtual DbSet<CcRtns> CcRtns { get; set; }

    public virtual DbSet<CcScmtAssign> CcScmtAssign { get; set; }

    public virtual DbSet<CcScmtAssignAnswer> CcScmtAssignAnswer { get; set; }

    public virtual DbSet<CcScmtAssignAnswers> CcScmtAssignAnswers { get; set; }

    public virtual DbSet<CcScmtAssignGroup> CcScmtAssignGroup { get; set; }

    public virtual DbSet<CcScmtAssignGroupList> CcScmtAssignGroupList { get; set; }

    public virtual DbSet<CcScmtAssignGroupLists> CcScmtAssignGroupLists { get; set; }

    public virtual DbSet<CcScmtAssignGroups> CcScmtAssignGroups { get; set; }

    public virtual DbSet<CcScmtAssigns> CcScmtAssigns { get; set; }

    public virtual DbSet<CcScmtOption> CcScmtOption { get; set; }

    public virtual DbSet<CcScmtOptions> CcScmtOptions { get; set; }

    public virtual DbSet<CcSelftestCode> CcSelftestCode { get; set; }

    public virtual DbSet<CcSelftestCodes> CcSelftestCodes { get; set; }

    public virtual DbSet<CcSelftestDb> CcSelftestDb { get; set; }

    public virtual DbSet<CcSelftestDbs> CcSelftestDbs { get; set; }

    public virtual DbSet<CcSelftestExpert> CcSelftestExpert { get; set; }

    public virtual DbSet<CcSelftestExperts> CcSelftestExperts { get; set; }

    public virtual DbSet<CcSelftestModel> CcSelftestModel { get; set; }

    public virtual DbSet<CcSelftestModels> CcSelftestModels { get; set; }

    public virtual DbSet<CcSkvzActivity> CcSkvzActivity { get; set; }

    public virtual DbSet<CcSkvzActivitys> CcSkvzActivitys { get; set; }

    public virtual DbSet<CcSkvzBpApprovedObject> CcSkvzBpApprovedObject { get; set; }

    public virtual DbSet<CcSkvzBpApprovedObjects> CcSkvzBpApprovedObjects { get; set; }

    public virtual DbSet<CcSkvzCouncilMember> CcSkvzCouncilMember { get; set; }

    public virtual DbSet<CcSkvzCouncilMemberDiv> CcSkvzCouncilMemberDiv { get; set; }

    public virtual DbSet<CcSkvzCouncilMemberDivs> CcSkvzCouncilMemberDivs { get; set; }

    public virtual DbSet<CcSkvzCouncilMembers> CcSkvzCouncilMembers { get; set; }

    public virtual DbSet<CcSkvzCritPosition> CcSkvzCritPosition { get; set; }

    public virtual DbSet<CcSkvzCritPositions> CcSkvzCritPositions { get; set; }

    public virtual DbSet<CcSkvzCriteriaActivity> CcSkvzCriteriaActivity { get; set; }

    public virtual DbSet<CcSkvzCriteriaActivitys> CcSkvzCriteriaActivitys { get; set; }

    public virtual DbSet<CcSkvzCriticalityPosFactor> CcSkvzCriticalityPosFactor { get; set; }

    public virtual DbSet<CcSkvzCriticalityPosFactors> CcSkvzCriticalityPosFactors { get; set; }

    public virtual DbSet<CcSkvzDiv> CcSkvzDiv { get; set; }

    public virtual DbSet<CcSkvzDivs> CcSkvzDivs { get; set; }

    public virtual DbSet<CcSkvzEv> CcSkvzEv { get; set; }

    public virtual DbSet<CcSkvzEvs> CcSkvzEvs { get; set; }

    public virtual DbSet<CcSkvzExtractKvzType> CcSkvzExtractKvzType { get; set; }

    public virtual DbSet<CcSkvzExtractKvzTypes> CcSkvzExtractKvzTypes { get; set; }

    public virtual DbSet<CcSkvzKmap> CcSkvzKmap { get; set; }

    public virtual DbSet<CcSkvzKmapItem> CcSkvzKmapItem { get; set; }

    public virtual DbSet<CcSkvzKmapItems> CcSkvzKmapItems { get; set; }

    public virtual DbSet<CcSkvzKmaps> CcSkvzKmaps { get; set; }

    public virtual DbSet<CcSkvzKnowledgeDocsFactor> CcSkvzKnowledgeDocsFactor { get; set; }

    public virtual DbSet<CcSkvzKnowledgeDocsFactors> CcSkvzKnowledgeDocsFactors { get; set; }

    public virtual DbSet<CcSkvzMovedStage> CcSkvzMovedStage { get; set; }

    public virtual DbSet<CcSkvzMovedStages> CcSkvzMovedStages { get; set; }

    public virtual DbSet<CcSkvzPlanEv> CcSkvzPlanEv { get; set; }

    public virtual DbSet<CcSkvzPlanEvEvent> CcSkvzPlanEvEvent { get; set; }

    public virtual DbSet<CcSkvzPlanEvEvents> CcSkvzPlanEvEvents { get; set; }

    public virtual DbSet<CcSkvzPlanEvs> CcSkvzPlanEvs { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvz> CcSkvzPlanExtractKvz { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzExp> CcSkvzPlanExtractKvzExp { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzExps> CcSkvzPlanExtractKvzExps { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzFile> CcSkvzPlanExtractKvzFile { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzFiles> CcSkvzPlanExtractKvzFiles { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzWg> CcSkvzPlanExtractKvzWg { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzWgs> CcSkvzPlanExtractKvzWgs { get; set; }

    public virtual DbSet<CcSkvzPlanExtractKvzs> CcSkvzPlanExtractKvzs { get; set; }

    public virtual DbSet<CcSkvzPlanInstallKvz> CcSkvzPlanInstallKvz { get; set; }

    public virtual DbSet<CcSkvzPlanInstallKvzs> CcSkvzPlanInstallKvzs { get; set; }

    public virtual DbSet<CcSkvzPollActivity> CcSkvzPollActivity { get; set; }

    public virtual DbSet<CcSkvzPollActivityCr> CcSkvzPollActivityCr { get; set; }

    public virtual DbSet<CcSkvzPollActivityCrs> CcSkvzPollActivityCrs { get; set; }

    public virtual DbSet<CcSkvzPollActivitys> CcSkvzPollActivitys { get; set; }

    public virtual DbSet<CcSkvzPollKvzPersonResult> CcSkvzPollKvzPersonResult { get; set; }

    public virtual DbSet<CcSkvzPollKvzPersonResults> CcSkvzPollKvzPersonResults { get; set; }

    public virtual DbSet<CcSkvzPollSpFinalResult> CcSkvzPollSpFinalResult { get; set; }

    public virtual DbSet<CcSkvzPollSpFinalResults> CcSkvzPollSpFinalResults { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstCr> CcSkvzPollSpFirstCr { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstCrs> CcSkvzPollSpFirstCrs { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstResult> CcSkvzPollSpFirstResult { get; set; }

    public virtual DbSet<CcSkvzPollSpFirstResults> CcSkvzPollSpFirstResults { get; set; }

    public virtual DbSet<CcSkvzReadyReservFactor> CcSkvzReadyReservFactor { get; set; }

    public virtual DbSet<CcSkvzReadyReservFactors> CcSkvzReadyReservFactors { get; set; }

    public virtual DbSet<CcSkvzRiskFreePosFactor> CcSkvzRiskFreePosFactor { get; set; }

    public virtual DbSet<CcSkvzRiskFreePosFactors> CcSkvzRiskFreePosFactors { get; set; }

    public virtual DbSet<CcSkvzSp> CcSkvzSp { get; set; }

    public virtual DbSet<CcSkvzSpActivityCr> CcSkvzSpActivityCr { get; set; }

    public virtual DbSet<CcSkvzSpActivityCrs> CcSkvzSpActivityCrs { get; set; }

    public virtual DbSet<CcSkvzSps> CcSkvzSps { get; set; }

    public virtual DbSet<CcSkvzStation> CcSkvzStation { get; set; }

    public virtual DbSet<CcSkvzStationBlock> CcSkvzStationBlock { get; set; }

    public virtual DbSet<CcSkvzStationBlockType> CcSkvzStationBlockType { get; set; }

    public virtual DbSet<CcSkvzStationBlockTypes> CcSkvzStationBlockTypes { get; set; }

    public virtual DbSet<CcSkvzStationBlocks> CcSkvzStationBlocks { get; set; }

    public virtual DbSet<CcSkvzStations> CcSkvzStations { get; set; }

    public virtual DbSet<CcSkvzSuccessor> CcSkvzSuccessor { get; set; }

    public virtual DbSet<CcSkvzSuccessors> CcSkvzSuccessors { get; set; }

    public virtual DbSet<CcSkvzWgMember> CcSkvzWgMember { get; set; }

    public virtual DbSet<CcSkvzWgMemberToType> CcSkvzWgMemberToType { get; set; }

    public virtual DbSet<CcSkvzWgMemberToTypes> CcSkvzWgMemberToTypes { get; set; }

    public virtual DbSet<CcSkvzWgMemberType> CcSkvzWgMemberType { get; set; }

    public virtual DbSet<CcSkvzWgMemberTypes> CcSkvzWgMemberTypes { get; set; }

    public virtual DbSet<CcSkvzWgMembers> CcSkvzWgMembers { get; set; }

    public virtual DbSet<CcSkvzYearPlan> CcSkvzYearPlan { get; set; }

    public virtual DbSet<CcSkvzYearPlanEvent> CcSkvzYearPlanEvent { get; set; }

    public virtual DbSet<CcSkvzYearPlanEvents> CcSkvzYearPlanEvents { get; set; }

    public virtual DbSet<CcSkvzYearPlans> CcSkvzYearPlans { get; set; }

    public virtual DbSet<CcStaffevalAgentManagment> CcStaffevalAgentManagment { get; set; }

    public virtual DbSet<CcStaffevalAgentManagments> CcStaffevalAgentManagments { get; set; }

    public virtual DbSet<CcStaffevalAttestation> CcStaffevalAttestation { get; set; }

    public virtual DbSet<CcStaffevalAttestations> CcStaffevalAttestations { get; set; }

    public virtual DbSet<CcStaffevalColsCategorie> CcStaffevalColsCategorie { get; set; }

    public virtual DbSet<CcStaffevalColsCategories> CcStaffevalColsCategories { get; set; }

    public virtual DbSet<CcStaffevalCorrection> CcStaffevalCorrection { get; set; }

    public virtual DbSet<CcStaffevalCorrectionDiv> CcStaffevalCorrectionDiv { get; set; }

    public virtual DbSet<CcStaffevalCorrectionDivs> CcStaffevalCorrectionDivs { get; set; }

    public virtual DbSet<CcStaffevalCorrections> CcStaffevalCorrections { get; set; }

    public virtual DbSet<CcStaffevalCurator> CcStaffevalCurator { get; set; }

    public virtual DbSet<CcStaffevalCurators> CcStaffevalCurators { get; set; }

    public virtual DbSet<CcStaffevalDirection> CcStaffevalDirection { get; set; }

    public virtual DbSet<CcStaffevalDirections> CcStaffevalDirections { get; set; }

    public virtual DbSet<CcStaffevalDocument> CcStaffevalDocument { get; set; }

    public virtual DbSet<CcStaffevalDocumentCode> CcStaffevalDocumentCode { get; set; }

    public virtual DbSet<CcStaffevalDocumentCodes> CcStaffevalDocumentCodes { get; set; }

    public virtual DbSet<CcStaffevalDocuments> CcStaffevalDocuments { get; set; }

    public virtual DbSet<CcStaffevalEduHour> CcStaffevalEduHour { get; set; }

    public virtual DbSet<CcStaffevalEduHours> CcStaffevalEduHours { get; set; }

    public virtual DbSet<CcStaffevalFile> CcStaffevalFile { get; set; }

    public virtual DbSet<CcStaffevalFiles> CcStaffevalFiles { get; set; }

    public virtual DbSet<CcStaffevalFirstDocument> CcStaffevalFirstDocument { get; set; }

    public virtual DbSet<CcStaffevalFirstDocuments> CcStaffevalFirstDocuments { get; set; }

    public virtual DbSet<CcStaffevalFirstQual> CcStaffevalFirstQual { get; set; }

    public virtual DbSet<CcStaffevalFirstQuals> CcStaffevalFirstQuals { get; set; }

    public virtual DbSet<CcStaffevalInsPeriod> CcStaffevalInsPeriod { get; set; }

    public virtual DbSet<CcStaffevalInsPeriods> CcStaffevalInsPeriods { get; set; }

    public virtual DbSet<CcStaffevalInsQualification> CcStaffevalInsQualification { get; set; }

    public virtual DbSet<CcStaffevalInsQualifications> CcStaffevalInsQualifications { get; set; }

    public virtual DbSet<CcStaffevalInstructor> CcStaffevalInstructor { get; set; }

    public virtual DbSet<CcStaffevalInstructors> CcStaffevalInstructors { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsPerekr> CcStaffevalLogAgntsPerekr { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsPerekrs> CcStaffevalLogAgntsPerekrs { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsQual> CcStaffevalLogAgntsQual { get; set; }

    public virtual DbSet<CcStaffevalLogAgntsQuals> CcStaffevalLogAgntsQuals { get; set; }

    public virtual DbSet<CcStaffevalPgPerekrest> CcStaffevalPgPerekrest { get; set; }

    public virtual DbSet<CcStaffevalPgPerekrests> CcStaffevalPgPerekrests { get; set; }

    public virtual DbSet<CcStaffevalPollProcedure> CcStaffevalPollProcedure { get; set; }

    public virtual DbSet<CcStaffevalPollProcedures> CcStaffevalPollProcedures { get; set; }

    public virtual DbSet<CcStaffevalPollsItem> CcStaffevalPollsItem { get; set; }

    public virtual DbSet<CcStaffevalPollsItems> CcStaffevalPollsItems { get; set; }

    public virtual DbSet<CcStaffevalPollsPUser> CcStaffevalPollsPUser { get; set; }

    public virtual DbSet<CcStaffevalPollsPUsers> CcStaffevalPollsPUsers { get; set; }

    public virtual DbSet<CcStaffevalPollsResult> CcStaffevalPollsResult { get; set; }

    public virtual DbSet<CcStaffevalPollsResults> CcStaffevalPollsResults { get; set; }

    public virtual DbSet<CcStaffevalPollsType> CcStaffevalPollsType { get; set; }

    public virtual DbSet<CcStaffevalPollsTypes> CcStaffevalPollsTypes { get; set; }

    public virtual DbSet<CcStaffevalPosition> CcStaffevalPosition { get; set; }

    public virtual DbSet<CcStaffevalPositionCa> CcStaffevalPositionCa { get; set; }

    public virtual DbSet<CcStaffevalPositionCas> CcStaffevalPositionCas { get; set; }

    public virtual DbSet<CcStaffevalPositions> CcStaffevalPositions { get; set; }

    public virtual DbSet<CcStaffevalPpdCa> CcStaffevalPpdCa { get; set; }

    public virtual DbSet<CcStaffevalPpdCaFirstPlan> CcStaffevalPpdCaFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalPpdCaFirstPlans> CcStaffevalPpdCaFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalPpdCas> CcStaffevalPpdCas { get; set; }

    public virtual DbSet<CcStaffevalPpdFixedCa> CcStaffevalPpdFixedCa { get; set; }

    public virtual DbSet<CcStaffevalPpdFixedCas> CcStaffevalPpdFixedCas { get; set; }

    public virtual DbSet<CcStaffevalPpdSp> CcStaffevalPpdSp { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFirstPlan> CcStaffevalPpdSpFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFirstPlans> CcStaffevalPpdSpFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFixed> CcStaffevalPpdSpFixed { get; set; }

    public virtual DbSet<CcStaffevalPpdSpFixeds> CcStaffevalPpdSpFixeds { get; set; }

    public virtual DbSet<CcStaffevalPpdSps> CcStaffevalPpdSps { get; set; }

    public virtual DbSet<CcStaffevalPpk> CcStaffevalPpk { get; set; }

    public virtual DbSet<CcStaffevalPpkCa> CcStaffevalPpkCa { get; set; }

    public virtual DbSet<CcStaffevalPpkCas> CcStaffevalPpkCas { get; set; }

    public virtual DbSet<CcStaffevalPpkSpFromCa> CcStaffevalPpkSpFromCa { get; set; }

    public virtual DbSet<CcStaffevalPpkSpFromCas> CcStaffevalPpkSpFromCas { get; set; }

    public virtual DbSet<CcStaffevalPpks> CcStaffevalPpks { get; set; }

    public virtual DbSet<CcStaffevalProcessName> CcStaffevalProcessName { get; set; }

    public virtual DbSet<CcStaffevalProcessNames> CcStaffevalProcessNames { get; set; }

    public virtual DbSet<CcStaffevalQualification> CcStaffevalQualification { get; set; }

    public virtual DbSet<CcStaffevalQualifications> CcStaffevalQualifications { get; set; }

    public virtual DbSet<CcStaffevalRmdCa> CcStaffevalRmdCa { get; set; }

    public virtual DbSet<CcStaffevalRmdCaFirstPlan> CcStaffevalRmdCaFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalRmdCaFirstPlans> CcStaffevalRmdCaFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalRmdCas> CcStaffevalRmdCas { get; set; }

    public virtual DbSet<CcStaffevalRmdFixedCa> CcStaffevalRmdFixedCa { get; set; }

    public virtual DbSet<CcStaffevalRmdFixedCas> CcStaffevalRmdFixedCas { get; set; }

    public virtual DbSet<CcStaffevalRmdSp> CcStaffevalRmdSp { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFirstPlan> CcStaffevalRmdSpFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFirstPlans> CcStaffevalRmdSpFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFixed> CcStaffevalRmdSpFixed { get; set; }

    public virtual DbSet<CcStaffevalRmdSpFixeds> CcStaffevalRmdSpFixeds { get; set; }

    public virtual DbSet<CcStaffevalRmdSps> CcStaffevalRmdSps { get; set; }

    public virtual DbSet<CcStaffevalRoom> CcStaffevalRoom { get; set; }

    public virtual DbSet<CcStaffevalRooms> CcStaffevalRooms { get; set; }

    public virtual DbSet<CcStaffevalStatusList> CcStaffevalStatusList { get; set; }

    public virtual DbSet<CcStaffevalStatusLists> CcStaffevalStatusLists { get; set; }

    public virtual DbSet<CcStaffevalTestPollsP> CcStaffevalTestPollsP { get; set; }

    public virtual DbSet<CcStaffevalTestPollsPs> CcStaffevalTestPollsPs { get; set; }

    public virtual DbSet<CcStaffevalTestPollsR> CcStaffevalTestPollsR { get; set; }

    public virtual DbSet<CcStaffevalTestPollsRs> CcStaffevalTestPollsRs { get; set; }

    public virtual DbSet<CcStaffevalTestPollsU> CcStaffevalTestPollsU { get; set; }

    public virtual DbSet<CcStaffevalTestPollsUs> CcStaffevalTestPollsUs { get; set; }

    public virtual DbSet<CcStaffevalTso> CcStaffevalTso { get; set; }

    public virtual DbSet<CcStaffevalTsos> CcStaffevalTsos { get; set; }

    public virtual DbSet<CcStaffevalTypeRoom> CcStaffevalTypeRoom { get; set; }

    public virtual DbSet<CcStaffevalTypeRooms> CcStaffevalTypeRooms { get; set; }

    public virtual DbSet<CcStaffevalTypeTso> CcStaffevalTypeTso { get; set; }

    public virtual DbSet<CcStaffevalTypeTsos> CcStaffevalTypeTsos { get; set; }

    public virtual DbSet<CcStaffevalUmmCa> CcStaffevalUmmCa { get; set; }

    public virtual DbSet<CcStaffevalUmmCaFirstPlan> CcStaffevalUmmCaFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalUmmCaFirstPlans> CcStaffevalUmmCaFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalUmmCas> CcStaffevalUmmCas { get; set; }

    public virtual DbSet<CcStaffevalUmmFixedCa> CcStaffevalUmmFixedCa { get; set; }

    public virtual DbSet<CcStaffevalUmmFixedCas> CcStaffevalUmmFixedCas { get; set; }

    public virtual DbSet<CcStaffevalUmmSp> CcStaffevalUmmSp { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFirstPlan> CcStaffevalUmmSpFirstPlan { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFirstPlans> CcStaffevalUmmSpFirstPlans { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFixed> CcStaffevalUmmSpFixed { get; set; }

    public virtual DbSet<CcStaffevalUmmSpFixeds> CcStaffevalUmmSpFixeds { get; set; }

    public virtual DbSet<CcStaffevalUmmSps> CcStaffevalUmmSps { get; set; }

    public virtual DbSet<CcStaffevalUtpDepartment> CcStaffevalUtpDepartment { get; set; }

    public virtual DbSet<CcStaffevalUtpDepartments> CcStaffevalUtpDepartments { get; set; }

    public virtual DbSet<CcStaffevalUtpDiv> CcStaffevalUtpDiv { get; set; }

    public virtual DbSet<CcStaffevalUtpDivs> CcStaffevalUtpDivs { get; set; }

    public virtual DbSet<CcStaffevalUtpGroup> CcStaffevalUtpGroup { get; set; }

    public virtual DbSet<CcStaffevalUtpGroups> CcStaffevalUtpGroups { get; set; }

    public virtual DbSet<CcTemplateTheme> CcTemplateTheme { get; set; }

    public virtual DbSet<CcTemplateThemes> CcTemplateThemes { get; set; }

    public virtual DbSet<CcTheme> CcTheme { get; set; }

    public virtual DbSet<CcThemes> CcThemes { get; set; }

    public virtual DbSet<CcTrainingSubject> CcTrainingSubject { get; set; }

    public virtual DbSet<CcTrainingSubjects> CcTrainingSubjects { get; set; }

    public virtual DbSet<CcVersion> CcVersion { get; set; }

    public virtual DbSet<CcVersions> CcVersions { get; set; }

    public virtual DbSet<CcWebNotification> CcWebNotification { get; set; }

    public virtual DbSet<CcWebNotifications> CcWebNotifications { get; set; }

    public virtual DbSet<Certificate> Certificate { get; set; }

    public virtual DbSet<CertificateType> CertificateType { get; set; }

    public virtual DbSet<CertificateTypes> CertificateTypes { get; set; }

    public virtual DbSet<Certificates> Certificates { get; set; }

    public virtual DbSet<CfEducationMethods> CfEducationMethods { get; set; }

    public virtual DbSet<CfPkThemes> CfPkThemes { get; set; }

    public virtual DbSet<CfRequests> CfRequests { get; set; }

    public virtual DbSet<Change> Change { get; set; }

    public virtual DbSet<Changes> Changes { get; set; }

    public virtual DbSet<ChannelProvider> ChannelProvider { get; set; }

    public virtual DbSet<ChannelProviders> ChannelProviders { get; set; }

    public virtual DbSet<Chat> Chat { get; set; }

    public virtual DbSet<Chatbot> Chatbot { get; set; }

    public virtual DbSet<ChatbotChat> ChatbotChat { get; set; }

    public virtual DbSet<ChatbotChatbotTypes> ChatbotChatbotTypes { get; set; }

    public virtual DbSet<ChatbotChats> ChatbotChats { get; set; }

    public virtual DbSet<ChatbotStage> ChatbotStage { get; set; }

    public virtual DbSet<ChatbotStages> ChatbotStages { get; set; }

    public virtual DbSet<ChatbotType> ChatbotType { get; set; }

    public virtual DbSet<ChatbotTypes> ChatbotTypes { get; set; }

    public virtual DbSet<Chatbots> Chatbots { get; set; }

    public virtual DbSet<Chats> Chats { get; set; }

    public virtual DbSet<CheckSchedule> CheckSchedule { get; set; }

    public virtual DbSet<CheckSchedules> CheckSchedules { get; set; }

    public virtual DbSet<ClConst> ClConst { get; set; }

    public virtual DbSet<ClConsts> ClConsts { get; set; }

    public virtual DbSet<ClCourse> ClCourse { get; set; }

    public virtual DbSet<ClCourses> ClCourses { get; set; }

    public virtual DbSet<ClLocalization> ClLocalization { get; set; }

    public virtual DbSet<ClLocalizations> ClLocalizations { get; set; }

    public virtual DbSet<ClModule> ClModule { get; set; }

    public virtual DbSet<ClModules> ClModules { get; set; }

    public virtual DbSet<ClObject> ClObject { get; set; }

    public virtual DbSet<ClObjects> ClObjects { get; set; }

    public virtual DbSet<ClShape> ClShape { get; set; }

    public virtual DbSet<ClShapes> ClShapes { get; set; }

    public virtual DbSet<ClSlide> ClSlide { get; set; }

    public virtual DbSet<ClSlides> ClSlides { get; set; }

    public virtual DbSet<ClVideoCourse> ClVideoCourse { get; set; }

    public virtual DbSet<ClVideoCourses> ClVideoCourses { get; set; }

    public virtual DbSet<ClassificationModel> ClassificationModel { get; set; }

    public virtual DbSet<ClassificationModels> ClassificationModels { get; set; }

    public virtual DbSet<ClosingDocument> ClosingDocument { get; set; }

    public virtual DbSet<ClosingDocumentStatus> ClosingDocumentStatus { get; set; }

    public virtual DbSet<ClosingDocumentStatuss> ClosingDocumentStatuss { get; set; }

    public virtual DbSet<ClosingDocuments> ClosingDocuments { get; set; }

    public virtual DbSet<CodeLibrary> CodeLibrary { get; set; }

    public virtual DbSet<CodeLibrarys> CodeLibrarys { get; set; }

    public virtual DbSet<Coding> Coding { get; set; }

    public virtual DbSet<Codings> Codings { get; set; }

    public virtual DbSet<Collaborator> Collaborator { get; set; }

    public virtual DbSet<CollaboratorSchedule> CollaboratorSchedule { get; set; }

    public virtual DbSet<CollaboratorSchedules> CollaboratorSchedules { get; set; }

    public virtual DbSet<Collaborators> Collaborators { get; set; }

    public virtual DbSet<CommitteeMember> CommitteeMember { get; set; }

    public virtual DbSet<CommitteeMembers> CommitteeMembers { get; set; }

    public virtual DbSet<CommonAcademDebtStates> CommonAcademDebtStates { get; set; }

    public virtual DbSet<CommonAccessBlockTypes> CommonAccessBlockTypes { get; set; }

    public virtual DbSet<CommonAccessObjectTypes> CommonAccessObjectTypes { get; set; }

    public virtual DbSet<CommonAccountStatusTypes> CommonAccountStatusTypes { get; set; }

    public virtual DbSet<CommonAcquaintConfirmationTypes> CommonAcquaintConfirmationTypes { get; set; }

    public virtual DbSet<CommonAcquaintQuestionTypes> CommonAcquaintQuestionTypes { get; set; }

    public virtual DbSet<CommonAcquaintStates> CommonAcquaintStates { get; set; }

    public virtual DbSet<CommonAcquaintTypes> CommonAcquaintTypes { get; set; }

    public virtual DbSet<CommonActionReportTypes> CommonActionReportTypes { get; set; }

    public virtual DbSet<CommonActionStatusTypes> CommonActionStatusTypes { get; set; }

    public virtual DbSet<CommonActiveNotificationStatusTypes> CommonActiveNotificationStatusTypes { get; set; }

    public virtual DbSet<CommonAggregationTypes> CommonAggregationTypes { get; set; }

    public virtual DbSet<CommonAgreementStatusTypes> CommonAgreementStatusTypes { get; set; }

    public virtual DbSet<CommonAllOptionTypes> CommonAllOptionTypes { get; set; }

    public virtual DbSet<CommonAnnalsItemTypes> CommonAnnalsItemTypes { get; set; }

    public virtual DbSet<CommonAnnalsStates> CommonAnnalsStates { get; set; }

    public virtual DbSet<CommonApplicationStates> CommonApplicationStates { get; set; }

    public virtual DbSet<CommonApplicationTypes> CommonApplicationTypes { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseParameters> CommonAssessmentAppraiseParameters { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseParticipants> CommonAssessmentAppraiseParticipants { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseRecommendTypes> CommonAssessmentAppraiseRecommendTypes { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseStatuses> CommonAssessmentAppraiseStatuses { get; set; }

    public virtual DbSet<CommonAssessmentAppraiseTypes> CommonAssessmentAppraiseTypes { get; set; }

    public virtual DbSet<CommonAssessmentExternalTypes> CommonAssessmentExternalTypes { get; set; }

    public virtual DbSet<CommonAssessmentStages> CommonAssessmentStages { get; set; }

    public virtual DbSet<CommonAvailabilityStates> CommonAvailabilityStates { get; set; }

    public virtual DbSet<CommonAzureRoleSizeTypes> CommonAzureRoleSizeTypes { get; set; }

    public virtual DbSet<CommonBenefitItemStatuses> CommonBenefitItemStatuses { get; set; }

    public virtual DbSet<CommonBenefitStatuses> CommonBenefitStatuses { get; set; }

    public virtual DbSet<CommonBlockMessageStates> CommonBlockMessageStates { get; set; }

    public virtual DbSet<CommonBlogTypes> CommonBlogTypes { get; set; }

    public virtual DbSet<CommonBudgetStateTypes> CommonBudgetStateTypes { get; set; }

    public virtual DbSet<CommonCareerReserveMaterialTypes> CommonCareerReserveMaterialTypes { get; set; }

    public virtual DbSet<CommonCareerReserveStatusTypes> CommonCareerReserveStatusTypes { get; set; }

    public virtual DbSet<CommonCareerReserveTasksTypes> CommonCareerReserveTasksTypes { get; set; }

    public virtual DbSet<CommonCareerReserveTypeTasksTypes> CommonCareerReserveTypeTasksTypes { get; set; }

    public virtual DbSet<CommonCareerTransitionDirectionTypes> CommonCareerTransitionDirectionTypes { get; set; }

    public virtual DbSet<CommonCharts> CommonCharts { get; set; }

    public virtual DbSet<CommonChatbotActionTypes> CommonChatbotActionTypes { get; set; }

    public virtual DbSet<CommonChatbotButtonTypes> CommonChatbotButtonTypes { get; set; }

    public virtual DbSet<CommonChatbotOutTypes> CommonChatbotOutTypes { get; set; }

    public virtual DbSet<CommonChatbotTileTypes> CommonChatbotTileTypes { get; set; }

    public virtual DbSet<CommonCheckScheduleTypes> CommonCheckScheduleTypes { get; set; }

    public virtual DbSet<CommonClApprovalStates> CommonClApprovalStates { get; set; }

    public virtual DbSet<CommonClAuthorTypes> CommonClAuthorTypes { get; set; }

    public virtual DbSet<CommonClObjectGroups> CommonClObjectGroups { get; set; }

    public virtual DbSet<CommonClStates> CommonClStates { get; set; }

    public virtual DbSet<CommonCollectStates> CommonCollectStates { get; set; }

    public virtual DbSet<CommonCommitteeMemberStatusTypes> CommonCommitteeMemberStatusTypes { get; set; }

    public virtual DbSet<CommonCommitteeMemberTypes> CommonCommitteeMemberTypes { get; set; }

    public virtual DbSet<CommonConfirmationExpertTypes> CommonConfirmationExpertTypes { get; set; }

    public virtual DbSet<CommonConfirmationTypes> CommonConfirmationTypes { get; set; }

    public virtual DbSet<CommonContactStatusTypes> CommonContactStatusTypes { get; set; }

    public virtual DbSet<CommonContentItems> CommonContentItems { get; set; }

    public virtual DbSet<CommonContestStates> CommonContestStates { get; set; }

    public virtual DbSet<CommonContestTypes> CommonContestTypes { get; set; }

    public virtual DbSet<CommonContestWebTemplates> CommonContestWebTemplates { get; set; }

    public virtual DbSet<CommonConversationFormats> CommonConversationFormats { get; set; }

    public virtual DbSet<CommonConversationMessageStates> CommonConversationMessageStates { get; set; }

    public virtual DbSet<CommonConversationObjectTypes> CommonConversationObjectTypes { get; set; }

    public virtual DbSet<CommonConversationParticipantStates> CommonConversationParticipantStates { get; set; }

    public virtual DbSet<CommonConversationVisibleTypes> CommonConversationVisibleTypes { get; set; }

    public virtual DbSet<CommonCostTypes> CommonCostTypes { get; set; }

    public virtual DbSet<CommonCourseExpertTypes> CommonCourseExpertTypes { get; set; }

    public virtual DbSet<CommonCourseImportTypes> CommonCourseImportTypes { get; set; }

    public virtual DbSet<CommonCoursePartTypes> CommonCoursePartTypes { get; set; }

    public virtual DbSet<CommonCourseTestStates> CommonCourseTestStates { get; set; }

    public virtual DbSet<CommonCovenantStatusTypes> CommonCovenantStatusTypes { get; set; }

    public virtual DbSet<CommonCreateTaskTypes> CommonCreateTaskTypes { get; set; }

    public virtual DbSet<CommonCurriculumTypes> CommonCurriculumTypes { get; set; }

    public virtual DbSet<CommonCwtTypes> CommonCwtTypes { get; set; }

    public virtual DbSet<CommonDayTypes> CommonDayTypes { get; set; }

    public virtual DbSet<CommonDeliveryTypes> CommonDeliveryTypes { get; set; }

    public virtual DbSet<CommonDesignVscodeAccessTypes> CommonDesignVscodeAccessTypes { get; set; }

    public virtual DbSet<CommonDesignVscodeSaveTypes> CommonDesignVscodeSaveTypes { get; set; }

    public virtual DbSet<CommonDischargeDbTypes> CommonDischargeDbTypes { get; set; }

    public virtual DbSet<CommonDischargeTypes> CommonDischargeTypes { get; set; }

    public virtual DbSet<CommonDocumentSentTypes> CommonDocumentSentTypes { get; set; }

    public virtual DbSet<CommonEditTaskTypes> CommonEditTaskTypes { get; set; }

    public virtual DbSet<CommonEducTypes> CommonEducTypes { get; set; }

    public virtual DbSet<CommonEducationLearningStates> CommonEducationLearningStates { get; set; }

    public virtual DbSet<CommonEducationMethodStates> CommonEducationMethodStates { get; set; }

    public virtual DbSet<CommonEducationMethodTypes> CommonEducationMethodTypes { get; set; }

    public virtual DbSet<CommonEmploymentKinds> CommonEmploymentKinds { get; set; }

    public virtual DbSet<CommonEmploymentTypes> CommonEmploymentTypes { get; set; }

    public virtual DbSet<CommonEncodingTypes> CommonEncodingTypes { get; set; }

    public virtual DbSet<CommonEstaffEventStatusTypes> CommonEstaffEventStatusTypes { get; set; }

    public virtual DbSet<CommonEvalCodeTypes> CommonEvalCodeTypes { get; set; }

    public virtual DbSet<CommonEvalTextTypes> CommonEvalTextTypes { get; set; }

    public virtual DbSet<CommonEvalTypes> CommonEvalTypes { get; set; }

    public virtual DbSet<CommonEventFileVisibilityTypes> CommonEventFileVisibilityTypes { get; set; }

    public virtual DbSet<CommonEventResultStatusTypes> CommonEventResultStatusTypes { get; set; }

    public virtual DbSet<CommonEventStatusTypes> CommonEventStatusTypes { get; set; }

    public virtual DbSet<CommonEventTypes> CommonEventTypes { get; set; }

    public virtual DbSet<CommonExchangeObjectTypes> CommonExchangeObjectTypes { get; set; }

    public virtual DbSet<CommonExpendedEducTypes> CommonExpendedEducTypes { get; set; }

    public virtual DbSet<CommonExpertEvalTypes> CommonExpertEvalTypes { get; set; }

    public virtual DbSet<CommonFieldNameTypes> CommonFieldNameTypes { get; set; }

    public virtual DbSet<CommonFieldTypes> CommonFieldTypes { get; set; }

    public virtual DbSet<CommonFilterTypes> CommonFilterTypes { get; set; }

    public virtual DbSet<CommonForumPersonInfoTypes> CommonForumPersonInfoTypes { get; set; }

    public virtual DbSet<CommonForumSmileTypes> CommonForumSmileTypes { get; set; }

    public virtual DbSet<CommonGoodInstanceStatusTypes> CommonGoodInstanceStatusTypes { get; set; }

    public virtual DbSet<CommonGoodStates> CommonGoodStates { get; set; }

    public virtual DbSet<CommonGradingOptionTypes> CommonGradingOptionTypes { get; set; }

    public virtual DbSet<CommonGraphTypes> CommonGraphTypes { get; set; }

    public virtual DbSet<CommonIndicatorTypes> CommonIndicatorTypes { get; set; }

    public virtual DbSet<CommonInteractionTypes> CommonInteractionTypes { get; set; }

    public virtual DbSet<CommonItemStatusTypes> CommonItemStatusTypes { get; set; }

    public virtual DbSet<CommonItemTypes> CommonItemTypes { get; set; }

    public virtual DbSet<CommonJobTransferTypes> CommonJobTransferTypes { get; set; }

    public virtual DbSet<CommonJoinModeTypes> CommonJoinModeTypes { get; set; }

    public virtual DbSet<CommonKeyPositionStatusTypes> CommonKeyPositionStatusTypes { get; set; }

    public virtual DbSet<CommonKeyboardTypes> CommonKeyboardTypes { get; set; }

    public virtual DbSet<CommonKnowledgeAcquaintStates> CommonKnowledgeAcquaintStates { get; set; }

    public virtual DbSet<CommonKnowledgeAcquaintTypes> CommonKnowledgeAcquaintTypes { get; set; }

    public virtual DbSet<CommonKnowledgePartsObjects> CommonKnowledgePartsObjects { get; set; }

    public virtual DbSet<CommonKpiCalcTypes> CommonKpiCalcTypes { get; set; }

    public virtual DbSet<CommonKpiStates> CommonKpiStates { get; set; }

    public virtual DbSet<CommonKpiTypes> CommonKpiTypes { get; set; }

    public virtual DbSet<CommonLanguageLevels> CommonLanguageLevels { get; set; }

    public virtual DbSet<CommonLanguages> CommonLanguages { get; set; }

    public virtual DbSet<CommonLayerTypes> CommonLayerTypes { get; set; }

    public virtual DbSet<CommonLearningCatalogs> CommonLearningCatalogs { get; set; }

    public virtual DbSet<CommonLearningDynamicsCategoryTypes> CommonLearningDynamicsCategoryTypes { get; set; }

    public virtual DbSet<CommonLearningRecordStatuss> CommonLearningRecordStatuss { get; set; }

    public virtual DbSet<CommonLearningStates> CommonLearningStates { get; set; }

    public virtual DbSet<CommonLearningStatisticsCategoryTypes> CommonLearningStatisticsCategoryTypes { get; set; }

    public virtual DbSet<CommonLearningTaskStatusTypes> CommonLearningTaskStatusTypes { get; set; }

    public virtual DbSet<CommonLectorTypes> CommonLectorTypes { get; set; }

    public virtual DbSet<CommonLessonStates> CommonLessonStates { get; set; }

    public virtual DbSet<CommonLibrarySectionWebTemplates> CommonLibrarySectionWebTemplates { get; set; }

    public virtual DbSet<CommonLibraryStates> CommonLibraryStates { get; set; }

    public virtual DbSet<CommonLinkingViews> CommonLinkingViews { get; set; }

    public virtual DbSet<CommonMaterialFormatTypes> CommonMaterialFormatTypes { get; set; }

    public virtual DbSet<CommonMaterialLocations> CommonMaterialLocations { get; set; }

    public virtual DbSet<CommonMessageStates> CommonMessageStates { get; set; }

    public virtual DbSet<CommonMessageTypes> CommonMessageTypes { get; set; }

    public virtual DbSet<CommonMonths> CommonMonths { get; set; }

    public virtual DbSet<CommonNodeTypes> CommonNodeTypes { get; set; }

    public virtual DbSet<CommonObjectParamBaseObjectTypes> CommonObjectParamBaseObjectTypes { get; set; }

    public virtual DbSet<CommonObjectResourceStates> CommonObjectResourceStates { get; set; }

    public virtual DbSet<CommonObjectflowConditionTypes> CommonObjectflowConditionTypes { get; set; }

    public virtual DbSet<CommonObjectflowOperationTypes> CommonObjectflowOperationTypes { get; set; }

    public virtual DbSet<CommonObjectiveStatusTypes> CommonObjectiveStatusTypes { get; set; }

    public virtual DbSet<CommonObjectiveSuccessStatusTypes> CommonObjectiveSuccessStatusTypes { get; set; }

    public virtual DbSet<CommonOperationTypes> CommonOperationTypes { get; set; }

    public virtual DbSet<CommonOracleDbTypes> CommonOracleDbTypes { get; set; }

    public virtual DbSet<CommonOrderStatusTypes> CommonOrderStatusTypes { get; set; }

    public virtual DbSet<CommonOrderTypes> CommonOrderTypes { get; set; }

    public virtual DbSet<CommonOutTypes> CommonOutTypes { get; set; }

    public virtual DbSet<CommonOutstaffContractTypes> CommonOutstaffContractTypes { get; set; }

    public virtual DbSet<CommonOutstaffOrderExecutionStatusTypes> CommonOutstaffOrderExecutionStatusTypes { get; set; }

    public virtual DbSet<CommonPackageStatusTypes> CommonPackageStatusTypes { get; set; }

    public virtual DbSet<CommonPackageTypes> CommonPackageTypes { get; set; }

    public virtual DbSet<CommonParticipantStates> CommonParticipantStates { get; set; }

    public virtual DbSet<CommonPassportTypes> CommonPassportTypes { get; set; }

    public virtual DbSet<CommonPaymentTypes> CommonPaymentTypes { get; set; }

    public virtual DbSet<CommonPerfomConditionTypes> CommonPerfomConditionTypes { get; set; }

    public virtual DbSet<CommonPeriodCalcTypes> CommonPeriodCalcTypes { get; set; }

    public virtual DbSet<CommonPeriodicityTypes> CommonPeriodicityTypes { get; set; }

    public virtual DbSet<CommonPerioditys> CommonPerioditys { get; set; }

    public virtual DbSet<CommonPersonnelCommitteeStatusTypes> CommonPersonnelCommitteeStatusTypes { get; set; }

    public virtual DbSet<CommonPersonnelDocumentStates> CommonPersonnelDocumentStates { get; set; }

    public virtual DbSet<CommonPersonnelReserveStatusTypes> CommonPersonnelReserveStatusTypes { get; set; }

    public virtual DbSet<CommonPersonnelReserveTaskStatusTypes> CommonPersonnelReserveTaskStatusTypes { get; set; }

    public virtual DbSet<CommonPlayerDisplayTypes> CommonPlayerDisplayTypes { get; set; }

    public virtual DbSet<CommonPlayerLanguages> CommonPlayerLanguages { get; set; }

    public virtual DbSet<CommonPlayerPositions> CommonPlayerPositions { get; set; }

    public virtual DbSet<CommonPlayerRubricDisplayTypes> CommonPlayerRubricDisplayTypes { get; set; }

    public virtual DbSet<CommonPlayerSendTypes> CommonPlayerSendTypes { get; set; }

    public virtual DbSet<CommonPlayerTypes> CommonPlayerTypes { get; set; }

    public virtual DbSet<CommonPollItemTypes> CommonPollItemTypes { get; set; }

    public virtual DbSet<CommonPollTypes> CommonPollTypes { get; set; }

    public virtual DbSet<CommonPortalTypes> CommonPortalTypes { get; set; }

    public virtual DbSet<CommonPositionAssignmentTypes> CommonPositionAssignmentTypes { get; set; }

    public virtual DbSet<CommonPositionCommonStatuss> CommonPositionCommonStatuss { get; set; }

    public virtual DbSet<CommonPositionTypes> CommonPositionTypes { get; set; }

    public virtual DbSet<CommonPossibleStorages> CommonPossibleStorages { get; set; }

    public virtual DbSet<CommonPrintFormTypes> CommonPrintFormTypes { get; set; }

    public virtual DbSet<CommonProcessingMethods> CommonProcessingMethods { get; set; }

    public virtual DbSet<CommonProctorStates> CommonProctorStates { get; set; }

    public virtual DbSet<CommonProctoringObjects> CommonProctoringObjects { get; set; }

    public virtual DbSet<CommonProctoringSessionStates> CommonProctoringSessionStates { get; set; }

    public virtual DbSet<CommonProfessionalAreas> CommonProfessionalAreas { get; set; }

    public virtual DbSet<CommonProgDisciplStates> CommonProgDisciplStates { get; set; }

    public virtual DbSet<CommonProgressTypes> CommonProgressTypes { get; set; }

    public virtual DbSet<CommonProhibitionTypes> CommonProhibitionTypes { get; set; }

    public virtual DbSet<CommonProjectStatusTypes> CommonProjectStatusTypes { get; set; }

    public virtual DbSet<CommonQaFixtureTypes> CommonQaFixtureTypes { get; set; }

    public virtual DbSet<CommonQaTestAssertTemplateTypes> CommonQaTestAssertTemplateTypes { get; set; }

    public virtual DbSet<CommonQaTestAssertTypes> CommonQaTestAssertTypes { get; set; }

    public virtual DbSet<CommonQaTestResultCompletionStates> CommonQaTestResultCompletionStates { get; set; }

    public virtual DbSet<CommonQaTestResultStates> CommonQaTestResultStates { get; set; }

    public virtual DbSet<CommonQaTestStates> CommonQaTestStates { get; set; }

    public virtual DbSet<CommonQaTestTypes> CommonQaTestTypes { get; set; }

    public virtual DbSet<CommonQualificationAssignmentStates> CommonQualificationAssignmentStates { get; set; }

    public virtual DbSet<CommonQualificationStatuss> CommonQualificationStatuss { get; set; }

    public virtual DbSet<CommonReactionTypes> CommonReactionTypes { get; set; }

    public virtual DbSet<CommonRecipientTypes> CommonRecipientTypes { get; set; }

    public virtual DbSet<CommonRecruitmentPlanStateTypes> CommonRecruitmentPlanStateTypes { get; set; }

    public virtual DbSet<CommonRegistrTypes> CommonRegistrTypes { get; set; }

    public virtual DbSet<CommonRequestStatusTypes> CommonRequestStatusTypes { get; set; }

    public virtual DbSet<CommonResourceTypes> CommonResourceTypes { get; set; }

    public virtual DbSet<CommonResponseStatusTypes> CommonResponseStatusTypes { get; set; }

    public virtual DbSet<CommonResultFieldTypes> CommonResultFieldTypes { get; set; }

    public virtual DbSet<CommonSchedulerTypes> CommonSchedulerTypes { get; set; }

    public virtual DbSet<CommonSentenceOptionTypes> CommonSentenceOptionTypes { get; set; }

    public virtual DbSet<CommonServerAgentTypes> CommonServerAgentTypes { get; set; }

    public virtual DbSet<CommonServerRunModes> CommonServerRunModes { get; set; }

    public virtual DbSet<CommonServerSettings> CommonServerSettings { get; set; }

    public virtual DbSet<CommonServiceProviderTypes> CommonServiceProviderTypes { get; set; }

    public virtual DbSet<CommonSignatureTypes> CommonSignatureTypes { get; set; }

    public virtual DbSet<CommonSocialAvatarPriorityTypes> CommonSocialAvatarPriorityTypes { get; set; }

    public virtual DbSet<CommonSpxmlTypes> CommonSpxmlTypes { get; set; }

    public virtual DbSet<CommonStatementComponentPropertys> CommonStatementComponentPropertys { get; set; }

    public virtual DbSet<CommonStatusInKnowledgeMapTypes> CommonStatusInKnowledgeMapTypes { get; set; }

    public virtual DbSet<CommonStudDocTypes> CommonStudDocTypes { get; set; }

    public virtual DbSet<CommonStudGroupStates> CommonStudGroupStates { get; set; }

    public virtual DbSet<CommonStudTypes> CommonStudTypes { get; set; }

    public virtual DbSet<CommonStudWorkStates> CommonStudWorkStates { get; set; }

    public virtual DbSet<CommonStudentStates> CommonStudentStates { get; set; }

    public virtual DbSet<CommonSubmissionStates> CommonSubmissionStates { get; set; }

    public virtual DbSet<CommonSubstitutionStatusTypes> CommonSubstitutionStatusTypes { get; set; }

    public virtual DbSet<CommonSuccessorStatusTypes> CommonSuccessorStatusTypes { get; set; }

    public virtual DbSet<CommonSupplementaryQuestionTypes> CommonSupplementaryQuestionTypes { get; set; }

    public virtual DbSet<CommonSystemEventOperationTypes> CommonSystemEventOperationTypes { get; set; }

    public virtual DbSet<CommonTariffRateTypes> CommonTariffRateTypes { get; set; }

    public virtual DbSet<CommonTaskStatuses> CommonTaskStatuses { get; set; }

    public virtual DbSet<CommonTemplateCacheTypes> CommonTemplateCacheTypes { get; set; }

    public virtual DbSet<CommonTemplateFieldTypes> CommonTemplateFieldTypes { get; set; }

    public virtual DbSet<CommonTestProjectTypes> CommonTestProjectTypes { get; set; }

    public virtual DbSet<CommonTimezones> CommonTimezones { get; set; }

    public virtual DbSet<CommonTraningOrderStates> CommonTraningOrderStates { get; set; }

    public virtual DbSet<CommonTriggerTypes> CommonTriggerTypes { get; set; }

    public virtual DbSet<CommonTutorStatusTypes> CommonTutorStatusTypes { get; set; }

    public virtual DbSet<CommonTypeMarks> CommonTypeMarks { get; set; }

    public virtual DbSet<CommonTypicalDevelopmentProgramStatuss> CommonTypicalDevelopmentProgramStatuss { get; set; }

    public virtual DbSet<CommonUploadTypes> CommonUploadTypes { get; set; }

    public virtual DbSet<CommonUsageObjectTypes> CommonUsageObjectTypes { get; set; }

    public virtual DbSet<CommonVacancyResponseStatusTypes> CommonVacancyResponseStatusTypes { get; set; }

    public virtual DbSet<CommonVclassLearningCatalogs> CommonVclassLearningCatalogs { get; set; }

    public virtual DbSet<CommonVendorStatusTypes> CommonVendorStatusTypes { get; set; }

    public virtual DbSet<CommonVideoFormats> CommonVideoFormats { get; set; }

    public virtual DbSet<CommonViewTaskTypes> CommonViewTaskTypes { get; set; }

    public virtual DbSet<CommonViewingStates> CommonViewingStates { get; set; }

    public virtual DbSet<CommonViolationStates> CommonViolationStates { get; set; }

    public virtual DbSet<CommonViolationTypes> CommonViolationTypes { get; set; }

    public virtual DbSet<CommonWebFilterTypes> CommonWebFilterTypes { get; set; }

    public virtual DbSet<CommonWebPersonStateTypes> CommonWebPersonStateTypes { get; set; }

    public virtual DbSet<CommonWebTemplateTypes> CommonWebTemplateTypes { get; set; }

    public virtual DbSet<CommonWebsoftApps> CommonWebsoftApps { get; set; }

    public virtual DbSet<CommonWeekDayTypes> CommonWeekDayTypes { get; set; }

    public virtual DbSet<CommonWeekDays> CommonWeekDays { get; set; }

    public virtual DbSet<CommonWeekTypes> CommonWeekTypes { get; set; }

    public virtual DbSet<CommonWikiBaseStatuses> CommonWikiBaseStatuses { get; set; }

    public virtual DbSet<CommonWikiBaseTypes> CommonWikiBaseTypes { get; set; }

    public virtual DbSet<CommonWikiCommunicationTypes> CommonWikiCommunicationTypes { get; set; }

    public virtual DbSet<CommonWillingnessTravelTypes> CommonWillingnessTravelTypes { get; set; }

    public virtual DbSet<CommonWorkTypes> CommonWorkTypes { get; set; }

    public virtual DbSet<CommonWorkflowOperationTypes> CommonWorkflowOperationTypes { get; set; }

    public virtual DbSet<CommonWorkingConditionStates> CommonWorkingConditionStates { get; set; }

    public virtual DbSet<CommonWorkspaceThemes> CommonWorkspaceThemes { get; set; }

    public virtual DbSet<CommonXamlInterpreters> CommonXamlInterpreters { get; set; }

    public virtual DbSet<Competence> Competence { get; set; }

    public virtual DbSet<CompetenceBlock> CompetenceBlock { get; set; }

    public virtual DbSet<CompetenceBlocks> CompetenceBlocks { get; set; }

    public virtual DbSet<CompetenceProfile> CompetenceProfile { get; set; }

    public virtual DbSet<CompetenceProfileFamily> CompetenceProfileFamily { get; set; }

    public virtual DbSet<CompetenceProfileFamilys> CompetenceProfileFamilys { get; set; }

    public virtual DbSet<CompetenceProfiles> CompetenceProfiles { get; set; }

    public virtual DbSet<Competences> Competences { get; set; }

    public virtual DbSet<ComponentPackage> ComponentPackage { get; set; }

    public virtual DbSet<ComponentPackages> ComponentPackages { get; set; }

    public virtual DbSet<CompoundProgram> CompoundProgram { get; set; }

    public virtual DbSet<CompoundProgramEducationMethods> CompoundProgramEducationMethods { get; set; }

    public virtual DbSet<CompoundPrograms> CompoundPrograms { get; set; }

    public virtual DbSet<Connection> Connection { get; set; }

    public virtual DbSet<Connections> Connections { get; set; }

    public virtual DbSet<Contact> Contact { get; set; }

    public virtual DbSet<ContactResult> ContactResult { get; set; }

    public virtual DbSet<ContactResults> ContactResults { get; set; }

    public virtual DbSet<ContactType> ContactType { get; set; }

    public virtual DbSet<ContactTypes> ContactTypes { get; set; }

    public virtual DbSet<Contacts> Contacts { get; set; }

    public virtual DbSet<Contest> Contest { get; set; }

    public virtual DbSet<ContestMarks> ContestMarks { get; set; }

    public virtual DbSet<Contests> Contests { get; set; }

    public virtual DbSet<Contract> Contract { get; set; }

    public virtual DbSet<ContractState> ContractState { get; set; }

    public virtual DbSet<ContractStates> ContractStates { get; set; }

    public virtual DbSet<ContractType> ContractType { get; set; }

    public virtual DbSet<ContractTypes> ContractTypes { get; set; }

    public virtual DbSet<Contracts> Contracts { get; set; }

    public virtual DbSet<Conversation> Conversation { get; set; }

    public virtual DbSet<ConversationType> ConversationType { get; set; }

    public virtual DbSet<ConversationTypes> ConversationTypes { get; set; }

    public virtual DbSet<Conversations> Conversations { get; set; }

    public virtual DbSet<CostCenter> CostCenter { get; set; }

    public virtual DbSet<CostCenters> CostCenters { get; set; }

    public virtual DbSet<Course> Course { get; set; }

    public virtual DbSet<CourseModule> CourseModule { get; set; }

    public virtual DbSet<CourseModules> CourseModules { get; set; }

    public virtual DbSet<CourseParts> CourseParts { get; set; }

    public virtual DbSet<Courses> Courses { get; set; }

    public virtual DbSet<Covenant> Covenant { get; set; }

    public virtual DbSet<Covenants> Covenants { get; set; }

    public virtual DbSet<Credential> Credential { get; set; }

    public virtual DbSet<Credentials> Credentials { get; set; }

    public virtual DbSet<CustomAdminTemplate> CustomAdminTemplate { get; set; }

    public virtual DbSet<CustomAdminTemplates> CustomAdminTemplates { get; set; }

    public virtual DbSet<CustomChatbotTemplate> CustomChatbotTemplate { get; set; }

    public virtual DbSet<CustomChatbotTemplates> CustomChatbotTemplates { get; set; }

    public virtual DbSet<CustomReport> CustomReport { get; set; }

    public virtual DbSet<CustomReports> CustomReports { get; set; }

    public virtual DbSet<CustomWebTemplate> CustomWebTemplate { get; set; }

    public virtual DbSet<CustomWebTemplateGroup> CustomWebTemplateGroup { get; set; }

    public virtual DbSet<CustomWebTemplateGroups> CustomWebTemplateGroups { get; set; }

    public virtual DbSet<CustomWebTemplates> CustomWebTemplates { get; set; }

    public virtual DbSet<DevelopmentMethod> DevelopmentMethod { get; set; }

    public virtual DbSet<DevelopmentMethods> DevelopmentMethods { get; set; }

    public virtual DbSet<DevelopmentPlan> DevelopmentPlan { get; set; }

    public virtual DbSet<DevelopmentPlans> DevelopmentPlans { get; set; }

    public virtual DbSet<DevelopmentPotential> DevelopmentPotential { get; set; }

    public virtual DbSet<DevelopmentPotentials> DevelopmentPotentials { get; set; }

    public virtual DbSet<DeviceReg> DeviceReg { get; set; }

    public virtual DbSet<DeviceRegs> DeviceRegs { get; set; }

    public virtual DbSet<DigitalSignature> DigitalSignature { get; set; }

    public virtual DbSet<DigitalSignatures> DigitalSignatures { get; set; }

    public virtual DbSet<Dimension> Dimension { get; set; }

    public virtual DbSet<Dimensions> Dimensions { get; set; }

    public virtual DbSet<Discharge> Discharge { get; set; }

    public virtual DbSet<Discharges> Discharges { get; set; }

    public virtual DbSet<DnAcademDebt> DnAcademDebt { get; set; }

    public virtual DbSet<DnAcademDebts> DnAcademDebts { get; set; }

    public virtual DbSet<DnAcademYear> DnAcademYear { get; set; }

    public virtual DbSet<DnAcademYears> DnAcademYears { get; set; }

    public virtual DbSet<DnAuditorium> DnAuditorium { get; set; }

    public virtual DbSet<DnAuditoriums> DnAuditoriums { get; set; }

    public virtual DbSet<DnBlockDiscipline> DnBlockDiscipline { get; set; }

    public virtual DbSet<DnBlockDisciplines> DnBlockDisciplines { get; set; }

    public virtual DbSet<DnControlEvent> DnControlEvent { get; set; }

    public virtual DbSet<DnControlEvents> DnControlEvents { get; set; }

    public virtual DbSet<DnControlForm> DnControlForm { get; set; }

    public virtual DbSet<DnControlForms> DnControlForms { get; set; }

    public virtual DbSet<DnDisciplBlocks> DnDisciplBlocks { get; set; }

    public virtual DbSet<DnDiscipline> DnDiscipline { get; set; }

    public virtual DbSet<DnDisciplines> DnDisciplines { get; set; }

    public virtual DbSet<DnEduCondition> DnEduCondition { get; set; }

    public virtual DbSet<DnEduConditions> DnEduConditions { get; set; }

    public virtual DbSet<DnEducatEvent> DnEducatEvent { get; set; }

    public virtual DbSet<DnEducatEvents> DnEducatEvents { get; set; }

    public virtual DbSet<DnEducatForm> DnEducatForm { get; set; }

    public virtual DbSet<DnEducatForms> DnEducatForms { get; set; }

    public virtual DbSet<DnGroupStudents> DnGroupStudents { get; set; }

    public virtual DbSet<DnIndEducatPlan> DnIndEducatPlan { get; set; }

    public virtual DbSet<DnIndEducatPlans> DnIndEducatPlans { get; set; }

    public virtual DbSet<DnLesson> DnLesson { get; set; }

    public virtual DbSet<DnLessons> DnLessons { get; set; }

    public virtual DbSet<DnProgDiscAppend> DnProgDiscAppend { get; set; }

    public virtual DbSet<DnProgDiscAppends> DnProgDiscAppends { get; set; }

    public virtual DbSet<DnProgramDiscipl> DnProgramDiscipl { get; set; }

    public virtual DbSet<DnProgramDiscipls> DnProgramDiscipls { get; set; }

    public virtual DbSet<DnRegister> DnRegister { get; set; }

    public virtual DbSet<DnRegisterStudents> DnRegisterStudents { get; set; }

    public virtual DbSet<DnRegisters> DnRegisters { get; set; }

    public virtual DbSet<DnSchedule> DnSchedule { get; set; }

    public virtual DbSet<DnSchedules> DnSchedules { get; set; }

    public virtual DbSet<DnSpecial> DnSpecial { get; set; }

    public virtual DbSet<DnSpecialization> DnSpecialization { get; set; }

    public virtual DbSet<DnSpecializations> DnSpecializations { get; set; }

    public virtual DbSet<DnSpecials> DnSpecials { get; set; }

    public virtual DbSet<DnStream> DnStream { get; set; }

    public virtual DbSet<DnStreams> DnStreams { get; set; }

    public virtual DbSet<DnStudCentrtestResult> DnStudCentrtestResult { get; set; }

    public virtual DbSet<DnStudCentrtestResults> DnStudCentrtestResults { get; set; }

    public virtual DbSet<DnStudGroup> DnStudGroup { get; set; }

    public virtual DbSet<DnStudGroups> DnStudGroups { get; set; }

    public virtual DbSet<DnStudent> DnStudent { get; set; }

    public virtual DbSet<DnStudents> DnStudents { get; set; }

    public virtual DbSet<DnSubjectPlan> DnSubjectPlan { get; set; }

    public virtual DbSet<DnSubjectPlans> DnSubjectPlans { get; set; }

    public virtual DbSet<DnTerm> DnTerm { get; set; }

    public virtual DbSet<DnTerms> DnTerms { get; set; }

    public virtual DbSet<DnTrainMethodComplex> DnTrainMethodComplex { get; set; }

    public virtual DbSet<DnTrainMethodComplexs> DnTrainMethodComplexs { get; set; }

    public virtual DbSet<DnWorkCurriculum> DnWorkCurriculum { get; set; }

    public virtual DbSet<DnWorkCurriculums> DnWorkCurriculums { get; set; }

    public virtual DbSet<DocType> DocType { get; set; }

    public virtual DbSet<DocTypes> DocTypes { get; set; }

    public virtual DbSet<Document> Document { get; set; }

    public virtual DbSet<DocumentCollaborators> DocumentCollaborators { get; set; }

    public virtual DbSet<DocumentCommentEntry> DocumentCommentEntry { get; set; }

    public virtual DbSet<DocumentCommentEntrys> DocumentCommentEntrys { get; set; }

    public virtual DbSet<Documents> Documents { get; set; }

    public virtual DbSet<DownloadPackage> DownloadPackage { get; set; }

    public virtual DbSet<DownloadPackages> DownloadPackages { get; set; }

    public virtual DbSet<EducationForm> EducationForm { get; set; }

    public virtual DbSet<EducationForms> EducationForms { get; set; }

    public virtual DbSet<EducationMethod> EducationMethod { get; set; }

    public virtual DbSet<EducationMethodLectors> EducationMethodLectors { get; set; }

    public virtual DbSet<EducationMethods> EducationMethods { get; set; }

    public virtual DbSet<EducationMode> EducationMode { get; set; }

    public virtual DbSet<EducationModes> EducationModes { get; set; }

    public virtual DbSet<EducationOrg> EducationOrg { get; set; }

    public virtual DbSet<EducationOrgLectors> EducationOrgLectors { get; set; }

    public virtual DbSet<EducationOrgs> EducationOrgs { get; set; }

    public virtual DbSet<EducationPlan> EducationPlan { get; set; }

    public virtual DbSet<EducationPlanCollaborators> EducationPlanCollaborators { get; set; }

    public virtual DbSet<EducationPlans> EducationPlans { get; set; }

    public virtual DbSet<EducationProgram> EducationProgram { get; set; }

    public virtual DbSet<EducationProgramEducationMethods> EducationProgramEducationMethods { get; set; }

    public virtual DbSet<EducationPrograms> EducationPrograms { get; set; }

    public virtual DbSet<EducationType> EducationType { get; set; }

    public virtual DbSet<EducationTypes> EducationTypes { get; set; }

    public virtual DbSet<EfficiencyEstimation> EfficiencyEstimation { get; set; }

    public virtual DbSet<EfficiencyEstimations> EfficiencyEstimations { get; set; }

    public virtual DbSet<EfficiencyGrade> EfficiencyGrade { get; set; }

    public virtual DbSet<EfficiencyGrades> EfficiencyGrades { get; set; }

    public virtual DbSet<EstaffEvent> EstaffEvent { get; set; }

    public virtual DbSet<EstaffEventType> EstaffEventType { get; set; }

    public virtual DbSet<EstaffEventTypes> EstaffEventTypes { get; set; }

    public virtual DbSet<EstaffEvents> EstaffEvents { get; set; }

    public virtual DbSet<Event> Event { get; set; }

    public virtual DbSet<EventAssessmentPlan> EventAssessmentPlan { get; set; }

    public virtual DbSet<EventAssessmentPlans> EventAssessmentPlans { get; set; }

    public virtual DbSet<EventCollaborators> EventCollaborators { get; set; }

    public virtual DbSet<EventGroups> EventGroups { get; set; }

    public virtual DbSet<EventLectors> EventLectors { get; set; }

    public virtual DbSet<EventObjectResources> EventObjectResources { get; set; }

    public virtual DbSet<EventPhases> EventPhases { get; set; }

    public virtual DbSet<EventResult> EventResult { get; set; }

    public virtual DbSet<EventResultType> EventResultType { get; set; }

    public virtual DbSet<EventResultTypes> EventResultTypes { get; set; }

    public virtual DbSet<EventResults> EventResults { get; set; }

    public virtual DbSet<EventRoomCollaborators> EventRoomCollaborators { get; set; }

    public virtual DbSet<EventRoomLectors> EventRoomLectors { get; set; }

    public virtual DbSet<EventRooms> EventRooms { get; set; }

    public virtual DbSet<EventType> EventType { get; set; }

    public virtual DbSet<EventTypes> EventTypes { get; set; }

    public virtual DbSet<Events> Events { get; set; }

    public virtual DbSet<ExchangeServer> ExchangeServer { get; set; }

    public virtual DbSet<ExchangeServers> ExchangeServers { get; set; }

    public virtual DbSet<ExclusionReason> ExclusionReason { get; set; }

    public virtual DbSet<ExclusionReasons> ExclusionReasons { get; set; }

    public virtual DbSet<Exercise> Exercise { get; set; }

    public virtual DbSet<Exercises> Exercises { get; set; }

    public virtual DbSet<Expense> Expense { get; set; }

    public virtual DbSet<ExpenseItem> ExpenseItem { get; set; }

    public virtual DbSet<ExpenseItems> ExpenseItems { get; set; }

    public virtual DbSet<Expenses> Expenses { get; set; }

    public virtual DbSet<Expert> Expert { get; set; }

    public virtual DbSet<ExpertQuestion> ExpertQuestion { get; set; }

    public virtual DbSet<ExpertQuestions> ExpertQuestions { get; set; }

    public virtual DbSet<Experts> Experts { get; set; }

    public virtual DbSet<ExternalSystem> ExternalSystem { get; set; }

    public virtual DbSet<ExternalSystems> ExternalSystems { get; set; }

    public virtual DbSet<FactPayment> FactPayment { get; set; }

    public virtual DbSet<FactPayments> FactPayments { get; set; }

    public virtual DbSet<FfSppk> FfSppk { get; set; }

    public virtual DbSet<FfSppkDates> FfSppkDates { get; set; }

    public virtual DbSet<FfSppkPersons> FfSppkPersons { get; set; }

    public virtual DbSet<FileSource> FileSource { get; set; }

    public virtual DbSet<FileSources> FileSources { get; set; }

    public virtual DbSet<Formula> Formula { get; set; }

    public virtual DbSet<Formulas> Formulas { get; set; }

    public virtual DbSet<Forum> Forum { get; set; }

    public virtual DbSet<ForumEntry> ForumEntry { get; set; }

    public virtual DbSet<ForumEntrys> ForumEntrys { get; set; }

    public virtual DbSet<ForumThemeReadByCollaborator> ForumThemeReadByCollaborator { get; set; }

    public virtual DbSet<ForumThemeReadByCollaborators> ForumThemeReadByCollaborators { get; set; }

    public virtual DbSet<Forums> Forums { get; set; }

    public virtual DbSet<FtLastIndex> FtLastIndex { get; set; }

    public virtual DbSet<FuncManagers> FuncManagers { get; set; }

    public virtual DbSet<Good> Good { get; set; }

    public virtual DbSet<GoodInstance> GoodInstance { get; set; }

    public virtual DbSet<GoodInstances> GoodInstances { get; set; }

    public virtual DbSet<GoodType> GoodType { get; set; }

    public virtual DbSet<GoodTypes> GoodTypes { get; set; }

    public virtual DbSet<Goods> Goods { get; set; }

    public virtual DbSet<Grade> Grade { get; set; }

    public virtual DbSet<Grades> Grades { get; set; }

    public virtual DbSet<Group> Group { get; set; }

    public virtual DbSet<GroupCollaborators> GroupCollaborators { get; set; }

    public virtual DbSet<Groups> Groups { get; set; }

    public virtual DbSet<Host> Host { get; set; }

    public virtual DbSet<Hosts> Hosts { get; set; }

    public virtual DbSet<IndProgPassLog> IndProgPassLog { get; set; }

    public virtual DbSet<Indicator> Indicator { get; set; }

    public virtual DbSet<Indicators> Indicators { get; set; }

    public virtual DbSet<IntervalSchedule> IntervalSchedule { get; set; }

    public virtual DbSet<IntervalSchedules> IntervalSchedules { get; set; }

    public virtual DbSet<Invoice> Invoice { get; set; }

    public virtual DbSet<Invoices> Invoices { get; set; }

    public virtual DbSet<Item> Item { get; set; }

    public virtual DbSet<Items> Items { get; set; }

    public virtual DbSet<KeyPosition> KeyPosition { get; set; }

    public virtual DbSet<KeyPositionThreat> KeyPositionThreat { get; set; }

    public virtual DbSet<KeyPositionThreats> KeyPositionThreats { get; set; }

    public virtual DbSet<KeyPositions> KeyPositions { get; set; }

    public virtual DbSet<KnowledgeAcquaint> KnowledgeAcquaint { get; set; }

    public virtual DbSet<KnowledgeAcquaints> KnowledgeAcquaints { get; set; }

    public virtual DbSet<KnowledgeClassifier> KnowledgeClassifier { get; set; }

    public virtual DbSet<KnowledgeClassifiers> KnowledgeClassifiers { get; set; }

    public virtual DbSet<KnowledgeObjects> KnowledgeObjects { get; set; }

    public virtual DbSet<KnowledgePart> KnowledgePart { get; set; }

    public virtual DbSet<KnowledgePartLevel> KnowledgePartLevel { get; set; }

    public virtual DbSet<KnowledgePartLevels> KnowledgePartLevels { get; set; }

    public virtual DbSet<KnowledgePartType> KnowledgePartType { get; set; }

    public virtual DbSet<KnowledgePartTypes> KnowledgePartTypes { get; set; }

    public virtual DbSet<KnowledgeParts> KnowledgeParts { get; set; }

    public virtual DbSet<KnowledgeProfile> KnowledgeProfile { get; set; }

    public virtual DbSet<KnowledgeProfiles> KnowledgeProfiles { get; set; }

    public virtual DbSet<Knowledges> Knowledges { get; set; }

    public virtual DbSet<Kpi> Kpi { get; set; }

    public virtual DbSet<KpiGroup> KpiGroup { get; set; }

    public virtual DbSet<KpiGroups> KpiGroups { get; set; }

    public virtual DbSet<KpiManagers> KpiManagers { get; set; }

    public virtual DbSet<KpiPlan> KpiPlan { get; set; }

    public virtual DbSet<KpiPlans> KpiPlans { get; set; }

    public virtual DbSet<KpiProfile> KpiProfile { get; set; }

    public virtual DbSet<KpiProfiles> KpiProfiles { get; set; }

    public virtual DbSet<KpiValue> KpiValue { get; set; }

    public virtual DbSet<KpiValues> KpiValues { get; set; }

    public virtual DbSet<Kpis> Kpis { get; set; }

    public virtual DbSet<Learning> Learning { get; set; }

    public virtual DbSet<LearningPart> LearningPart { get; set; }

    public virtual DbSet<LearningParts> LearningParts { get; set; }

    public virtual DbSet<LearningRecord> LearningRecord { get; set; }

    public virtual DbSet<LearningRecords> LearningRecords { get; set; }

    public virtual DbSet<LearningStorage> LearningStorage { get; set; }

    public virtual DbSet<LearningStorages> LearningStorages { get; set; }

    public virtual DbSet<LearningTask> LearningTask { get; set; }

    public virtual DbSet<LearningTaskResult> LearningTaskResult { get; set; }

    public virtual DbSet<LearningTaskResults> LearningTaskResults { get; set; }

    public virtual DbSet<LearningTasks> LearningTasks { get; set; }

    public virtual DbSet<Learnings> Learnings { get; set; }

    public virtual DbSet<Lector> Lector { get; set; }

    public virtual DbSet<Lectors> Lectors { get; set; }

    public virtual DbSet<Level> Level { get; set; }

    public virtual DbSet<Levels> Levels { get; set; }

    public virtual DbSet<LibraryMaterial> LibraryMaterial { get; set; }

    public virtual DbSet<LibraryMaterialComment> LibraryMaterialComment { get; set; }

    public virtual DbSet<LibraryMaterialComments> LibraryMaterialComments { get; set; }

    public virtual DbSet<LibraryMaterialFormat> LibraryMaterialFormat { get; set; }

    public virtual DbSet<LibraryMaterialFormats> LibraryMaterialFormats { get; set; }

    public virtual DbSet<LibraryMaterialItem> LibraryMaterialItem { get; set; }

    public virtual DbSet<LibraryMaterialItems> LibraryMaterialItems { get; set; }

    public virtual DbSet<LibraryMaterialObjects> LibraryMaterialObjects { get; set; }

    public virtual DbSet<LibraryMaterialSourceType> LibraryMaterialSourceType { get; set; }

    public virtual DbSet<LibraryMaterialSourceTypes> LibraryMaterialSourceTypes { get; set; }

    public virtual DbSet<LibraryMaterialType> LibraryMaterialType { get; set; }

    public virtual DbSet<LibraryMaterialTypes> LibraryMaterialTypes { get; set; }

    public virtual DbSet<LibraryMaterialViewing> LibraryMaterialViewing { get; set; }

    public virtual DbSet<LibraryMaterialViewings> LibraryMaterialViewings { get; set; }

    public virtual DbSet<LibraryMaterials> LibraryMaterials { get; set; }

    public virtual DbSet<LibraryPlayer> LibraryPlayer { get; set; }

    public virtual DbSet<LibraryPlayers> LibraryPlayers { get; set; }

    public virtual DbSet<LibrarySection> LibrarySection { get; set; }

    public virtual DbSet<LibrarySections> LibrarySections { get; set; }

    public virtual DbSet<LibrarySystem> LibrarySystem { get; set; }

    public virtual DbSet<LibrarySystems> LibrarySystems { get; set; }

    public virtual DbSet<License> License { get; set; }

    public virtual DbSet<Licenses> Licenses { get; set; }

    public virtual DbSet<Like> Like { get; set; }

    public virtual DbSet<Likes> Likes { get; set; }

    public virtual DbSet<MaterialLiability> MaterialLiability { get; set; }

    public virtual DbSet<MaterialLiabilitys> MaterialLiabilitys { get; set; }

    public virtual DbSet<MessengerService> MessengerService { get; set; }

    public virtual DbSet<MessengerServices> MessengerServices { get; set; }

    public virtual DbSet<MobileAppConfig> MobileAppConfig { get; set; }

    public virtual DbSet<MobileAppConfigs> MobileAppConfigs { get; set; }

    public virtual DbSet<Notification> Notification { get; set; }

    public virtual DbSet<NotificationSystem> NotificationSystem { get; set; }

    public virtual DbSet<NotificationSystems> NotificationSystems { get; set; }

    public virtual DbSet<NotificationTemplate> NotificationTemplate { get; set; }

    public virtual DbSet<NotificationTemplates> NotificationTemplates { get; set; }

    public virtual DbSet<Notifications> Notifications { get; set; }

    public virtual DbSet<ObjectClaim> ObjectClaim { get; set; }

    public virtual DbSet<ObjectClaims> ObjectClaims { get; set; }

    public virtual DbSet<ObjectData> ObjectData { get; set; }

    public virtual DbSet<ObjectDataType> ObjectDataType { get; set; }

    public virtual DbSet<ObjectDataTypes> ObjectDataTypes { get; set; }

    public virtual DbSet<ObjectDatas> ObjectDatas { get; set; }

    public virtual DbSet<ObjectExperts> ObjectExperts { get; set; }

    public virtual DbSet<ObjectLink> ObjectLink { get; set; }

    public virtual DbSet<ObjectLinks> ObjectLinks { get; set; }

    public virtual DbSet<ObjectParam> ObjectParam { get; set; }

    public virtual DbSet<ObjectParams> ObjectParams { get; set; }

    public virtual DbSet<ObjectRequirements> ObjectRequirements { get; set; }

    public virtual DbSet<ObjectResource> ObjectResource { get; set; }

    public virtual DbSet<ObjectResources> ObjectResources { get; set; }

    public virtual DbSet<ObjectVersion> ObjectVersion { get; set; }

    public virtual DbSet<ObjectVersions> ObjectVersions { get; set; }

    public virtual DbSet<ObjectiveTranslate> ObjectiveTranslate { get; set; }

    public virtual DbSet<ObjectiveTranslates> ObjectiveTranslates { get; set; }

    public virtual DbSet<Operation> Operation { get; set; }

    public virtual DbSet<Operations> Operations { get; set; }

    public virtual DbSet<Order> Order { get; set; }

    public virtual DbSet<OrderType> OrderType { get; set; }

    public virtual DbSet<OrderTypes> OrderTypes { get; set; }

    public virtual DbSet<OrderedCollaborators> OrderedCollaborators { get; set; }

    public virtual DbSet<Orders> Orders { get; set; }

    public virtual DbSet<Org> Org { get; set; }

    public virtual DbSet<OrgVendorState> OrgVendorState { get; set; }

    public virtual DbSet<OrgVendorStates> OrgVendorStates { get; set; }

    public virtual DbSet<Orgs> Orgs { get; set; }

    public virtual DbSet<OutstaffAdditionalWork> OutstaffAdditionalWork { get; set; }

    public virtual DbSet<OutstaffAdditionalWorks> OutstaffAdditionalWorks { get; set; }

    public virtual DbSet<OutstaffContract> OutstaffContract { get; set; }

    public virtual DbSet<OutstaffContracts> OutstaffContracts { get; set; }

    public virtual DbSet<OutstaffOrder> OutstaffOrder { get; set; }

    public virtual DbSet<OutstaffOrderExecution> OutstaffOrderExecution { get; set; }

    public virtual DbSet<OutstaffOrderExecutionStages> OutstaffOrderExecutionStages { get; set; }

    public virtual DbSet<OutstaffOrderExecutions> OutstaffOrderExecutions { get; set; }

    public virtual DbSet<OutstaffOrders> OutstaffOrders { get; set; }

    public virtual DbSet<OutstaffProvider> OutstaffProvider { get; set; }

    public virtual DbSet<OutstaffProviders> OutstaffProviders { get; set; }

    public virtual DbSet<OutstaffTypeMaterial> OutstaffTypeMaterial { get; set; }

    public virtual DbSet<OutstaffTypeMaterials> OutstaffTypeMaterials { get; set; }

    public virtual DbSet<OverrideWebTemplate> OverrideWebTemplate { get; set; }

    public virtual DbSet<OverrideWebTemplates> OverrideWebTemplates { get; set; }

    public virtual DbSet<Pa> Pa { get; set; }

    public virtual DbSet<Participant> Participant { get; set; }

    public virtual DbSet<Participants> Participants { get; set; }

    public virtual DbSet<Pas> Pas { get; set; }

    public virtual DbSet<PayPhase> PayPhase { get; set; }

    public virtual DbSet<PayPhases> PayPhases { get; set; }

    public virtual DbSet<PayStage> PayStage { get; set; }

    public virtual DbSet<PayStages> PayStages { get; set; }

    public virtual DbSet<Payment> Payment { get; set; }

    public virtual DbSet<PaymentType> PaymentType { get; set; }

    public virtual DbSet<PaymentTypes> PaymentTypes { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<PersonActivityInfos> PersonActivityInfos { get; set; }

    public virtual DbSet<PersonHierarchys> PersonHierarchys { get; set; }

    public virtual DbSet<PersonMessages> PersonMessages { get; set; }

    public virtual DbSet<PersonObjectLink> PersonObjectLink { get; set; }

    public virtual DbSet<PersonObjectLinkObjects> PersonObjectLinkObjects { get; set; }

    public virtual DbSet<PersonObjectLinks> PersonObjectLinks { get; set; }

    public virtual DbSet<PersonObjectProfile> PersonObjectProfile { get; set; }

    public virtual DbSet<PersonObjectProfiles> PersonObjectProfiles { get; set; }

    public virtual DbSet<PersonalAssistant> PersonalAssistant { get; set; }

    public virtual DbSet<PersonalAssistants> PersonalAssistants { get; set; }

    public virtual DbSet<PersonalChats> PersonalChats { get; set; }

    public virtual DbSet<PersonalDataProcessingConsent> PersonalDataProcessingConsent { get; set; }

    public virtual DbSet<PersonalDataProcessingConsents> PersonalDataProcessingConsents { get; set; }

    public virtual DbSet<PersonnelCommittee> PersonnelCommittee { get; set; }

    public virtual DbSet<PersonnelCommittees> PersonnelCommittees { get; set; }

    public virtual DbSet<PersonnelDocument> PersonnelDocument { get; set; }

    public virtual DbSet<PersonnelDocumentType> PersonnelDocumentType { get; set; }

    public virtual DbSet<PersonnelDocumentTypes> PersonnelDocumentTypes { get; set; }

    public virtual DbSet<PersonnelDocuments> PersonnelDocuments { get; set; }

    public virtual DbSet<PersonnelReserve> PersonnelReserve { get; set; }

    public virtual DbSet<PersonnelReserves> PersonnelReserves { get; set; }

    public virtual DbSet<Place> Place { get; set; }

    public virtual DbSet<Places> Places { get; set; }

    public virtual DbSet<Plugin> Plugin { get; set; }

    public virtual DbSet<Plugins> Plugins { get; set; }

    public virtual DbSet<Policy> Policy { get; set; }

    public virtual DbSet<PolicyType> PolicyType { get; set; }

    public virtual DbSet<PolicyTypes> PolicyTypes { get; set; }

    public virtual DbSet<Policys> Policys { get; set; }

    public virtual DbSet<Poll> Poll { get; set; }

    public virtual DbSet<PollProcedure> PollProcedure { get; set; }

    public virtual DbSet<PollProcedures> PollProcedures { get; set; }

    public virtual DbSet<PollResult> PollResult { get; set; }

    public virtual DbSet<PollResults> PollResults { get; set; }

    public virtual DbSet<Polls> Polls { get; set; }

    public virtual DbSet<Position> Position { get; set; }

    public virtual DbSet<PositionAssessmentForm> PositionAssessmentForm { get; set; }

    public virtual DbSet<PositionAssessmentForms> PositionAssessmentForms { get; set; }

    public virtual DbSet<PositionCommon> PositionCommon { get; set; }

    public virtual DbSet<PositionCommonInstruction> PositionCommonInstruction { get; set; }

    public virtual DbSet<PositionCommonInstructions> PositionCommonInstructions { get; set; }

    public virtual DbSet<PositionCommons> PositionCommons { get; set; }

    public virtual DbSet<PositionFamily> PositionFamily { get; set; }

    public virtual DbSet<PositionFamilys> PositionFamilys { get; set; }

    public virtual DbSet<PositionLevel> PositionLevel { get; set; }

    public virtual DbSet<PositionLevels> PositionLevels { get; set; }

    public virtual DbSet<Positions> Positions { get; set; }

    public virtual DbSet<PotentialGrade> PotentialGrade { get; set; }

    public virtual DbSet<PotentialGrades> PotentialGrades { get; set; }

    public virtual DbSet<PresenceState> PresenceState { get; set; }

    public virtual DbSet<PresenceStates> PresenceStates { get; set; }

    public virtual DbSet<Presentation> Presentation { get; set; }

    public virtual DbSet<Presentations> Presentations { get; set; }

    public virtual DbSet<Price> Price { get; set; }

    public virtual DbSet<Prices> Prices { get; set; }

    public virtual DbSet<PrintForm> PrintForm { get; set; }

    public virtual DbSet<PrintForms> PrintForms { get; set; }

    public virtual DbSet<ProctoringSystem> ProctoringSystem { get; set; }

    public virtual DbSet<ProctoringSystems> ProctoringSystems { get; set; }

    public virtual DbSet<Profession> Profession { get; set; }

    public virtual DbSet<ProfessionCategory> ProfessionCategory { get; set; }

    public virtual DbSet<ProfessionCategorys> ProfessionCategorys { get; set; }

    public virtual DbSet<ProfessionalArea> ProfessionalArea { get; set; }

    public virtual DbSet<ProfessionalAreaType> ProfessionalAreaType { get; set; }

    public virtual DbSet<ProfessionalAreaTypes> ProfessionalAreaTypes { get; set; }

    public virtual DbSet<ProfessionalAreas> ProfessionalAreas { get; set; }

    public virtual DbSet<Professions> Professions { get; set; }

    public virtual DbSet<Profile> Profile { get; set; }

    public virtual DbSet<Profiles> Profiles { get; set; }

    public virtual DbSet<ProfilingRecord> ProfilingRecord { get; set; }

    public virtual DbSet<ProfilingRecords> ProfilingRecords { get; set; }

    public virtual DbSet<Project> Project { get; set; }

    public virtual DbSet<ProjectParticipant> ProjectParticipant { get; set; }

    public virtual DbSet<ProjectParticipantRole> ProjectParticipantRole { get; set; }

    public virtual DbSet<ProjectParticipantRoles> ProjectParticipantRoles { get; set; }

    public virtual DbSet<ProjectParticipants> ProjectParticipants { get; set; }

    public virtual DbSet<ProjectType> ProjectType { get; set; }

    public virtual DbSet<ProjectTypes> ProjectTypes { get; set; }

    public virtual DbSet<Projects> Projects { get; set; }

    public virtual DbSet<Provider> Provider { get; set; }

    public virtual DbSet<ProviderCourseType> ProviderCourseType { get; set; }

    public virtual DbSet<ProviderCourseTypes> ProviderCourseTypes { get; set; }

    public virtual DbSet<Providers> Providers { get; set; }

    public virtual DbSet<QaTest> QaTest { get; set; }

    public virtual DbSet<QaTestParamset> QaTestParamset { get; set; }

    public virtual DbSet<QaTestParamsets> QaTestParamsets { get; set; }

    public virtual DbSet<QaTestResult> QaTestResult { get; set; }

    public virtual DbSet<QaTestResults> QaTestResults { get; set; }

    public virtual DbSet<QaTestSet> QaTestSet { get; set; }

    public virtual DbSet<QaTestSets> QaTestSets { get; set; }

    public virtual DbSet<QaTests> QaTests { get; set; }

    public virtual DbSet<Qualification> Qualification { get; set; }

    public virtual DbSet<QualificationAssignment> QualificationAssignment { get; set; }

    public virtual DbSet<QualificationAssignments> QualificationAssignments { get; set; }

    public virtual DbSet<Qualifications> Qualifications { get; set; }

    public virtual DbSet<Rating> Rating { get; set; }

    public virtual DbSet<Ratings> Ratings { get; set; }

    public virtual DbSet<ReadinessLevel> ReadinessLevel { get; set; }

    public virtual DbSet<ReadinessLevels> ReadinessLevels { get; set; }

    public virtual DbSet<Recommendation> Recommendation { get; set; }

    public virtual DbSet<Recommendations> Recommendations { get; set; }

    public virtual DbSet<RecommenderAlgorithm> RecommenderAlgorithm { get; set; }

    public virtual DbSet<RecommenderAlgorithmApplying> RecommenderAlgorithmApplying { get; set; }

    public virtual DbSet<RecommenderAlgorithmApplyings> RecommenderAlgorithmApplyings { get; set; }

    public virtual DbSet<RecommenderAlgorithms> RecommenderAlgorithms { get; set; }

    public virtual DbSet<RecommenderSelectCollaborator> RecommenderSelectCollaborator { get; set; }

    public virtual DbSet<RecommenderSelectCollaborators> RecommenderSelectCollaborators { get; set; }

    public virtual DbSet<RecruitmentEvent> RecruitmentEvent { get; set; }

    public virtual DbSet<RecruitmentEvents> RecruitmentEvents { get; set; }

    public virtual DbSet<RecruitmentMethod> RecruitmentMethod { get; set; }

    public virtual DbSet<RecruitmentMethods> RecruitmentMethods { get; set; }

    public virtual DbSet<RecruitmentPlan> RecruitmentPlan { get; set; }

    public virtual DbSet<RecruitmentPlans> RecruitmentPlans { get; set; }

    public virtual DbSet<RecruitmentSystem> RecruitmentSystem { get; set; }

    public virtual DbSet<RecruitmentSystems> RecruitmentSystems { get; set; }

    public virtual DbSet<Region> Region { get; set; }

    public virtual DbSet<Regions> Regions { get; set; }

    public virtual DbSet<RemoteAction> RemoteAction { get; set; }

    public virtual DbSet<RemoteActions> RemoteActions { get; set; }

    public virtual DbSet<RemoteApplication> RemoteApplication { get; set; }

    public virtual DbSet<RemoteApplications> RemoteApplications { get; set; }

    public virtual DbSet<RemoteCollection> RemoteCollection { get; set; }

    public virtual DbSet<RemoteCollections> RemoteCollections { get; set; }

    public virtual DbSet<RemoteSecurityProfile> RemoteSecurityProfile { get; set; }

    public virtual DbSet<RemoteSecurityProfiles> RemoteSecurityProfiles { get; set; }

    public virtual DbSet<Repositorium> Repositorium { get; set; }

    public virtual DbSet<RepositoriumAuthors> RepositoriumAuthors { get; set; }

    public virtual DbSet<RepositoriumResources> RepositoriumResources { get; set; }

    public virtual DbSet<Repositoriums> Repositoriums { get; set; }

    public virtual DbSet<Reprimand> Reprimand { get; set; }

    public virtual DbSet<ReprimandType> ReprimandType { get; set; }

    public virtual DbSet<ReprimandTypes> ReprimandTypes { get; set; }

    public virtual DbSet<Reprimands> Reprimands { get; set; }

    public virtual DbSet<Request> Request { get; set; }

    public virtual DbSet<RequestCollaborators> RequestCollaborators { get; set; }

    public virtual DbSet<RequestType> RequestType { get; set; }

    public virtual DbSet<RequestTypes> RequestTypes { get; set; }

    public virtual DbSet<Requests> Requests { get; set; }

    public virtual DbSet<Resource> Resource { get; set; }

    public virtual DbSet<ResourceType> ResourceType { get; set; }

    public virtual DbSet<ResourceTypes> ResourceTypes { get; set; }

    public virtual DbSet<Resources> Resources { get; set; }

    public virtual DbSet<Response> Response { get; set; }

    public virtual DbSet<ResponseType> ResponseType { get; set; }

    public virtual DbSet<ResponseTypes> ResponseTypes { get; set; }

    public virtual DbSet<Responses> Responses { get; set; }

    public virtual DbSet<RestrictingCollaboratorSchedule> RestrictingCollaboratorSchedule { get; set; }

    public virtual DbSet<RestrictingCollaboratorSchedules> RestrictingCollaboratorSchedules { get; set; }

    public virtual DbSet<RestrictingType> RestrictingType { get; set; }

    public virtual DbSet<RestrictingTypes> RestrictingTypes { get; set; }

    public virtual DbSet<Resume> Resume { get; set; }

    public virtual DbSet<ResumeSkills> ResumeSkills { get; set; }

    public virtual DbSet<Resumes> Resumes { get; set; }

    public virtual DbSet<RiskLevel> RiskLevel { get; set; }

    public virtual DbSet<RiskLevels> RiskLevels { get; set; }

    public virtual DbSet<RiskPerspective> RiskPerspective { get; set; }

    public virtual DbSet<RiskPerspectives> RiskPerspectives { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<SalaryPaymentType> SalaryPaymentType { get; set; }

    public virtual DbSet<SalaryPaymentTypes> SalaryPaymentTypes { get; set; }

    public virtual DbSet<SalarySurvey> SalarySurvey { get; set; }

    public virtual DbSet<SalarySurveySource> SalarySurveySource { get; set; }

    public virtual DbSet<SalarySurveySources> SalarySurveySources { get; set; }

    public virtual DbSet<SalarySurveys> SalarySurveys { get; set; }

    public virtual DbSet<Sale> Sale { get; set; }

    public virtual DbSet<SaleContract> SaleContract { get; set; }

    public virtual DbSet<SaleContractType> SaleContractType { get; set; }

    public virtual DbSet<SaleContractTypes> SaleContractTypes { get; set; }

    public virtual DbSet<SaleContracts> SaleContracts { get; set; }

    public virtual DbSet<SaleStatus> SaleStatus { get; set; }

    public virtual DbSet<SaleStatuss> SaleStatuss { get; set; }

    public virtual DbSet<Sales> Sales { get; set; }

    public virtual DbSet<Scale> Scale { get; set; }

    public virtual DbSet<Scales> Scales { get; set; }

    public virtual DbSet<ScheduleDay> ScheduleDay { get; set; }

    public virtual DbSet<ScheduleDays> ScheduleDays { get; set; }

    public virtual DbSet<ScheduleType> ScheduleType { get; set; }

    public virtual DbSet<ScheduleTypes> ScheduleTypes { get; set; }

    public virtual DbSet<ScriptQueueElem> ScriptQueueElem { get; set; }

    public virtual DbSet<ScriptQueueElems> ScriptQueueElems { get; set; }

    public virtual DbSet<SectionInstruction> SectionInstruction { get; set; }

    public virtual DbSet<SectionInstructions> SectionInstructions { get; set; }

    public virtual DbSet<SelectedResume> SelectedResume { get; set; }

    public virtual DbSet<SelectedResumes> SelectedResumes { get; set; }

    public virtual DbSet<SelectedVacancy> SelectedVacancy { get; set; }

    public virtual DbSet<SelectedVacancys> SelectedVacancys { get; set; }

    public virtual DbSet<ServerAgent> ServerAgent { get; set; }

    public virtual DbSet<ServerAgents> ServerAgents { get; set; }

    public virtual DbSet<Site> Site { get; set; }

    public virtual DbSet<SiteOwnerObjects> SiteOwnerObjects { get; set; }

    public virtual DbSet<Sites> Sites { get; set; }

    public virtual DbSet<Skill> Skill { get; set; }

    public virtual DbSet<SkillType> SkillType { get; set; }

    public virtual DbSet<SkillTypes> SkillTypes { get; set; }

    public virtual DbSet<Skills> Skills { get; set; }

    public virtual DbSet<SocialEntrys> SocialEntrys { get; set; }

    public virtual DbSet<SpxmlBlobs> SpxmlBlobs { get; set; }

    public virtual DbSet<SpxmlForeignArrays> SpxmlForeignArrays { get; set; }

    public virtual DbSet<SpxmlMetadata> SpxmlMetadata { get; set; }

    public virtual DbSet<SpxmlObjects> SpxmlObjects { get; set; }

    public virtual DbSet<StaffPosition> StaffPosition { get; set; }

    public virtual DbSet<StaffPositionFinish> StaffPositionFinish { get; set; }

    public virtual DbSet<StaffPositionFinishs> StaffPositionFinishs { get; set; }

    public virtual DbSet<StaffPositionMove> StaffPositionMove { get; set; }

    public virtual DbSet<StaffPositionMoves> StaffPositionMoves { get; set; }

    public virtual DbSet<StaffPositionStart> StaffPositionStart { get; set; }

    public virtual DbSet<StaffPositionStarts> StaffPositionStarts { get; set; }

    public virtual DbSet<StaffPositions> StaffPositions { get; set; }

    public virtual DbSet<StaffSubs> StaffSubs { get; set; }

    public virtual DbSet<Statement> Statement { get; set; }

    public virtual DbSet<StatementActor> StatementActor { get; set; }

    public virtual DbSet<StatementActors> StatementActors { get; set; }

    public virtual DbSet<StatementAdditional> StatementAdditional { get; set; }

    public virtual DbSet<StatementAdditionals> StatementAdditionals { get; set; }

    public virtual DbSet<StatementAttachment> StatementAttachment { get; set; }

    public virtual DbSet<StatementAttachments> StatementAttachments { get; set; }

    public virtual DbSet<StatementComponent> StatementComponent { get; set; }

    public virtual DbSet<StatementComponents> StatementComponents { get; set; }

    public virtual DbSet<StatementObject> StatementObject { get; set; }

    public virtual DbSet<StatementObjects> StatementObjects { get; set; }

    public virtual DbSet<StatementPattern> StatementPattern { get; set; }

    public virtual DbSet<StatementPatterns> StatementPatterns { get; set; }

    public virtual DbSet<Statements> Statements { get; set; }

    public virtual DbSet<StatisticData> StatisticData { get; set; }

    public virtual DbSet<StatisticDatas> StatisticDatas { get; set; }

    public virtual DbSet<StatisticRec> StatisticRec { get; set; }

    public virtual DbSet<StatisticRecs> StatisticRecs { get; set; }

    public virtual DbSet<Subdivision> Subdivision { get; set; }

    public virtual DbSet<SubdivisionGroup> SubdivisionGroup { get; set; }

    public virtual DbSet<SubdivisionGroupSubdivisions> SubdivisionGroupSubdivisions { get; set; }

    public virtual DbSet<SubdivisionGroups> SubdivisionGroups { get; set; }

    public virtual DbSet<Subdivisions> Subdivisions { get; set; }

    public virtual DbSet<Submission> Submission { get; set; }

    public virtual DbSet<SubmissionRecipients> SubmissionRecipients { get; set; }

    public virtual DbSet<SubmissionType> SubmissionType { get; set; }

    public virtual DbSet<SubmissionTypes> SubmissionTypes { get; set; }

    public virtual DbSet<Submissions> Submissions { get; set; }

    public virtual DbSet<Subs> Subs { get; set; }

    public virtual DbSet<Subscription> Subscription { get; set; }

    public virtual DbSet<Subscriptions> Subscriptions { get; set; }

    public virtual DbSet<Substitution> Substitution { get; set; }

    public virtual DbSet<SubstitutionType> SubstitutionType { get; set; }

    public virtual DbSet<SubstitutionTypes> SubstitutionTypes { get; set; }

    public virtual DbSet<Substitutions> Substitutions { get; set; }

    public virtual DbSet<Successor> Successor { get; set; }

    public virtual DbSet<Successors> Successors { get; set; }

    public virtual DbSet<SupplementaryQuestion> SupplementaryQuestion { get; set; }

    public virtual DbSet<SupplementaryQuestions> SupplementaryQuestions { get; set; }

    public virtual DbSet<SystemEvent> SystemEvent { get; set; }

    public virtual DbSet<SystemEventHandler> SystemEventHandler { get; set; }

    public virtual DbSet<SystemEventHandlers> SystemEventHandlers { get; set; }

    public virtual DbSet<SystemEvents> SystemEvents { get; set; }

    public virtual DbSet<Tag> Tag { get; set; }

    public virtual DbSet<TaggedObjects> TaggedObjects { get; set; }

    public virtual DbSet<Tags> Tags { get; set; }

    public virtual DbSet<TalentPoolFuncManagers> TalentPoolFuncManagers { get; set; }

    public virtual DbSet<TalentPoolNomination> TalentPoolNomination { get; set; }

    public virtual DbSet<TalentPoolNominations> TalentPoolNominations { get; set; }

    public virtual DbSet<Task> Task { get; set; }

    public virtual DbSet<TaskType> TaskType { get; set; }

    public virtual DbSet<TaskTypes> TaskTypes { get; set; }

    public virtual DbSet<Tasks> Tasks { get; set; }

    public virtual DbSet<TestLearning> TestLearning { get; set; }

    public virtual DbSet<TestLearnings> TestLearnings { get; set; }

    public virtual DbSet<TestProject> TestProject { get; set; }

    public virtual DbSet<TestProjects> TestProjects { get; set; }

    public virtual DbSet<TestingSystem> TestingSystem { get; set; }

    public virtual DbSet<TestingSystems> TestingSystems { get; set; }

    public virtual DbSet<TimeEntry> TimeEntry { get; set; }

    public virtual DbSet<TimeEntrys> TimeEntrys { get; set; }

    public virtual DbSet<TrainingPlan> TrainingPlan { get; set; }

    public virtual DbSet<TrainingPlans> TrainingPlans { get; set; }

    public virtual DbSet<TraningOrder> TraningOrder { get; set; }

    public virtual DbSet<TraningOrders> TraningOrders { get; set; }

    public virtual DbSet<Transaction> Transaction { get; set; }

    public virtual DbSet<Transactions> Transactions { get; set; }

    public virtual DbSet<TrashDocs> TrashDocs { get; set; }

    public virtual DbSet<Tutor> Tutor { get; set; }

    public virtual DbSet<Tutors> Tutors { get; set; }

    public virtual DbSet<TypicalDevelopmentProgram> TypicalDevelopmentProgram { get; set; }

    public virtual DbSet<TypicalDevelopmentPrograms> TypicalDevelopmentPrograms { get; set; }

    public virtual DbSet<UiData> UiData { get; set; }

    public virtual DbSet<UiDatas> UiDatas { get; set; }

    public virtual DbSet<UploadPackage> UploadPackage { get; set; }

    public virtual DbSet<UploadPackages> UploadPackages { get; set; }

    public virtual DbSet<UserAssignment> UserAssignment { get; set; }

    public virtual DbSet<UserAssignments> UserAssignments { get; set; }

    public virtual DbSet<UserData> UserData { get; set; }

    public virtual DbSet<UserDatas> UserDatas { get; set; }

    public virtual DbSet<UserRecommendation> UserRecommendation { get; set; }

    public virtual DbSet<UserRecommendations> UserRecommendations { get; set; }

    public virtual DbSet<Vacancy> Vacancy { get; set; }

    public virtual DbSet<VacancyReason> VacancyReason { get; set; }

    public virtual DbSet<VacancyReasons> VacancyReasons { get; set; }

    public virtual DbSet<VacancyResponse> VacancyResponse { get; set; }

    public virtual DbSet<VacancyResponses> VacancyResponses { get; set; }

    public virtual DbSet<VacancySource> VacancySource { get; set; }

    public virtual DbSet<VacancySources> VacancySources { get; set; }

    public virtual DbSet<VacancySubscription> VacancySubscription { get; set; }

    public virtual DbSet<VacancySubscriptions> VacancySubscriptions { get; set; }

    public virtual DbSet<VacancyType> VacancyType { get; set; }

    public virtual DbSet<VacancyTypes> VacancyTypes { get; set; }

    public virtual DbSet<Vacancys> Vacancys { get; set; }

    public virtual DbSet<VclassSetting> VclassSetting { get; set; }

    public virtual DbSet<VclassSettings> VclassSettings { get; set; }

    public virtual DbSet<VendorState> VendorState { get; set; }

    public virtual DbSet<VendorStates> VendorStates { get; set; }

    public virtual DbSet<Verb> Verb { get; set; }

    public virtual DbSet<Verbs> Verbs { get; set; }

    public virtual DbSet<ViewConfiguration> ViewConfiguration { get; set; }

    public virtual DbSet<ViewConfigurations> ViewConfigurations { get; set; }

    public virtual DbSet<WageSystem> WageSystem { get; set; }

    public virtual DbSet<WageSystems> WageSystems { get; set; }

    public virtual DbSet<Walkthrough> Walkthrough { get; set; }

    public virtual DbSet<Walkthroughs> Walkthroughs { get; set; }

    public virtual DbSet<WebDesign> WebDesign { get; set; }

    public virtual DbSet<WebDesigns> WebDesigns { get; set; }

    public virtual DbSet<WebMode> WebMode { get; set; }

    public virtual DbSet<WebModes> WebModes { get; set; }

    public virtual DbSet<WebPersonState> WebPersonState { get; set; }

    public virtual DbSet<WebPersonStates> WebPersonStates { get; set; }

    public virtual DbSet<WebRule> WebRule { get; set; }

    public virtual DbSet<WebRules> WebRules { get; set; }

    public virtual DbSet<WebinarSystem> WebinarSystem { get; set; }

    public virtual DbSet<WebinarSystems> WebinarSystems { get; set; }

    public virtual DbSet<WikiArticle> WikiArticle { get; set; }

    public virtual DbSet<WikiArticleCommunication> WikiArticleCommunication { get; set; }

    public virtual DbSet<WikiArticleCommunicationType> WikiArticleCommunicationType { get; set; }

    public virtual DbSet<WikiArticleCommunicationTypes> WikiArticleCommunicationTypes { get; set; }

    public virtual DbSet<WikiArticleCommunications> WikiArticleCommunications { get; set; }

    public virtual DbSet<WikiArticleType> WikiArticleType { get; set; }

    public virtual DbSet<WikiArticleTypes> WikiArticleTypes { get; set; }

    public virtual DbSet<WikiArticles> WikiArticles { get; set; }

    public virtual DbSet<WikiBase> WikiBase { get; set; }

    public virtual DbSet<WikiBases> WikiBases { get; set; }

    public virtual DbSet<WorkCondition> WorkCondition { get; set; }

    public virtual DbSet<WorkConditions> WorkConditions { get; set; }

    public virtual DbSet<WorkExperience> WorkExperience { get; set; }

    public virtual DbSet<WorkExperiences> WorkExperiences { get; set; }

    public virtual DbSet<WorkForm> WorkForm { get; set; }

    public virtual DbSet<WorkForms> WorkForms { get; set; }

    public virtual DbSet<WorkMode> WorkMode { get; set; }

    public virtual DbSet<WorkModes> WorkModes { get; set; }

    public virtual DbSet<WorkSchedule> WorkSchedule { get; set; }

    public virtual DbSet<WorkScheduleType> WorkScheduleType { get; set; }

    public virtual DbSet<WorkScheduleTypes> WorkScheduleTypes { get; set; }

    public virtual DbSet<WorkSchedules> WorkSchedules { get; set; }

    public virtual DbSet<Workflow> Workflow { get; set; }

    public virtual DbSet<Workflows> Workflows { get; set; }

    public virtual DbSet<WorkingCondition> WorkingCondition { get; set; }

    public virtual DbSet<WorkingConditionType> WorkingConditionType { get; set; }

    public virtual DbSet<WorkingConditionTypes> WorkingConditionTypes { get; set; }

    public virtual DbSet<WorkingConditions> WorkingConditions { get; set; }

    public virtual DbSet<WorkspaceConfig> WorkspaceConfig { get; set; }

    public virtual DbSet<WorkspaceConfigs> WorkspaceConfigs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AbsenceReserve>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__absence_reserve");

            entity.ToTable("absence_reserve", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AbsenceReserve)
                .HasForeignKey<AbsenceReserve>(d => d.Id)
                .HasConstraintName("FK_objects_absence_reserve");
        });

        modelBuilder.Entity<AbsenceReserves>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__absence_reserves");

            entity.ToTable("absence_reserves", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CalculationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("calculation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NumDays).HasColumnName("num_days");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PresenceStateId).HasColumnName("presence_state_id");
        });

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__account");

            entity.ToTable("account", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Account)
                .HasForeignKey<Account>(d => d.Id)
                .HasConstraintName("FK_objects_account");
        });

        modelBuilder.Entity<Accounts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__accounts");

            entity.ToTable("accounts", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_accounts_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_accounts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_accounts_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Balance, "idx_accounts_5329519350387627793").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CurrencyTypeId, "idx_accounts_6006144048989286690").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Balance).HasColumnName("balance");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Acquaint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaint");

            entity.ToTable("acquaint", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Acquaint)
                .HasForeignKey<Acquaint>(d => d.Id)
                .HasConstraintName("FK_objects_acquaint");
        });

        modelBuilder.Entity<AcquaintAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaint_assign");

            entity.ToTable("acquaint_assign", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AcquaintAssign)
                .HasForeignKey<AcquaintAssign>(d => d.Id)
                .HasConstraintName("FK_objects_acquaint_assign");
        });

        modelBuilder.Entity<AcquaintAssigns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaint_assigns");

            entity.ToTable("acquaint_assigns", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcquaintId).HasColumnName("acquaint_id");
            entity.Property(e => e.AttemptNum).HasColumnName("attempt_num");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NormativeDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("normative_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ReacquaintancePeriod).HasColumnName("reacquaintance_period");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<Acquaints>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__acquaints");

            entity.ToTable("acquaints", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcquaintNum).HasColumnName("acquaint_num");
            entity.Property(e => e.AcquaintedNum).HasColumnName("acquainted_num");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentsId).HasColumnName("assessments_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Collaborators)
                .HasColumnType("character varying")
                .HasColumnName("collaborators");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NormativeDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("normative_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.ReacquaintancePeriod).HasColumnName("reacquaintance_period");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<ActionReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__action_report");

            entity.ToTable("action_report", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActionReport)
                .HasForeignKey<ActionReport>(d => d.Id)
                .HasConstraintName("FK_objects_action_report");
        });

        modelBuilder.Entity<ActionReports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__action_reports");

            entity.ToTable("action_reports", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_action_reports_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_action_reports_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExchangeServerId, "idx_action_reports_5622085334512132351").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DataFileUrl)
                .HasColumnType("character varying")
                .HasColumnName("data_file_url");
            entity.Property(e => e.ExchangeServerId).HasColumnName("exchange_server_id");
            entity.Property(e => e.LastUploadDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_upload_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<ActiveLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_learning");

            entity.ToTable("active_learning", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveLearning)
                .HasForeignKey<ActiveLearning>(d => d.Id)
                .HasConstraintName("FK_objects_active_learning");
        });

        modelBuilder.Entity<ActiveLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_learnings");

            entity.ToTable("active_learnings", "dbo");

            entity.HasIndex(e => e.Score, "idx_active_learnings_1274816053449134588").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseName, "idx_active_learnings_13156693899515752705").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_active_learnings_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartUsageDate, "idx_active_learnings_14685550398137120485").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartLearningDate, "idx_active_learnings_15507069630625229787").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MaxEndDate, "idx_active_learnings_15811904719283636476").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_active_learnings_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonCurrentState, "idx_active_learnings_18249609201350823935").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LastUsageDate, "idx_active_learnings_2805863787306454597").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_active_learnings_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_active_learnings_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseId, "idx_active_learnings_6140445976813544658").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_active_learnings_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_active_learnings_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_active_learnings_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventName, "idx_active_learnings_675872731354680815").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseName)
                .HasMaxLength(900)
                .HasColumnName("course_name");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasMaxLength(900)
                .HasColumnName("event_name");
            entity.Property(e => e.EventStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("event_start_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsSelfEnrolled).HasColumnName("is_self_enrolled");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.LastUsagePartCode)
                .HasColumnType("character varying")
                .HasColumnName("last_usage_part_code");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("max_end_date");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ActiveNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_notification");

            entity.ToTable("active_notification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveNotification)
                .HasForeignKey<ActiveNotification>(d => d.Id)
                .HasConstraintName("FK_objects_active_notification");
        });

        modelBuilder.Entity<ActiveNotifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_notifications");

            entity.ToTable("active_notifications", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_active_notifications_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SendDate, "idx_active_notifications_5349856024679540831").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_active_notifications_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.LastSendDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_send_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.RecipientPersonId).HasColumnName("recipient_person_id");
            entity.Property(e => e.SendCounter).HasColumnName("send_counter");
            entity.Property(e => e.SendDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("send_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.Subject)
                .HasColumnType("character varying")
                .HasColumnName("subject");
        });

        modelBuilder.Entity<ActiveTestLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_test_learning");

            entity.ToTable("active_test_learning", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveTestLearning)
                .HasForeignKey<ActiveTestLearning>(d => d.Id)
                .HasConstraintName("FK_objects_active_test_learning");
        });

        modelBuilder.Entity<ActiveTestLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_test_learnings");

            entity.ToTable("active_test_learnings", "dbo");

            entity.HasIndex(e => e.AssessmentId, "idx_active_test_learnings_1260655685115992298").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Score, "idx_active_test_learnings_1274816053449134588").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_active_test_learnings_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartUsageDate, "idx_active_test_learnings_14685550398137120485").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartLearningDate, "idx_active_test_learnings_15507069630625229787").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MaxEndDate, "idx_active_test_learnings_15811904719283636476").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_active_test_learnings_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonCurrentState, "idx_active_test_learnings_18249609201350823935").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentName, "idx_active_test_learnings_2447176992773035151").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LastUsageDate, "idx_active_test_learnings_2805863787306454597").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_active_test_learnings_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_active_test_learnings_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_active_test_learnings_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_active_test_learnings_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_active_test_learnings_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_active_test_learnings_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.AssessmentName)
                .HasMaxLength(900)
                .HasColumnName("assessment_name");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsSelfEnrolled).HasColumnName("is_self_enrolled");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("max_end_date");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ProctorPreferId).HasColumnName("proctor_prefer_id");
            entity.Property(e => e.QuestionAnsweredNum).HasColumnName("question_answered_num");
            entity.Property(e => e.QuestionNum).HasColumnName("question_num");
            entity.Property(e => e.QuestionPassedNum).HasColumnName("question_passed_num");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.TestingLink)
                .HasColumnType("character varying")
                .HasColumnName("testing_link");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ActiveWebTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_web_template");

            entity.ToTable("active_web_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActiveWebTemplate)
                .HasForeignKey<ActiveWebTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_active_web_template");
        });

        modelBuilder.Entity<ActiveWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__active_web_templates");

            entity.ToTable("active_web_templates", "dbo");

            entity.HasIndex(e => e.Hash, "idx_active_web_templates_892092470487758047").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessRole)
                .HasColumnType("character varying")
                .HasColumnName("access_role");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.Hash)
                .HasMaxLength(900)
                .HasColumnName("hash");
            entity.Property(e => e.Mode)
                .HasColumnType("character varying")
                .HasColumnName("mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity");

            entity.ToTable("activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Activity)
                .HasForeignKey<Activity>(d => d.Id)
                .HasConstraintName("FK_objects_activity");
        });

        modelBuilder.Entity<ActivityState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity_state");

            entity.ToTable("activity_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ActivityState)
                .HasForeignKey<ActivityState>(d => d.Id)
                .HasConstraintName("FK_objects_activity_state");
        });

        modelBuilder.Entity<ActivityStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activity_states");

            entity.ToTable("activity_states", "dbo");

            entity.HasIndex(e => e.ActivityCode, "idx_activity_states_10792972903593008671").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActivityId, "idx_activity_states_1272820070198399442").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_activity_states_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Registration, "idx_activity_states_13903906279368334287").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_activity_states_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_activity_states_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_activity_states_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AgentJsonStr, "idx_activity_states_760678047644280099").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityCode)
                .HasMaxLength(900)
                .HasColumnName("activity_code");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AgentJsonStr)
                .HasMaxLength(900)
                .HasColumnName("agent_json_str");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Registration)
                .HasMaxLength(900)
                .HasColumnName("registration");
        });

        modelBuilder.Entity<Activitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__activitys");

            entity.ToTable("activitys", "dbo");

            entity.HasIndex(e => e.Code, "idx_activitys_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsEval).HasColumnName("is_eval");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<AdminConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__admin_configuration");

            entity.ToTable("admin_configuration", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AdminConfiguration)
                .HasForeignKey<AdminConfiguration>(d => d.Id)
                .HasConstraintName("FK_objects_admin_configuration");
        });

        modelBuilder.Entity<AdminConfigurations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__admin_configurations");

            entity.ToTable("admin_configurations", "dbo");

            entity.HasIndex(e => e.Code, "idx_admin_configurations_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_admin_configurations_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_admin_configurations_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_admin_configurations_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Application>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__application");

            entity.ToTable("application", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Application)
                .HasForeignKey<Application>(d => d.Id)
                .HasConstraintName("FK_objects_application");
        });

        modelBuilder.Entity<ApplicationInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__application_instance");

            entity.ToTable("application_instance", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ApplicationInstance)
                .HasForeignKey<ApplicationInstance>(d => d.Id)
                .HasConstraintName("FK_objects_application_instance");
        });

        modelBuilder.Entity<ApplicationInstances>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__application_instances");

            entity.ToTable("application_instances", "dbo");

            entity.HasIndex(e => e.Code, "idx_application_instances_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_application_instances_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApplicationId).HasColumnName("application_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Applications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__applications");

            entity.ToTable("applications", "dbo");

            entity.HasIndex(e => e.Code, "idx_applications_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_applications_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DefaultXmsUrl)
                .HasColumnType("character varying")
                .HasColumnName("default_xms_url");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LicType)
                .HasColumnType("character varying")
                .HasColumnName("lic_type");
            entity.Property(e => e.ListXmsUrl)
                .HasColumnType("character varying")
                .HasColumnName("list_xms_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Vendor)
                .HasColumnType("character varying")
                .HasColumnName("vendor");
            entity.Property(e => e.VendorLibrary)
                .HasColumnType("character varying")
                .HasColumnName("vendor_library");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<AppointmentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__appointment_type");

            entity.ToTable("appointment_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AppointmentType)
                .HasForeignKey<AppointmentType>(d => d.Id)
                .HasConstraintName("FK_objects_appointment_type");
        });

        modelBuilder.Entity<AppointmentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__appointment_types");

            entity.ToTable("appointment_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__article");

            entity.ToTable("article", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Article)
                .HasForeignKey<Article>(d => d.Id)
                .HasConstraintName("FK_objects_article");
        });

        modelBuilder.Entity<Articles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__articles");

            entity.ToTable("articles", "dbo");

            entity.HasIndex(e => e.ParentObjectId, "idx_articles_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BookId, "idx_articles_5917878509392102308").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_articles_17733368176671557906");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BookId).HasColumnName("book_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LibraryMaterialId).HasColumnName("library_material_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<Assessment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment");

            entity.ToTable("assessment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Assessment)
                .HasForeignKey<Assessment>(d => d.Id)
                .HasConstraintName("FK_objects_assessment");
        });

        modelBuilder.Entity<AssessmentAppraise>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraise");

            entity.ToTable("assessment_appraise", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentAppraise)
                .HasForeignKey<AssessmentAppraise>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_appraise");
        });

        modelBuilder.Entity<AssessmentAppraiseMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraise_matrix");

            entity.ToTable("assessment_appraise_matrix", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentAppraiseMatrix)
                .HasForeignKey<AssessmentAppraiseMatrix>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_appraise_matrix");
        });

        modelBuilder.Entity<AssessmentAppraiseMatrixs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraise_matrixs");

            entity.ToTable("assessment_appraise_matrixs", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<AssessmentAppraises>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_appraises");

            entity.ToTable("assessment_appraises", "dbo");

            entity.HasIndex(e => e.Code, "idx_assessment_appraises_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_assessment_appraises_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_assessment_appraises_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.ExternalDisplayOptions)
                .HasColumnType("character varying")
                .HasColumnName("external_display_options");
            entity.Property(e => e.FlagUsePlan).HasColumnName("flag_use_plan");
            entity.Property(e => e.IgnorePresence).HasColumnName("ignore_presence");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsVisibleAuditorys).HasColumnName("is_visible_auditorys");
            entity.Property(e => e.IsVisibleEvaluatings).HasColumnName("is_visible_evaluatings");
            entity.Property(e => e.IsVisibleExperts).HasColumnName("is_visible_experts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Player).HasColumnName("player");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebDisplay).HasColumnName("web_display");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<AssessmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_plan");

            entity.ToTable("assessment_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentPlan)
                .HasForeignKey<AssessmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_plan");
        });

        modelBuilder.Entity<AssessmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_plans");

            entity.ToTable("assessment_plans", "dbo");

            entity.HasIndex(e => e.ExpertPersonId, "idx_assessment_plans_15179806528777423025").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_assessment_plans_15310678443979824546").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_assessment_plans_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_assessment_plans_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpertPersonFullname, "idx_assessment_plans_5890983671244772754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_assessment_plans_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsCustomExperts, "idx_assessment_plans_8768740737131510458").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BossId, "idx_assessment_plans_9744169099042045482").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CustomExpertsArray, "idx_assessment_plans_9862283384034150577").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentAppraiseType)
                .HasColumnType("character varying")
                .HasColumnName("assessment_appraise_type");
            entity.Property(e => e.BossId).HasColumnName("boss_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CustomExperts)
                .HasColumnType("character varying")
                .HasColumnName("custom_experts");
            entity.Property(e => e.CustomExpertsArray).HasColumnName("custom_experts_array");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .HasColumnType("character varying")
                .HasColumnName("department_name");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.ExpertPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionId).HasColumnName("expert_person_position_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.ExpertPersonPositionParentId).HasColumnName("expert_person_position_parent_id");
            entity.Property(e => e.FlagAppraiseDepartment).HasColumnName("flag_appraise_department");
            entity.Property(e => e.FlagIsProcessed).HasColumnName("flag_is_processed");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.IntegralMark).HasColumnName("integral_mark");
            entity.Property(e => e.IsCustomExperts).HasColumnName("is_custom_experts");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsWorkflowInit).HasColumnName("is_workflow_init");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PeriodEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_end");
            entity.Property(e => e.PeriodStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_start");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonPositionParentId).HasColumnName("person_position_parent_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("workflow_end_date");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasColumnType("character varying")
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateLastDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("workflow_state_last_date");
            entity.Property(e => e.WorkflowStateName)
                .HasColumnType("character varying")
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<AssessmentResultRecommend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_result_recommend");

            entity.ToTable("assessment_result_recommend", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AssessmentResultRecommend)
                .HasForeignKey<AssessmentResultRecommend>(d => d.Id)
                .HasConstraintName("FK_objects_assessment_result_recommend");
        });

        modelBuilder.Entity<AssessmentResultRecommends>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessment_result_recommends");

            entity.ToTable("assessment_result_recommends", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Assessments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__assessments");

            entity.ToTable("assessments", "dbo");

            entity.HasIndex(e => e.Code, "idx_assessments_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_assessments_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Title, "idx_assessments_9903940765029670819").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.ExternalType)
                .HasColumnType("character varying")
                .HasColumnName("external_type");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NotDisplayUnfinishedScore).HasColumnName("not_display_unfinished_score");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PassingScore).HasColumnName("passing_score");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.TestingSystemId).HasColumnName("testing_system_id");
            entity.Property(e => e.Title)
                .HasMaxLength(900)
                .HasColumnName("title");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<Attorney>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__attorney");

            entity.ToTable("attorney", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Attorney)
                .HasForeignKey<Attorney>(d => d.Id)
                .HasConstraintName("FK_objects_attorney");
        });

        modelBuilder.Entity<Attorneys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__attorneys");

            entity.ToTable("attorneys", "dbo");

            entity.HasIndex(e => e.Code, "idx_attorneys_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EssentialId, "idx_attorneys_2220159356115151431").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EssentialName, "idx_attorneys_3479392946728630966").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AttorneySigFileUrl)
                .HasColumnType("character varying")
                .HasColumnName("attorney_sig_file_url");
            entity.Property(e => e.AttorneyUrl)
                .HasColumnType("character varying")
                .HasColumnName("attorney_url");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.EssentialId)
                .HasMaxLength(900)
                .HasColumnName("essential_id");
            entity.Property(e => e.EssentialName)
                .HasMaxLength(900)
                .HasColumnName("essential_name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.Upload).HasColumnName("upload");
        });

        modelBuilder.Entity<AuthType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__auth_type");

            entity.ToTable("auth_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AuthType)
                .HasForeignKey<AuthType>(d => d.Id)
                .HasConstraintName("FK_objects_auth_type");
        });

        modelBuilder.Entity<AuthTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__auth_types");

            entity.ToTable("auth_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<AvailabilityPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__availability_plan");

            entity.ToTable("availability_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.AvailabilityPlan)
                .HasForeignKey<AvailabilityPlan>(d => d.Id)
                .HasConstraintName("FK_objects_availability_plan");
        });

        modelBuilder.Entity<AvailabilityPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__availability_plans");

            entity.ToTable("availability_plans", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_availability_plans_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasColumnType("character varying")
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<Banner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__banner");

            entity.ToTable("banner", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Banner)
                .HasForeignKey<Banner>(d => d.Id)
                .HasConstraintName("FK_objects_banner");
        });

        modelBuilder.Entity<Banners>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__banners");

            entity.ToTable("banners", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_banners_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ImgUrl)
                .HasColumnType("character varying")
                .HasColumnName("img_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Zone)
                .HasColumnType("character varying")
                .HasColumnName("zone");
        });

        modelBuilder.Entity<Basket>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__basket");

            entity.ToTable("basket", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Basket)
                .HasForeignKey<Basket>(d => d.Id)
                .HasConstraintName("FK_objects_basket");
        });

        modelBuilder.Entity<Baskets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__baskets");

            entity.ToTable("baskets", "dbo");

            entity.HasIndex(e => e.Code, "idx_baskets_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_baskets_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_baskets_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_baskets_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_baskets_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_baskets_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Benefit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit");

            entity.ToTable("benefit", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Benefit)
                .HasForeignKey<Benefit>(d => d.Id)
                .HasConstraintName("FK_objects_benefit");
        });

        modelBuilder.Entity<BenefitItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit_item");

            entity.ToTable("benefit_item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BenefitItem)
                .HasForeignKey<BenefitItem>(d => d.Id)
                .HasConstraintName("FK_objects_benefit_item");
        });

        modelBuilder.Entity<BenefitItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit_items");

            entity.ToTable("benefit_items", "dbo");

            entity.HasIndex(e => e.BenefitId, "idx_benefit_items_16324197785489482993").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_benefit_items_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_benefit_items_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_benefit_items_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_benefit_items_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BenefitId).HasColumnName("benefit_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
        });

        modelBuilder.Entity<BenefitProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit_profile");

            entity.ToTable("benefit_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BenefitProfile)
                .HasForeignKey<BenefitProfile>(d => d.Id)
                .HasConstraintName("FK_objects_benefit_profile");
        });

        modelBuilder.Entity<BenefitProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefit_profiles");

            entity.ToTable("benefit_profiles", "dbo");

            entity.HasIndex(e => e.WorkFormId, "idx_benefit_profiles_10499831804146319023").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_benefit_profiles_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionGroupId, "idx_benefit_profiles_15283384802194214391").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonRegionId, "idx_benefit_profiles_17994785710791202092").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionFamilyId, "idx_benefit_profiles_2419792123432935711").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_benefit_profiles_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionPlaceId, "idx_benefit_profiles_3430586685147985101").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonPlaceId, "idx_benefit_profiles_5046916206604015698").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_benefit_profiles_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkingConditionTypeId, "idx_benefit_profiles_6476678155043119598").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionRegionId, "idx_benefit_profiles_8255936764394820385").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_benefit_profiles_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BenefitsIds).HasColumnName("benefits_ids");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.GradesIds).HasColumnName("grades_ids");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonPlaceId).HasColumnName("person_place_id");
            entity.Property(e => e.PersonRegionId).HasColumnName("person_region_id");
            entity.Property(e => e.PositionCommonsIds).HasColumnName("position_commons_ids");
            entity.Property(e => e.PositionFamilyId).HasColumnName("position_family_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.SubdivisionPlaceId).HasColumnName("subdivision_place_id");
            entity.Property(e => e.SubdivisionRegionId).HasColumnName("subdivision_region_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkExperience).HasColumnName("work_experience");
            entity.Property(e => e.WorkFormId).HasColumnName("work_form_id");
            entity.Property(e => e.WorkingConditionTypeId).HasColumnName("working_condition_type_id");
        });

        modelBuilder.Entity<Benefits>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__benefits");

            entity.ToTable("benefits", "dbo");

            entity.HasIndex(e => e.Code, "idx_benefits_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_benefits_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_benefits_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_benefits_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<BlockMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__block_message");

            entity.ToTable("block_message", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BlockMessage)
                .HasForeignKey<BlockMessage>(d => d.Id)
                .HasConstraintName("FK_objects_block_message");
        });

        modelBuilder.Entity<BlockMessages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__block_messages");

            entity.ToTable("block_messages", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_block_messages_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_block_messages_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RecipientId, "idx_block_messages_17569363510067578275").HasMethod("gin");

            entity.HasIndex(e => e.LastMessageDate, "idx_block_messages_2158356767694781232").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnreadRecipientId, "idx_block_messages_3866122990651656416").HasMethod("gin");

            entity.HasIndex(e => e.ObjectId, "idx_block_messages_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllMessageRead).HasColumnName("all_message_read");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CountMessage).HasColumnName("count_message");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DisabledData).HasColumnName("disabled_data");
            entity.Property(e => e.DispRoleId)
                .HasColumnType("character varying[]")
                .HasColumnName("disp_role_id");
            entity.Property(e => e.HasFile).HasColumnName("has_file");
            entity.Property(e => e.HasLink).HasColumnName("has_link");
            entity.Property(e => e.LastMessageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_message_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.RecipientId).HasColumnName("recipient_id");
            entity.Property(e => e.StateId)
                .HasMaxLength(900)
                .HasColumnName("state_id");
            entity.Property(e => e.UnreadRecipientId).HasColumnName("unread_recipient_id");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog");

            entity.ToTable("blog", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Blog)
                .HasForeignKey<Blog>(d => d.Id)
                .HasConstraintName("FK_objects_blog");
        });

        modelBuilder.Entity<BlogAuthors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_authors");

            entity.ToTable("blog_authors", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_blog_authors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BlogId, "idx_blog_authors_9719438874829991504").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BlogId).HasColumnName("blog_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.IsFullModerator).HasColumnName("is_full_moderator");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId)
                .HasMaxLength(900)
                .HasColumnName("person_id");
        });

        modelBuilder.Entity<BlogEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entry");

            entity.ToTable("blog_entry", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BlogEntry)
                .HasForeignKey<BlogEntry>(d => d.Id)
                .HasConstraintName("FK_objects_blog_entry");
        });

        modelBuilder.Entity<BlogEntryComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entry_comment");

            entity.ToTable("blog_entry_comment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BlogEntryComment)
                .HasForeignKey<BlogEntryComment>(d => d.Id)
                .HasConstraintName("FK_objects_blog_entry_comment");
        });

        modelBuilder.Entity<BlogEntryComments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entry_comments");

            entity.ToTable("blog_entry_comments", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_blog_entry_comments_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BlogEntryId, "idx_blog_entry_comments_16042715090301618133").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_blog_entry_comments_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreatorName, "idx_blog_entry_comments_3420322069946448951").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_blog_entry_comments_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_blog_entry_comments_13708857399246375888");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BlogEntryId).HasColumnName("blog_entry_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorName)
                .HasMaxLength(900)
                .HasColumnName("creator_name");
            entity.Property(e => e.LikeId).HasColumnName("like_id");
            entity.Property(e => e.Message)
                .HasColumnType("character varying")
                .HasColumnName("message");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<BlogEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blog_entrys");

            entity.ToTable("blog_entrys", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_blog_entrys_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_blog_entrys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FeedItemId, "idx_blog_entrys_371985447498284797").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_blog_entrys_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_blog_entrys_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_blog_entrys_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BlogId, "idx_blog_entrys_9719438874829991504").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowComment).HasColumnName("allow_comment");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.BlogId).HasColumnName("blog_id");
            entity.Property(e => e.CommentNum).HasColumnName("comment_num");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.FeedItemId)
                .HasMaxLength(900)
                .HasColumnName("feed_item_id");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.Labels)
                .HasColumnType("character varying")
                .HasColumnName("labels");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<Blogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__blogs");

            entity.ToTable("blogs", "dbo");

            entity.HasIndex(e => e.ChannelProviderId, "idx_blogs_11498010964430743985").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Type, "idx_blogs_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_blogs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_blogs_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowAnonymousComment).HasColumnName("allow_anonymous_comment");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Authors)
                .HasColumnType("character varying")
                .HasColumnName("authors");
            entity.Property(e => e.AuthorsNum).HasColumnName("authors_num");
            entity.Property(e => e.ChannelProviderId).HasColumnName("channel_provider_id");
            entity.Property(e => e.CreatorFullInfo)
                .HasColumnType("character varying")
                .HasColumnName("creator_full_info");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PermitSubscription).HasColumnName("permit_subscription");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BonusItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_item");

            entity.ToTable("bonus_item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BonusItem)
                .HasForeignKey<BonusItem>(d => d.Id)
                .HasConstraintName("FK_objects_bonus_item");
        });

        modelBuilder.Entity<BonusItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_items");

            entity.ToTable("bonus_items", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PeriodEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_end");
            entity.Property(e => e.PeriodStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_start");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BonusProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_profile");

            entity.ToTable("bonus_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BonusProfile)
                .HasForeignKey<BonusProfile>(d => d.Id)
                .HasConstraintName("FK_objects_bonus_profile");
        });

        modelBuilder.Entity<BonusProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__bonus_profiles");

            entity.ToTable("bonus_profiles", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Book>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__book");

            entity.ToTable("book", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Book)
                .HasForeignKey<Book>(d => d.Id)
                .HasConstraintName("FK_objects_book");
        });

        modelBuilder.Entity<Books>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__books");

            entity.ToTable("books", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LibrarySectionId).HasColumnName("library_section_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BossType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__boss_type");

            entity.ToTable("boss_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BossType)
                .HasForeignKey<BossType>(d => d.Id)
                .HasConstraintName("FK_objects_boss_type");
        });

        modelBuilder.Entity<BossTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__boss_types");

            entity.ToTable("boss_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_boss_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying[]")
                .HasColumnName("object_type");
            entity.Property(e => e.OperationId)
                .HasColumnType("character varying[]")
                .HasColumnName("operation_id");
            entity.Property(e => e.Operations)
                .HasColumnType("character varying")
                .HasColumnName("operations");
        });

        modelBuilder.Entity<Bp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__bp");

            entity.ToTable("bp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Bp)
                .HasForeignKey<Bp>(d => d.Id)
                .HasConstraintName("fk_objects_bp");
        });

        modelBuilder.Entity<BpRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__bp_role");

            entity.ToTable("bp_role", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BpRole)
                .HasForeignKey<BpRole>(d => d.Id)
                .HasConstraintName("fk_objects_bp_role");
        });

        modelBuilder.Entity<BpRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__bp_roles");

            entity.ToTable("bp_roles", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<BprocessRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__bprocess_roles");

            entity.ToTable("bprocess_roles", "dbo");

            entity.HasIndex(e => e.BproleId, "idx_1907794128");

            entity.HasIndex(e => e.BpId, "idx_1951382696");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.BproleId).HasColumnName("bprole_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.RoleName).HasColumnName("role_name");
        });

        modelBuilder.Entity<BproleCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__bprole_collaborators");

            entity.ToTable("bprole_collaborators", "dbo");

            entity.HasIndex(e => e.BproleId, "idx_1907794129");

            entity.HasIndex(e => e.PersonId, "idx_931206507");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BproleId).HasColumnName("bprole_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Bps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__bps");

            entity.ToTable("bps", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentBpId).HasColumnName("parent_bp_id");
        });

        modelBuilder.Entity<Budget>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget");

            entity.ToTable("budget", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Budget)
                .HasForeignKey<Budget>(d => d.Id)
                .HasConstraintName("FK_objects_budget");
        });

        modelBuilder.Entity<BudgetObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_objects");

            entity.ToTable("budget_objects", "dbo");

            entity.HasIndex(e => e.CatalogName, "idx_budget_objects_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetId, "idx_budget_objects_16081977113023356739").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_budget_objects_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.All).HasColumnName("all");
            entity.Property(e => e.BudgetId).HasColumnName("budget_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
        });

        modelBuilder.Entity<BudgetPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_period");

            entity.ToTable("budget_period", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BudgetPeriod)
                .HasForeignKey<BudgetPeriod>(d => d.Id)
                .HasConstraintName("FK_objects_budget_period");
        });

        modelBuilder.Entity<BudgetPeriods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_periods");

            entity.ToTable("budget_periods", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_budget_periods_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_budget_periods_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentId, "idx_budget_periods_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_budget_periods_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_budget_periods_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_budget_periods_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_budget_periods_15991137410175193247");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PeriodType)
                .HasColumnType("character varying")
                .HasColumnName("period_type");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<BudgetType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_type");

            entity.ToTable("budget_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.BudgetType)
                .HasForeignKey<BudgetType>(d => d.Id)
                .HasConstraintName("FK_objects_budget_type");
        });

        modelBuilder.Entity<BudgetTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budget_types");

            entity.ToTable("budget_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Budgets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__budgets");

            entity.ToTable("budgets", "dbo");

            entity.HasIndex(e => e.CostCenterId, "idx_budgets_15646206976949266431").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_budgets_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpenseItemId, "idx_budgets_2234300016655417772").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_budgets_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.ExpenseItemId).HasColumnName("expense_item_id");
            entity.Property(e => e.IsApproved).HasColumnName("is_approved");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CaApprove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ca_approve");

            entity.ToTable("ca_approve", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ca_approve_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.CaPlanId).HasColumnName("ca_plan_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostDay).HasColumnName("cost_day");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDay).HasColumnName("duration_day");
            entity.Property(e => e.EduOrgId).HasColumnName("edu_org_id");
            entity.Property(e => e.EduOrgName).HasColumnName("edu_org_name");
            entity.Property(e => e.EmCode).HasColumnName("em_code");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.EmName).HasColumnName("em_name");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsMass).HasColumnName("is_mass");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.StantionName).HasColumnName("stantion_name");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CaPlan).WithMany(p => p.CaApprove)
                .HasForeignKey(d => d.CaPlanId)
                .HasConstraintName("fk_ca_plan_ca_approve");
        });

        modelBuilder.Entity<CaPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ca_plan");

            entity.ToTable("ca_plan", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ca_plan_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriod).HasColumnName("budget_period");
            entity.Property(e => e.Phase)
                .HasDefaultValue(0)
                .HasColumnName("phase");
            entity.Property(e => e.Station).HasColumnName("station");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CaPlanUpdates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ca_plan_updates");

            entity.ToTable("ca_plan_updates", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ca_plan_updates_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.CaPlanId).HasColumnName("ca_plan_id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("create_date");
            entity.Property(e => e.EduOrgId).HasColumnName("edu_org_id");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsLast)
                .HasDefaultValue((short)1)
                .HasColumnName("is_last");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CaPlan).WithMany(p => p.CaPlanUpdates)
                .HasForeignKey(d => d.CaPlanId)
                .HasConstraintName("fk_ca_plan_updates_ca_plan");
        });

        modelBuilder.Entity<CaPlanUpdatesCost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ca_plan_updates_cost");

            entity.ToTable("ca_plan_updates_cost", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ca_plan_updates_cost_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("create_date");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.IsLast)
                .HasDefaultValue(true)
                .HasColumnName("is_last");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CaPlanUpdatesDuration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ca_plan_updates_duration");

            entity.ToTable("ca_plan_updates_duration", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ca_plan_updates_duration_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.CreateDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("create_date");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EmId).HasColumnName("em_id");
            entity.Property(e => e.IsLast)
                .HasDefaultValue(true)
                .HasColumnName("is_last");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CalendarEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__calendar_event");

            entity.ToTable("calendar_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CalendarEvent)
                .HasForeignKey<CalendarEvent>(d => d.Id)
                .HasConstraintName("FK_objects_calendar_event");
        });

        modelBuilder.Entity<CalendarEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__calendar_events");

            entity.ToTable("calendar_events", "dbo");

            entity.HasIndex(e => e.ConfirmParticipantIds, "idx_calendar_events_10146520266220986967").HasMethod("gin");

            entity.HasIndex(e => e.NextStartDate, "idx_calendar_events_10972978145324972383").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_calendar_events_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_calendar_events_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.NotParticipateParticipantIds, "idx_calendar_events_15861523945098355891").HasMethod("gin");

            entity.HasIndex(e => e.TutorIds, "idx_calendar_events_16429573073904805890").HasMethod("gin");

            entity.HasIndex(e => e.SchedulerWeekDaysIds, "idx_calendar_events_1730911113980448051").HasMethod("gin");

            entity.HasIndex(e => e.Name, "idx_calendar_events_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_calendar_events_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParticipantIds, "idx_calendar_events_7589355231223967666").HasMethod("gin");

            entity.HasIndex(e => e.NotificationReminderDate, "idx_calendar_events_9174668608477086027").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ConfirmParticipantIds).HasColumnName("confirm_participant_ids");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.EndTime)
                .HasColumnType("character varying")
                .HasColumnName("end_time");
            entity.Property(e => e.InstanceCode)
                .HasColumnType("character varying")
                .HasColumnName("instance_code");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.IsException).HasColumnName("is_exception");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.NextStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("next_start_date");
            entity.Property(e => e.NotParticipateParticipantIds).HasColumnName("not_participate_participant_ids");
            entity.Property(e => e.NotificationReminderDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("notification_reminder_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParticipantIds).HasColumnName("participant_ids");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.PlanEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_end_date");
            entity.Property(e => e.PlanStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_start_date");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SchedulerTypeId)
                .HasColumnType("character varying")
                .HasColumnName("scheduler_type_id");
            entity.Property(e => e.SchedulerWeekDaysIds)
                .HasColumnType("character varying[]")
                .HasColumnName("scheduler_week_days_ids");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartTime)
                .HasColumnType("character varying")
                .HasColumnName("start_time");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.TutorIds).HasColumnName("tutor_ids");
            entity.Property(e => e.WeekTypeId)
                .HasColumnType("character varying")
                .HasColumnName("week_type_id");
        });

        modelBuilder.Entity<Call>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__call");

            entity.ToTable("call", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Call)
                .HasForeignKey<Call>(d => d.Id)
                .HasConstraintName("FK_objects_call");
        });

        modelBuilder.Entity<Calls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__calls");

            entity.ToTable("calls", "dbo");

            entity.HasIndex(e => e.ConversationId, "idx_calls_11146221138823184787").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParticipantsId, "idx_calls_12108299353249711760").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveParticipantsId).HasColumnName("active_participants_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.EnteredParticipantsId).HasColumnName("entered_participants_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParticipantsId).HasColumnName("participants_id");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PlanEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_end_date");
            entity.Property(e => e.PlanStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_start_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<CandidateSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_source");

            entity.ToTable("candidate_source", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CandidateSource)
                .HasForeignKey<CandidateSource>(d => d.Id)
                .HasConstraintName("FK_objects_candidate_source");
        });

        modelBuilder.Entity<CandidateSources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_sources");

            entity.ToTable("candidate_sources", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CandidateStatusType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_status_type");

            entity.ToTable("candidate_status_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CandidateStatusType)
                .HasForeignKey<CandidateStatusType>(d => d.Id)
                .HasConstraintName("FK_objects_candidate_status_type");
        });

        modelBuilder.Entity<CandidateStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__candidate_status_types");

            entity.ToTable("candidate_status_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_candidate_status_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_candidate_status_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_candidate_status_types_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_candidate_status_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CareerPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_plan");

            entity.ToTable("career_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CareerPlan)
                .HasForeignKey<CareerPlan>(d => d.Id)
                .HasConstraintName("FK_objects_career_plan");
        });

        modelBuilder.Entity<CareerPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_plans");

            entity.ToTable("career_plans", "dbo");

            entity.HasIndex(e => e.TypicalCareerPlanId, "idx_career_plans_12256604374663218629").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.TypicalCareerPlanId).HasColumnName("typical_career_plan_id");
        });

        modelBuilder.Entity<CareerReserve>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve");

            entity.ToTable("career_reserve", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CareerReserve)
                .HasForeignKey<CareerReserve>(d => d.Id)
                .HasConstraintName("FK_objects_career_reserve");
        });

        modelBuilder.Entity<CareerReserveTutors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve_tutors");

            entity.ToTable("career_reserve_tutors", "dbo");

            entity.HasIndex(e => e.TutorId, "idx_career_reserve_tutors_17328617611376397014").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ReadinessPercent, "idx_career_reserve_tutors_17481043029659764754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_career_reserve_tutors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CareerReserveId, "idx_career_reserve_tutors_7697738964987669189").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CareerReserveId).HasColumnName("career_reserve_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsResponsible).HasColumnName("is_responsible");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanReadinessDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_readiness_date");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.TutorFullname)
                .HasColumnType("character varying")
                .HasColumnName("tutor_fullname");
            entity.Property(e => e.TutorId).HasColumnName("tutor_id");
            entity.Property(e => e.TutorType)
                .HasColumnType("character varying")
                .HasColumnName("tutor_type");
        });

        modelBuilder.Entity<CareerReserveType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve_type");

            entity.ToTable("career_reserve_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CareerReserveType)
                .HasForeignKey<CareerReserveType>(d => d.Id)
                .HasConstraintName("FK_objects_career_reserve_type");
        });

        modelBuilder.Entity<CareerReserveTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserve_types");

            entity.ToTable("career_reserve_types", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_career_reserve_types_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_career_reserve_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_career_reserve_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_career_reserve_types_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_career_reserve_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CareerReserves>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_reserves");

            entity.ToTable("career_reserves", "dbo");

            entity.HasIndex(e => e.SuccessorId, "idx_career_reserves_10748794002060237350").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FinishDate, "idx_career_reserves_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionId, "idx_career_reserves_12300354286168187930").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_career_reserves_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_career_reserves_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_career_reserves_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionType, "idx_career_reserves_14934212411194568407").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CareerPlanId, "idx_career_reserves_15691617210633262830").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionCommonId, "idx_career_reserves_16314848977653227823").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ReadinessPercent, "idx_career_reserves_17481043029659764754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonnelReserveId, "idx_career_reserves_17856881109671369851").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlanReadinessDate, "idx_career_reserves_18176462046429350136").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonPosition, "idx_career_reserves_18308954079677618010").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_career_reserves_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_career_reserves_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_career_reserves_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_career_reserves_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_career_reserves_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.PositionName, "idx_career_reserves_7850265971443817575").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_career_reserves_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerPlanId).HasColumnName("career_plan_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DevelopmentProgramsId).HasColumnName("development_programs_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPosition)
                .HasMaxLength(900)
                .HasColumnName("person_position");
            entity.Property(e => e.PersonnelReserveId).HasColumnName("personnel_reserve_id");
            entity.Property(e => e.PlanReadinessDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_readiness_date");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .HasColumnName("position_name");
            entity.Property(e => e.PositionType)
                .HasMaxLength(900)
                .HasColumnName("position_type");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SuccessorId).HasColumnName("successor_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CareerTrees>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__career_trees");

            entity.ToTable("career_trees", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CurrentPositionName)
                .HasColumnType("character varying")
                .HasColumnName("current_position_name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PositionCollaboratorFullname)
                .HasColumnType("character varying")
                .HasColumnName("position_collaborator_fullname");
            entity.Property(e => e.PositionName)
                .HasColumnType("character varying")
                .HasColumnName("position_name");
        });

        modelBuilder.Entity<CcAccessDivison>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_divison");

            entity.ToTable("cc_access_divison", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessDivison)
                .HasForeignKey<CcAccessDivison>(d => d.Id)
                .HasConstraintName("fk_objects_cc_access_divison");
        });

        modelBuilder.Entity<CcAccessDivisons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_divisons");

            entity.ToTable("cc_access_divisons", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_1268498251");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<CcAccessElement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_element");

            entity.ToTable("cc_access_element", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessElement)
                .HasForeignKey<CcAccessElement>(d => d.Id)
                .HasConstraintName("fk_objects_cc_access_element");
        });

        modelBuilder.Entity<CcAccessElements>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_elements");

            entity.ToTable("cc_access_elements", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_1268498252");

            entity.HasIndex(e => e.Code, "idx_1414245037");

            entity.HasIndex(e => e.Role, "idx_1414245542");

            entity.HasIndex(e => e.Name, "idx_1966748341");

            entity.HasIndex(e => e.All, "idx_63485579");

            entity.HasIndex(e => e.Group, "idx_71692537");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.All).HasColumnName("all");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Group).HasColumnName("group");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Role).HasColumnName("role");
        });

        modelBuilder.Entity<CcAccessPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_period");

            entity.ToTable("cc_access_period", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessPeriod)
                .HasForeignKey<CcAccessPeriod>(d => d.Id)
                .HasConstraintName("fk_objects_cc_access_period");
        });

        modelBuilder.Entity<CcAccessPeriods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_periods");

            entity.ToTable("cc_access_periods", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_1268498253");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcAccessTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_template");

            entity.ToTable("cc_access_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAccessTemplate)
                .HasForeignKey<CcAccessTemplate>(d => d.Id)
                .HasConstraintName("fk_objects_cc_access_template");
        });

        modelBuilder.Entity<CcAccessTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_access_templates");

            entity.ToTable("cc_access_templates", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_1268498254");

            entity.HasIndex(e => e.Code, "idx_1414245039");

            entity.HasIndex(e => e.Name, "idx_1966748342");

            entity.HasIndex(e => e.Template, "idx_262645656");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Template).HasColumnName("template");
        });

        modelBuilder.Entity<CcAppCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_app_course");

            entity.ToTable("cc_app_course", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAppCourse)
                .HasForeignKey<CcAppCourse>(d => d.Id)
                .HasConstraintName("fk_objects_cc_app_course");
        });

        modelBuilder.Entity<CcAppCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_app_courses");

            entity.ToTable("cc_app_courses", "dbo");

            entity.HasIndex(e => e.EduObjName, "idx_278263171");

            entity.HasIndex(e => e.Eduapp, "idx_53421052");

            entity.HasIndex(e => e.ModificationDate, "idx_842795324");

            entity.HasIndex(e => e.EduObjId, "idx_879812268");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EduObjId).HasColumnName("edu_obj_id");
            entity.Property(e => e.EduObjName).HasColumnName("edu_obj_name");
            entity.Property(e => e.Eduapp).HasColumnName("eduapp");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcAttestation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_attestation");

            entity.ToTable("cc_attestation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcAttestation)
                .HasForeignKey<CcAttestation>(d => d.Id)
                .HasConstraintName("fk_objects_cc_attestation");
        });

        modelBuilder.Entity<CcAttestations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_attestations");

            entity.ToTable("cc_attestations", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_289459457");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Recommend).HasColumnName("recommend");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
        });

        modelBuilder.Entity<CcCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_collaborator");

            entity.ToTable("cc_collaborator", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCollaborator)
                .HasForeignKey<CcCollaborator>(d => d.Id)
                .HasConstraintName("fk_objects_cc_collaborator");
        });

        modelBuilder.Entity<CcCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_collaborators");

            entity.ToTable("cc_collaborators", "dbo");

            entity.HasIndex(e => e.ForeignPersonId, "idx_126974536");

            entity.HasIndex(e => e.CollaboratorId, "idx_643764191");

            entity.HasIndex(e => e.ModificationDate, "idx_965414163");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ForeignPersonId).HasColumnName("foreign_person_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcContragentImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_contragent_import");

            entity.ToTable("cc_contragent_import", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcContragentImport)
                .HasForeignKey<CcContragentImport>(d => d.Id)
                .HasConstraintName("fk_objects_cc_contragent_import");
        });

        modelBuilder.Entity<CcContragentImports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_contragent_imports");

            entity.ToTable("cc_contragent_imports", "dbo");

            entity.HasIndex(e => e.Success, "idx_386409698");

            entity.HasIndex(e => e.ModificationDate, "idx_728268652");

            entity.HasIndex(e => e.ImportDate, "idx_798615823");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ImportDate).HasColumnName("import_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Success).HasColumnName("success");
        });

        modelBuilder.Entity<CcCostHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_cost_history");

            entity.ToTable("cc_cost_history", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCostHistory)
                .HasForeignKey<CcCostHistory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_cost_history");
        });

        modelBuilder.Entity<CcCostHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_cost_historys");

            entity.ToTable("cc_cost_historys", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_241307804");

            entity.HasIndex(e => e.Cost, "idx_372471554");

            entity.HasIndex(e => e.BudgetPeriodId, "idx_457856267");

            entity.HasIndex(e => e.CourseId, "idx_961673263");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcCourseDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_course_date");

            entity.ToTable("cc_course_date", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCourseDate)
                .HasForeignKey<CcCourseDate>(d => d.Id)
                .HasConstraintName("fk_objects_cc_course_date");
        });

        modelBuilder.Entity<CcCourseDates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_course_dates");

            entity.ToTable("cc_course_dates", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_600990855");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Course).HasColumnName("course");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
        });

        modelBuilder.Entity<CcCourseOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_course_org");

            entity.ToTable("cc_course_org", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcCourseOrg)
                .HasForeignKey<CcCourseOrg>(d => d.Id)
                .HasConstraintName("fk_objects_cc_course_org");
        });

        modelBuilder.Entity<CcCourseOrgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_course_orgs");

            entity.ToTable("cc_course_orgs", "dbo");

            entity.HasIndex(e => e.EducationMethodId, "idx_349849417");

            entity.HasIndex(e => e.EducationOrgId, "idx_693138493");

            entity.HasIndex(e => e.ModificationDate, "idx_954591775");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcDirect>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_direct");

            entity.ToTable("cc_direct", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcDirect)
                .HasForeignKey<CcDirect>(d => d.Id)
                .HasConstraintName("fk_objects_cc_direct");
        });

        modelBuilder.Entity<CcDirects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_directs");

            entity.ToTable("cc_directs", "dbo");

            entity.HasIndex(e => e.Type, "idx_183913166");

            entity.HasIndex(e => e.Isform, "idx_192778641");

            entity.HasIndex(e => e.ModificationDate, "idx_320292641");

            entity.HasIndex(e => e.Method, "idx_369438186");

            entity.HasIndex(e => e.Class, "idx_39219205");

            entity.HasIndex(e => e.Object, "idx_57387292");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Class).HasColumnName("class");
            entity.Property(e => e.Isform).HasColumnName("isform");
            entity.Property(e => e.Method).HasColumnName("method");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Object).HasColumnName("object");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcDocField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_doc_field");

            entity.ToTable("cc_doc_field", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcDocField)
                .HasForeignKey<CcDocField>(d => d.Id)
                .HasConstraintName("fk_objects_cc_doc_field");
        });

        modelBuilder.Entity<CcDocFields>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_doc_fields");

            entity.ToTable("cc_doc_fields", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_730715503");

            entity.HasIndex(e => e.PrintForm, "idx_738602731");

            entity.HasIndex(e => e.Type, "idx_809047398");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Obj).HasColumnName("obj");
            entity.Property(e => e.PrintForm).HasColumnName("print_form");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcDocSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_doc_setting");

            entity.ToTable("cc_doc_setting", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcDocSetting)
                .HasForeignKey<CcDocSetting>(d => d.Id)
                .HasConstraintName("fk_objects_cc_doc_setting");
        });

        modelBuilder.Entity<CcDocSettings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_doc_settings");

            entity.ToTable("cc_doc_settings", "dbo");

            entity.HasIndex(e => e.PrintForm, "idx_253249403");

            entity.HasIndex(e => e.Name, "idx_682241323");

            entity.HasIndex(e => e.ModificationDate, "idx_85941122");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PrintForm).HasColumnName("print_form");
        });

        modelBuilder.Entity<CcEditLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edit_log");

            entity.ToTable("cc_edit_log", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEditLog)
                .HasForeignKey<CcEditLog>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edit_log");
        });

        modelBuilder.Entity<CcEditLogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edit_logs");

            entity.ToTable("cc_edit_logs", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_149714275");

            entity.HasIndex(e => e.ObjectId, "idx_225801210");

            entity.HasIndex(e => e.Date, "idx_395465571");

            entity.HasIndex(e => e.User, "idx_892601130");

            entity.HasIndex(e => e.Action, "idx_918991853");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NewData).HasColumnName("new_data");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.OldData).HasColumnName("old_data");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<CcEduField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_field");

            entity.ToTable("cc_edu_field", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduField)
                .HasForeignKey<CcEduField>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edu_field");
        });

        modelBuilder.Entity<CcEduFieldType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_field_type");

            entity.ToTable("cc_edu_field_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduFieldType)
                .HasForeignKey<CcEduFieldType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edu_field_type");
        });

        modelBuilder.Entity<CcEduFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_field_types");

            entity.ToTable("cc_edu_field_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_46267929");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduFields>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_fields");

            entity.ToTable("cc_edu_fields", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_980897439");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FieldType).HasColumnName("field_type");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduOrgCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_org_code");

            entity.ToTable("cc_edu_org_code", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduOrgCode)
                .HasForeignKey<CcEduOrgCode>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edu_org_code");
        });

        modelBuilder.Entity<CcEduOrgCodes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_org_codes");

            entity.ToTable("cc_edu_org_codes", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_144228466");

            entity.HasIndex(e => e.Kpp, "idx_416631043");

            entity.HasIndex(e => e.Inn, "idx_808679133");

            entity.HasIndex(e => e.EducationOrgId, "idx_85395140");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.Inn).HasColumnName("inn");
            entity.Property(e => e.Kpp).HasColumnName("kpp");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcEduTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_theme");

            entity.ToTable("cc_edu_theme", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduTheme)
                .HasForeignKey<CcEduTheme>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edu_theme");
        });

        modelBuilder.Entity<CcEduThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_themes");

            entity.ToTable("cc_edu_themes", "dbo");

            entity.HasIndex(e => e.DefaultRoom, "idx_369262685");

            entity.HasIndex(e => e.Duration, "idx_433481939");

            entity.HasIndex(e => e.Code, "idx_484997136");

            entity.HasIndex(e => e.DefaultForm, "idx_57258984");

            entity.HasIndex(e => e.Station, "idx_592821908");

            entity.HasIndex(e => e.ModificationDate, "idx_788370811");

            entity.HasIndex(e => e.Name, "idx_892876507");

            entity.HasIndex(e => e.DefaultLector, "idx_913868036");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.DefaultForm).HasColumnName("default_form");
            entity.Property(e => e.DefaultLector).HasColumnName("default_lector");
            entity.Property(e => e.DefaultRoom).HasColumnName("default_room");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_type");

            entity.ToTable("cc_edu_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduType)
                .HasForeignKey<CcEduType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edu_type");
        });

        modelBuilder.Entity<CcEduTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edu_types");

            entity.ToTable("cc_edu_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_168515127");

            entity.HasIndex(e => e.Code, "idx_176899620");

            entity.HasIndex(e => e.Name, "idx_249781039");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEduapp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_eduapp");

            entity.ToTable("cc_eduapp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEduapp)
                .HasForeignKey<CcEduapp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_eduapp");
        });

        modelBuilder.Entity<CcEduapps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_eduapps");

            entity.ToTable("cc_eduapps", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_33165348");

            entity.HasIndex(e => e.PlanPeriod, "idx_711771548");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Gpgr).HasColumnName("gpgr");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PlanPeriod).HasColumnName("plan_period");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcEducation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_education");

            entity.ToTable("cc_education", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEducation)
                .HasForeignKey<CcEducation>(d => d.Id)
                .HasConstraintName("fk_objects_cc_education");
        });

        modelBuilder.Entity<CcEducations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_educations");

            entity.ToTable("cc_educations", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_701272613");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DocNum).HasColumnName("doc_num");
            entity.Property(e => e.DocType).HasColumnName("doc_type");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Org).HasColumnName("org");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Qualification).HasColumnName("qualification");
            entity.Property(e => e.Specialty).HasColumnName("specialty");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcEdufieldApp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edufield_app");

            entity.ToTable("cc_edufield_app", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEdufieldApp)
                .HasForeignKey<CcEdufieldApp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_edufield_app");
        });

        modelBuilder.Entity<CcEdufieldApps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_edufield_apps");

            entity.ToTable("cc_edufield_apps", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_510667863");

            entity.HasIndex(e => e.EduFieldId, "idx_913339119");

            entity.HasIndex(e => e.EduappId, "idx_981948442");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EduFieldId).HasColumnName("edu_field_id");
            entity.Property(e => e.EduappId).HasColumnName("eduapp_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcEventPresence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_event_presence");

            entity.ToTable("cc_event_presence", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEventPresence)
                .HasForeignKey<CcEventPresence>(d => d.Id)
                .HasConstraintName("fk_objects_cc_event_presence");
        });

        modelBuilder.Entity<CcEventPresences>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_event_presences");

            entity.ToTable("cc_event_presences", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_605137530");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcEventTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_event_theme");

            entity.ToTable("cc_event_theme", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEventTheme)
                .HasForeignKey<CcEventTheme>(d => d.Id)
                .HasConstraintName("fk_objects_cc_event_theme");
        });

        modelBuilder.Entity<CcEventThemeCompl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_event_theme_compl");

            entity.ToTable("cc_event_theme_compl", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcEventThemeCompl)
                .HasForeignKey<CcEventThemeCompl>(d => d.Id)
                .HasConstraintName("fk_objects_cc_event_theme_compl");
        });

        modelBuilder.Entity<CcEventThemeCompls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_event_theme_compls");

            entity.ToTable("cc_event_theme_compls", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_663965795");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcEventThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_event_themes");

            entity.ToTable("cc_event_themes", "dbo");

            entity.HasIndex(e => e.ThemeTid, "idx_577602461");

            entity.HasIndex(e => e.ModificationDate, "idx_734056771");

            entity.HasIndex(e => e.EventId, "idx_941309195");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EventForm).HasColumnName("event_form");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.Tdate).HasColumnName("tdate");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
            entity.Property(e => e.ThemeTid).HasColumnName("theme_tid");
        });

        modelBuilder.Entity<CcFlow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_flow");

            entity.ToTable("cc_flow", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcFlow)
                .HasForeignKey<CcFlow>(d => d.Id)
                .HasConstraintName("fk_objects_cc_flow");
        });

        modelBuilder.Entity<CcFlows>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_flows");

            entity.ToTable("cc_flows", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_208732970");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddDate).HasColumnName("add_date");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.IsEnd).HasColumnName("is_end");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Session).HasColumnName("session");
        });

        modelBuilder.Entity<CcGroupCount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_group_count");

            entity.ToTable("cc_group_count", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcGroupCount)
                .HasForeignKey<CcGroupCount>(d => d.Id)
                .HasConstraintName("fk_objects_cc_group_count");
        });

        modelBuilder.Entity<CcGroupCounts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_group_counts");

            entity.ToTable("cc_group_counts", "dbo");

            entity.HasIndex(e => e.Station, "idx_36101614");

            entity.HasIndex(e => e.Count, "idx_687594230");

            entity.HasIndex(e => e.ModificationDate, "idx_950589388");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcIndProgramTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_ind_program_theme");

            entity.ToTable("cc_ind_program_theme", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcIndProgramTheme)
                .HasForeignKey<CcIndProgramTheme>(d => d.Id)
                .HasConstraintName("fk_objects_cc_ind_program_theme");
        });

        modelBuilder.Entity<CcIndProgramThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_ind_program_themes");

            entity.ToTable("cc_ind_program_themes", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_442469809");

            entity.HasIndex(e => e.IndProgramId, "idx_496506134");

            entity.HasIndex(e => e.ThemeId, "idx_554798289");

            entity.HasIndex(e => e.CourseId, "idx_625547032");

            entity.HasIndex(e => e.TaskId, "idx_644058768");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.IndProgramId).HasColumnName("ind_program_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
        });

        modelBuilder.Entity<CcInoutControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_inout_control");

            entity.ToTable("cc_inout_control", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcInoutControl)
                .HasForeignKey<CcInoutControl>(d => d.Id)
                .HasConstraintName("fk_objects_cc_inout_control");
        });

        modelBuilder.Entity<CcInoutControls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_inout_controls");

            entity.ToTable("cc_inout_controls", "dbo");

            entity.HasIndex(e => e.EventId, "idx_393246015");

            entity.HasIndex(e => e.ModificationDate, "idx_716839364");

            entity.HasIndex(e => e.PersonId, "idx_775647769");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.InNum).HasColumnName("in_num");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OutNum).HasColumnName("out_num");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcKcPerson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_kc_person");

            entity.ToTable("cc_kc_person", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcKcPerson)
                .HasForeignKey<CcKcPerson>(d => d.Id)
                .HasConstraintName("fk_objects_cc_kc_person");
        });

        modelBuilder.Entity<CcKcPersons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_kc_persons");

            entity.ToTable("cc_kc_persons", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_482468825");

            entity.HasIndex(e => e.PersonId, "idx_646430596");

            entity.HasIndex(e => e.EventId, "idx_6551115");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcKnowledgeClassifier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_knowledge_classifier");

            entity.ToTable("cc_knowledge_classifier", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcKnowledgeClassifier)
                .HasForeignKey<CcKnowledgeClassifier>(d => d.Id)
                .HasConstraintName("fk_objects_cc_knowledge_classifier");
        });

        modelBuilder.Entity<CcKnowledgeClassifiers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_knowledge_classifiers");

            entity.ToTable("cc_knowledge_classifiers", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_620032751");

            entity.HasIndex(e => e.ModificationDate, "idx_626625402");

            entity.HasIndex(e => e.KnowledgeClassifierId, "idx_694474230");

            entity.HasIndex(e => e.Code, "idx_789719923");

            entity.HasIndex(e => e.FileId, "idx_877290202");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.KnowledgeClassifierId).HasColumnName("knowledge_classifier_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcLocalStorage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_local_storage");

            entity.ToTable("cc_local_storage", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcLocalStorage)
                .HasForeignKey<CcLocalStorage>(d => d.Id)
                .HasConstraintName("fk_objects_cc_local_storage");
        });

        modelBuilder.Entity<CcLocalStorages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_local_storages");

            entity.ToTable("cc_local_storages", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_100637573");

            entity.HasIndex(e => e.Person, "idx_535725258");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Person).HasColumnName("person");
        });

        modelBuilder.Entity<CcLogExport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_log_export");

            entity.ToTable("cc_log_export", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcLogExport)
                .HasForeignKey<CcLogExport>(d => d.Id)
                .HasConstraintName("fk_objects_cc_log_export");
        });

        modelBuilder.Entity<CcLogExports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_log_exports");

            entity.ToTable("cc_log_exports", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_550005449");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Num).HasColumnName("num");
        });

        modelBuilder.Entity<CcLogImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_log_import");

            entity.ToTable("cc_log_import", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcLogImport)
                .HasForeignKey<CcLogImport>(d => d.Id)
                .HasConstraintName("fk_objects_cc_log_import");
        });

        modelBuilder.Entity<CcLogImports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_log_imports");

            entity.ToTable("cc_log_imports", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_543996758");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Num).HasColumnName("num");
        });

        modelBuilder.Entity<CcOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_org");

            entity.ToTable("cc_org", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcOrg)
                .HasForeignKey<CcOrg>(d => d.Id)
                .HasConstraintName("fk_objects_cc_org");
        });

        modelBuilder.Entity<CcOrgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_orgs");

            entity.ToTable("cc_orgs", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_382333326");

            entity.HasIndex(e => e.OrgId, "idx_673524576");

            entity.HasIndex(e => e.StationId, "idx_877751593");

            entity.HasIndex(e => e.Inn, "idx_958244191");

            entity.HasIndex(e => e.Kpp, "idx_962510998");

            entity.HasIndex(e => e.OrgType, "idx_992775200");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Inn).HasColumnName("inn");
            entity.Property(e => e.Kpp).HasColumnName("kpp");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgType).HasColumnName("org_type");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcOssImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_oss_import");

            entity.ToTable("cc_oss_import", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcOssImport)
                .HasForeignKey<CcOssImport>(d => d.Id)
                .HasConstraintName("fk_objects_cc_oss_import");
        });

        modelBuilder.Entity<CcOssImports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_oss_imports");

            entity.ToTable("cc_oss_imports", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_687604771");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Part).HasColumnName("part");
            entity.Property(e => e.PartsNum).HasColumnName("parts_num");
            entity.Property(e => e.Session).HasColumnName("session");
        });

        modelBuilder.Entity<CcPeriodType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_period_type");

            entity.ToTable("cc_period_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPeriodType)
                .HasForeignKey<CcPeriodType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_period_type");
        });

        modelBuilder.Entity<CcPeriodTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_period_types");

            entity.ToTable("cc_period_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_704337794");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ChangeCode).HasColumnName("change_code");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.SpAccess).HasColumnName("sp_access");
            entity.Property(e => e.UnplanAccess).HasColumnName("unplan_access");
        });

        modelBuilder.Entity<CcPfoAssessmentCriteria>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_assessment_criteria");

            entity.ToTable("cc_pfo_assessment_criteria", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoAssessmentCriteria)
                .HasForeignKey<CcPfoAssessmentCriteria>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_assessment_criteria");
        });

        modelBuilder.Entity<CcPfoAssessmentCriterias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_assessment_criterias");

            entity.ToTable("cc_pfo_assessment_criterias", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_424342198");

            entity.HasIndex(e => e.Code, "idx_512599173");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_div");

            entity.ToTable("cc_pfo_div", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoDiv)
                .HasForeignKey<CcPfoDiv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_div");
        });

        modelBuilder.Entity<CcPfoDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_divs");

            entity.ToTable("cc_pfo_divs", "dbo");

            entity.HasIndex(e => e.StationId, "idx_257027777");

            entity.HasIndex(e => e.HeadId, "idx_409952942");

            entity.HasIndex(e => e.DivId, "idx_898283934");

            entity.HasIndex(e => e.ModificationDate, "idx_903218658");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.HeadId).HasColumnName("head_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoGrafic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_grafic");

            entity.ToTable("cc_pfo_grafic", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoGrafic)
                .HasForeignKey<CcPfoGrafic>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_grafic");
        });

        modelBuilder.Entity<CcPfoGrafics>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_grafics");

            entity.ToTable("cc_pfo_grafics", "dbo");

            entity.HasIndex(e => e.StartDate, "idx_129914950");

            entity.HasIndex(e => e.StationId, "idx_241323243");

            entity.HasIndex(e => e.PositionGroupId, "idx_400928007");

            entity.HasIndex(e => e.OrgId, "idx_406279141");

            entity.HasIndex(e => e.Name, "idx_434139766");

            entity.HasIndex(e => e.Code, "idx_546357147");

            entity.HasIndex(e => e.IsForeign, "idx_628561331");

            entity.HasIndex(e => e.ModificationDate, "idx_826130342");

            entity.HasIndex(e => e.BpId, "idx_856010419");

            entity.HasIndex(e => e.Status, "idx_928962628");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.IsForeign).HasColumnName("is_foreign");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PositionGroupId).HasColumnName("position_group_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcPfoMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_method");

            entity.ToTable("cc_pfo_method", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoMethod)
                .HasForeignKey<CcPfoMethod>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_method");
        });

        modelBuilder.Entity<CcPfoMethodResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_method_result");

            entity.ToTable("cc_pfo_method_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoMethodResult)
                .HasForeignKey<CcPfoMethodResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_method_result");
        });

        modelBuilder.Entity<CcPfoMethodResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_method_results");

            entity.ToTable("cc_pfo_method_results", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_265618250");

            entity.HasIndex(e => e.TestDate, "idx_299215879");

            entity.HasIndex(e => e.ActiveLearningId, "idx_426611253");

            entity.HasIndex(e => e.MethodId, "idx_595994897");

            entity.HasIndex(e => e.AddManually, "idx_713709798");

            entity.HasIndex(e => e.PersonId, "idx_953567267");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AddManually).HasColumnName("add_manually");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.TestDate).HasColumnName("test_date");
        });

        modelBuilder.Entity<CcPfoMethodScale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_method_scale");

            entity.ToTable("cc_pfo_method_scale", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoMethodScale)
                .HasForeignKey<CcPfoMethodScale>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_method_scale");
        });

        modelBuilder.Entity<CcPfoMethodScales>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_method_scales");

            entity.ToTable("cc_pfo_method_scales", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_13747610");

            entity.HasIndex(e => e.MethodId, "idx_709110494");

            entity.HasIndex(e => e.Code, "idx_902954298");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.MethodId).HasColumnName("method_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ScaleOrder).HasColumnName("scale_order");
        });

        modelBuilder.Entity<CcPfoMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_methods");

            entity.ToTable("cc_pfo_methods", "dbo");

            entity.HasIndex(e => e.CourseId, "idx_504511649");

            entity.HasIndex(e => e.ModificationDate, "idx_63412594");

            entity.HasIndex(e => e.Name, "idx_89767519");

            entity.HasIndex(e => e.Code, "idx_964938411");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoPassword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_password");

            entity.ToTable("cc_pfo_password", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPassword)
                .HasForeignKey<CcPfoPassword>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_password");
        });

        modelBuilder.Entity<CcPfoPasswords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_passwords");

            entity.ToTable("cc_pfo_passwords", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_782753206");

            entity.HasIndex(e => e.PersonId, "idx_816572315");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PassDate).HasColumnName("pass_date");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcPfoPoll>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_poll");

            entity.ToTable("cc_pfo_poll", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPoll)
                .HasForeignKey<CcPfoPoll>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_poll");
        });

        modelBuilder.Entity<CcPfoPollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_poll_procedure");

            entity.ToTable("cc_pfo_poll_procedure", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPollProcedure)
                .HasForeignKey<CcPfoPollProcedure>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_poll_procedure");
        });

        modelBuilder.Entity<CcPfoPollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_poll_procedures");

            entity.ToTable("cc_pfo_poll_procedures", "dbo");

            entity.HasIndex(e => e.PfoPollId, "idx_384206851");

            entity.HasIndex(e => e.FinishDate, "idx_412928530");

            entity.HasIndex(e => e.State, "idx_497538256");

            entity.HasIndex(e => e.StartDate, "idx_599313082");

            entity.HasIndex(e => e.BpId, "idx_622382226");

            entity.HasIndex(e => e.ModificationDate, "idx_712447379");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PfoPollId).HasColumnName("pfo_poll_id");
            entity.Property(e => e.Questions).HasColumnName("questions");
            entity.Property(e => e.QuestionsJson).HasColumnName("questions_json");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.State).HasColumnName("state");
        });

        modelBuilder.Entity<CcPfoPollResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_poll_result");

            entity.ToTable("cc_pfo_poll_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPollResult)
                .HasForeignKey<CcPfoPollResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_poll_result");
        });

        modelBuilder.Entity<CcPfoPollResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_poll_results");

            entity.ToTable("cc_pfo_poll_results", "dbo");

            entity.HasIndex(e => e.ResultDate, "idx_169663889");

            entity.HasIndex(e => e.PfoPollProcedureId, "idx_389703110");

            entity.HasIndex(e => e.ModificationDate, "idx_913337071");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PfoPollProcedureId).HasColumnName("pfo_poll_procedure_id");
            entity.Property(e => e.ResultDate).HasColumnName("result_date");
            entity.Property(e => e.ResultItems).HasColumnName("result_items");
        });

        modelBuilder.Entity<CcPfoPolls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_polls");

            entity.ToTable("cc_pfo_polls", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_715117395");

            entity.HasIndex(e => e.Name, "idx_795345856");

            entity.HasIndex(e => e.FormLink, "idx_842879100");

            entity.HasIndex(e => e.Code, "idx_886029403");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FormLink).HasColumnName("form_link");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoPositionGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_position_group");

            entity.ToTable("cc_pfo_position_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoPositionGroup)
                .HasForeignKey<CcPfoPositionGroup>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_position_group");
        });

        modelBuilder.Entity<CcPfoPositionGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_position_groups");

            entity.ToTable("cc_pfo_position_groups", "dbo");

            entity.HasIndex(e => e.Code, "idx_43648734");

            entity.HasIndex(e => e.ModificationDate, "idx_597713386");

            entity.HasIndex(e => e.StationId, "idx_867426351");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoQualCourseOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_qual_course_order");

            entity.ToTable("cc_pfo_qual_course_order", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoQualCourseOrder)
                .HasForeignKey<CcPfoQualCourseOrder>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_qual_course_order");
        });

        modelBuilder.Entity<CcPfoQualCourseOrders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_qual_course_orders");

            entity.ToTable("cc_pfo_qual_course_orders", "dbo");

            entity.HasIndex(e => e.QualificationId, "idx_164568417");

            entity.HasIndex(e => e.ModificationDate, "idx_366032961");

            entity.HasIndex(e => e.CourseOrder, "idx_528577576");

            entity.HasIndex(e => e.CourseId, "idx_799707575");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseOrder).HasColumnName("course_order");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
        });

        modelBuilder.Entity<CcPfoQualificationCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_qualification_course");

            entity.ToTable("cc_pfo_qualification_course", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoQualificationCourse)
                .HasForeignKey<CcPfoQualificationCourse>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_qualification_course");
        });

        modelBuilder.Entity<CcPfoQualificationCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_qualification_courses");

            entity.ToTable("cc_pfo_qualification_courses", "dbo");

            entity.HasIndex(e => e.QualificationId, "idx_346436877");

            entity.HasIndex(e => e.StationId, "idx_51747907");

            entity.HasIndex(e => e.ModificationDate, "idx_632503282");

            entity.HasIndex(e => e.CourseId, "idx_730871733");

            entity.HasIndex(e => e.Code, "idx_806418822");

            entity.HasIndex(e => e.CourseOrder, "idx_825736854");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseOrder).HasColumnName("course_order");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoQualificationPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_qualification_position");

            entity.ToTable("cc_pfo_qualification_position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoQualificationPosition)
                .HasForeignKey<CcPfoQualificationPosition>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_qualification_position");
        });

        modelBuilder.Entity<CcPfoQualificationPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_qualification_positions");

            entity.ToTable("cc_pfo_qualification_positions", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_16554468");

            entity.HasIndex(e => e.QualificationId, "idx_355954747");

            entity.HasIndex(e => e.DivisionId, "idx_356657467");

            entity.HasIndex(e => e.PositionId, "idx_406967308");

            entity.HasIndex(e => e.StationId, "idx_677366751");

            entity.HasIndex(e => e.PositionName, "idx_891077343");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DivisionId).HasColumnName("division_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName).HasColumnName("position_name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPfoRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request");

            entity.ToTable("cc_pfo_request", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequest)
                .HasForeignKey<CcPfoRequest>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_request");
        });

        modelBuilder.Entity<CcPfoRequestMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request_method");

            entity.ToTable("cc_pfo_request_method", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequestMethod)
                .HasForeignKey<CcPfoRequestMethod>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_request_method");
        });

        modelBuilder.Entity<CcPfoRequestMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request_methods");

            entity.ToTable("cc_pfo_request_methods", "dbo");

            entity.HasIndex(e => e.Code, "idx_207597830");

            entity.HasIndex(e => e.FinishReason, "idx_429325418");

            entity.HasIndex(e => e.AddManually, "idx_542420845");

            entity.HasIndex(e => e.ModificationDate, "idx_599589193");

            entity.HasIndex(e => e.AssessmentId, "idx_749043584");

            entity.HasIndex(e => e.AlwaysShowToPerson, "idx_766842615");

            entity.HasIndex(e => e.SaveOnClose, "idx_850194905");

            entity.HasIndex(e => e.PfoRequestId, "idx_88420065");

            entity.HasIndex(e => e.CourseId, "idx_908150480");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddManually).HasColumnName("add_manually");
            entity.Property(e => e.AlwaysShowToPerson).HasColumnName("always_show_to_person");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.FinishReason).HasColumnName("finish_reason");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NeedAssign).HasColumnName("need_assign");
            entity.Property(e => e.PfoRequestId).HasColumnName("pfo_request_id");
            entity.Property(e => e.SaveOnClose).HasColumnName("save_on_close");
        });

        modelBuilder.Entity<CcPfoRequestToLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request_to_learning");

            entity.ToTable("cc_pfo_request_to_learning", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequestToLearning)
                .HasForeignKey<CcPfoRequestToLearning>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_request_to_learning");
        });

        modelBuilder.Entity<CcPfoRequestToLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request_to_learnings");

            entity.ToTable("cc_pfo_request_to_learnings", "dbo");

            entity.HasIndex(e => e.ActiveLearningId, "idx_416336187");

            entity.HasIndex(e => e.PfoMethodId, "idx_526929937");

            entity.HasIndex(e => e.PfoRequestId, "idx_530490029");

            entity.HasIndex(e => e.AssessmentId, "idx_810326788");

            entity.HasIndex(e => e.ModificationDate, "idx_899611623");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PfoMethodId).HasColumnName("pfo_method_id");
            entity.Property(e => e.PfoRequestId).HasColumnName("pfo_request_id");
        });

        modelBuilder.Entity<CcPfoRequestTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request_transfer");

            entity.ToTable("cc_pfo_request_transfer", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoRequestTransfer)
                .HasForeignKey<CcPfoRequestTransfer>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_request_transfer");
        });

        modelBuilder.Entity<CcPfoRequestTransfers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_request_transfers");

            entity.ToTable("cc_pfo_request_transfers", "dbo");

            entity.HasIndex(e => e.DateTo, "idx_619698727");

            entity.HasIndex(e => e.DateFrom, "idx_630486473");

            entity.HasIndex(e => e.RequestId, "idx_643364501");

            entity.HasIndex(e => e.ModificationDate, "idx_677898485");

            entity.HasIndex(e => e.TransferDate, "idx_874806365");

            entity.HasIndex(e => e.NumDoc, "idx_959172839");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NumDoc).HasColumnName("num_doc");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.TransferDate).HasColumnName("transfer_date");
        });

        modelBuilder.Entity<CcPfoRequests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_requests");

            entity.ToTable("cc_pfo_requests", "dbo");

            entity.HasIndex(e => e.PlanStartDate, "idx_11012964");

            entity.HasIndex(e => e.RejectReason, "idx_116500771");

            entity.HasIndex(e => e.ResultGroupId, "idx_261846140");

            entity.HasIndex(e => e.IsAssigned, "idx_447330261");

            entity.HasIndex(e => e.PlanFinishDate, "idx_450948585");

            entity.HasIndex(e => e.PersonId, "idx_475082550");

            entity.HasIndex(e => e.AddManualy, "idx_529478367");

            entity.HasIndex(e => e.ModificationDate, "idx_570173885");

            entity.HasIndex(e => e.CommonPositionId, "idx_693074978");

            entity.HasIndex(e => e.AssessmentCriteriaId, "idx_820383781");

            entity.HasIndex(e => e.Month, "idx_834270492");

            entity.HasIndex(e => e.FactDate, "idx_867316227");

            entity.HasIndex(e => e.BpId, "idx_886430225");

            entity.HasIndex(e => e.GraficId, "idx_992130891");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddManualy).HasColumnName("add_manualy");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentCriteriaId).HasColumnName("assessment_criteria_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.CommonPositionId).HasColumnName("common_position_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.GraficId).HasColumnName("grafic_id");
            entity.Property(e => e.IsAssigned).HasColumnName("is_assigned");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanFinishDate).HasColumnName("plan_finish_date");
            entity.Property(e => e.PlanStartDate).HasColumnName("plan_start_date");
            entity.Property(e => e.RejectReason).HasColumnName("reject_reason");
            entity.Property(e => e.ResultGroupId).HasColumnName("result_group_id");
        });

        modelBuilder.Entity<CcPfoResultGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_result_group");

            entity.ToTable("cc_pfo_result_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoResultGroup)
                .HasForeignKey<CcPfoResultGroup>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_result_group");
        });

        modelBuilder.Entity<CcPfoResultGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_result_groups");

            entity.ToTable("cc_pfo_result_groups", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_264116335");

            entity.HasIndex(e => e.Name, "idx_601607106");

            entity.HasIndex(e => e.Code, "idx_963532836");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcPfoScaleResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_scale_result");

            entity.ToTable("cc_pfo_scale_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPfoScaleResult)
                .HasForeignKey<CcPfoScaleResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pfo_scale_result");
        });

        modelBuilder.Entity<CcPfoScaleResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pfo_scale_results");

            entity.ToTable("cc_pfo_scale_results", "dbo");

            entity.HasIndex(e => e.Value, "idx_176457995");

            entity.HasIndex(e => e.ModificationDate, "idx_401479525");

            entity.HasIndex(e => e.ResultId, "idx_653536617");

            entity.HasIndex(e => e.ScaleId, "idx_747078954");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.ScaleId).HasColumnName("scale_id");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<CcPmtoNppBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_npp_block");

            entity.ToTable("cc_pmto_npp_block", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoNppBlock)
                .HasForeignKey<CcPmtoNppBlock>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_npp_block");
        });

        modelBuilder.Entity<CcPmtoNppBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_npp_blocks");

            entity.ToTable("cc_pmto_npp_blocks", "dbo");

            entity.HasIndex(e => e.Station, "idx_514737858");

            entity.HasIndex(e => e.ModificationDate, "idx_699321285");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPmtoObservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation");

            entity.ToTable("cc_pmto_observation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservation)
                .HasForeignKey<CcPmtoObservation>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_observation");
        });

        modelBuilder.Entity<CcPmtoObservationDirector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_director");

            entity.ToTable("cc_pmto_observation_director", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationDirector)
                .HasForeignKey<CcPmtoObservationDirector>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_observation_director");
        });

        modelBuilder.Entity<CcPmtoObservationDirectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_directors");

            entity.ToTable("cc_pmto_observation_directors", "dbo");

            entity.HasIndex(e => e.Observation, "idx_115407240");

            entity.HasIndex(e => e.ModificationDate, "idx_525566305");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Collaborator).HasColumnName("collaborator");
            entity.Property(e => e.Fullname).HasColumnName("fullname");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Position).HasColumnName("position");
        });

        modelBuilder.Entity<CcPmtoObservationEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_employee");

            entity.ToTable("cc_pmto_observation_employee", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationEmployee)
                .HasForeignKey<CcPmtoObservationEmployee>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_observation_employee");
        });

        modelBuilder.Entity<CcPmtoObservationEmployees>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_employees");

            entity.ToTable("cc_pmto_observation_employees", "dbo");

            entity.HasIndex(e => e.Observation, "idx_174404930");

            entity.HasIndex(e => e.ModificationDate, "idx_663180374");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Collaborator).HasColumnName("collaborator");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FlLeader).HasColumnName("fl_leader");
            entity.Property(e => e.Fullname).HasColumnName("fullname");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.PositionFuture).HasColumnName("position_future");
            entity.Property(e => e.PositionShort).HasColumnName("position_short");
            entity.Property(e => e.SubdivisionCeh).HasColumnName("subdivision_ceh");
        });

        modelBuilder.Entity<CcPmtoObservationResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_result");

            entity.ToTable("cc_pmto_observation_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationResult)
                .HasForeignKey<CcPmtoObservationResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_observation_result");
        });

        modelBuilder.Entity<CcPmtoObservationResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_results");

            entity.ToTable("cc_pmto_observation_results", "dbo");

            entity.HasIndex(e => e.Observation, "idx_53994982");

            entity.HasIndex(e => e.ModificationDate, "idx_621793997");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Result4).HasColumnName("result4");
            entity.Property(e => e.Result5).HasColumnName("result5");
            entity.Property(e => e.Result6).HasColumnName("result6");
            entity.Property(e => e.Result7).HasColumnName("result7");
            entity.Property(e => e.Result8).HasColumnName("result8");
        });

        modelBuilder.Entity<CcPmtoObservationSpecialist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_specialist");

            entity.ToTable("cc_pmto_observation_specialist", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoObservationSpecialist)
                .HasForeignKey<CcPmtoObservationSpecialist>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_observation_specialist");
        });

        modelBuilder.Entity<CcPmtoObservationSpecialists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observation_specialists");

            entity.ToTable("cc_pmto_observation_specialists", "dbo");

            entity.HasIndex(e => e.Observation, "idx_484689305");

            entity.HasIndex(e => e.ModificationDate, "idx_906037861");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Collaborator).HasColumnName("collaborator");
            entity.Property(e => e.Fullname).HasColumnName("fullname");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Observation).HasColumnName("observation");
            entity.Property(e => e.Position).HasColumnName("position");
        });

        modelBuilder.Entity<CcPmtoObservations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_observations");

            entity.ToTable("cc_pmto_observations", "dbo");

            entity.HasIndex(e => e.Station, "idx_432701219");

            entity.HasIndex(e => e.ModificationDate, "idx_971932695");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Block).HasColumnName("block");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModifedDate).HasColumnName("modifed_date");
            entity.Property(e => e.ModifedId).HasColumnName("modifed_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Shift).HasColumnName("shift");
            entity.Property(e => e.Station).HasColumnName("station");
            entity.Property(e => e.Theme).HasColumnName("theme");
            entity.Property(e => e.TypePlan).HasColumnName("type_plan");
            entity.Property(e => e.TypePmt).HasColumnName("type_pmt");
        });

        modelBuilder.Entity<CcPmtoPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_position");

            entity.ToTable("cc_pmto_position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoPosition)
                .HasForeignKey<CcPmtoPosition>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_position");
        });

        modelBuilder.Entity<CcPmtoPositionShort>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_position_short");

            entity.ToTable("cc_pmto_position_short", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoPositionShort)
                .HasForeignKey<CcPmtoPositionShort>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_position_short");
        });

        modelBuilder.Entity<CcPmtoPositionShorts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_position_shorts");

            entity.ToTable("cc_pmto_position_shorts", "dbo");

            entity.HasIndex(e => e.Station, "idx_497774803");

            entity.HasIndex(e => e.ModificationDate, "idx_640395666");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlLeader).HasColumnName("fl_leader");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPmtoPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_positions");

            entity.ToTable("cc_pmto_positions", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_230262625");

            entity.HasIndex(e => e.Station, "idx_801198307");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPmtoShift>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_shift");

            entity.ToTable("cc_pmto_shift", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPmtoShift)
                .HasForeignKey<CcPmtoShift>(d => d.Id)
                .HasConstraintName("fk_objects_cc_pmto_shift");
        });

        modelBuilder.Entity<CcPmtoShifts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_pmto_shifts");

            entity.ToTable("cc_pmto_shifts", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_599943093");

            entity.HasIndex(e => e.Station, "idx_659852860");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcPollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_poll_procedure");

            entity.ToTable("cc_poll_procedure", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPollProcedure)
                .HasForeignKey<CcPollProcedure>(d => d.Id)
                .HasConstraintName("fk_objects_cc_poll_procedure");
        });

        modelBuilder.Entity<CcPollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_poll_procedures");

            entity.ToTable("cc_poll_procedures", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_191184664");

            entity.HasIndex(e => e.StationId, "idx_255263786");

            entity.HasIndex(e => e.BpId, "idx_639469453");

            entity.HasIndex(e => e.PollProcedureId, "idx_655443271");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollProcedureId).HasColumnName("poll_procedure_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcPrevWork>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_prev_work");

            entity.ToTable("cc_prev_work", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcPrevWork)
                .HasForeignKey<CcPrevWork>(d => d.Id)
                .HasConstraintName("fk_objects_cc_prev_work");
        });

        modelBuilder.Entity<CcPrevWorks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_prev_works");

            entity.ToTable("cc_prev_works", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_150200884");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.Employer).HasColumnName("employer");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
        });

        modelBuilder.Entity<CcProgramDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_program_date");

            entity.ToTable("cc_program_date", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcProgramDate)
                .HasForeignKey<CcProgramDate>(d => d.Id)
                .HasConstraintName("fk_objects_cc_program_date");
        });

        modelBuilder.Entity<CcProgramDates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_program_dates");

            entity.ToTable("cc_program_dates", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_605518577");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Program).HasColumnName("program");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
        });

        modelBuilder.Entity<CcQualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_qualification");

            entity.ToTable("cc_qualification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcQualification)
                .HasForeignKey<CcQualification>(d => d.Id)
                .HasConstraintName("fk_objects_cc_qualification");
        });

        modelBuilder.Entity<CcQualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_qualifications");

            entity.ToTable("cc_qualifications", "dbo");

            entity.HasIndex(e => e.PositionGroupId, "idx_183435747");

            entity.HasIndex(e => e.AssessmentCriteriaId, "idx_455158866");

            entity.HasIndex(e => e.QualificationId, "idx_520642642");

            entity.HasIndex(e => e.StationId, "idx_764728362");

            entity.HasIndex(e => e.ModificationDate, "idx_975306997");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentCriteriaId).HasColumnName("assessment_criteria_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PositionGroupId).HasColumnName("position_group_id");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcQuiz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_quiz");

            entity.ToTable("cc_quiz", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcQuiz)
                .HasForeignKey<CcQuiz>(d => d.Id)
                .HasConstraintName("fk_objects_cc_quiz");
        });

        modelBuilder.Entity<CcQuizs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_quizs");

            entity.ToTable("cc_quizs", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_363519510");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CheckDate).HasColumnName("check_date");
            entity.Property(e => e.CheckPeriod).HasColumnName("check_period");
            entity.Property(e => e.ElectroGroup).HasColumnName("electro_group");
            entity.Property(e => e.Exam).HasColumnName("exam");
            entity.Property(e => e.ExamType).HasColumnName("exam_type");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NextDate).HasColumnName("next_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.PositionType).HasColumnName("position_type");
            entity.Property(e => e.Protocol).HasColumnName("protocol");
            entity.Property(e => e.RespGroup).HasColumnName("resp_group");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<CcRejectReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_reject_reason");

            entity.ToTable("cc_reject_reason", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRejectReason)
                .HasForeignKey<CcRejectReason>(d => d.Id)
                .HasConstraintName("fk_objects_cc_reject_reason");
        });

        modelBuilder.Entity<CcRejectReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_reject_reasons");

            entity.ToTable("cc_reject_reasons", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_129006291");

            entity.HasIndex(e => e.Close, "idx_539072547");

            entity.HasIndex(e => e.Plan, "idx_619782480");

            entity.HasIndex(e => e.Code, "idx_755726267");

            entity.HasIndex(e => e.Name, "idx_887175800");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Close).HasColumnName("close");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Plan).HasColumnName("plan");
        });

        modelBuilder.Entity<CcReqDateHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_req_date_history");

            entity.ToTable("cc_req_date_history", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcReqDateHistory)
                .HasForeignKey<CcReqDateHistory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_req_date_history");
        });

        modelBuilder.Entity<CcReqDateHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_req_date_historys");

            entity.ToTable("cc_req_date_historys", "dbo");

            entity.HasIndex(e => e.RequestId, "idx_802874200");

            entity.HasIndex(e => e.ModificationDate, "idx_808775052");

            entity.HasIndex(e => e.UpdateDate, "idx_950818278");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UpdateDate).HasColumnName("update_date");
        });

        modelBuilder.Entity<CcRequestReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_request_reason");

            entity.ToTable("cc_request_reason", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRequestReason)
                .HasForeignKey<CcRequestReason>(d => d.Id)
                .HasConstraintName("fk_objects_cc_request_reason");
        });

        modelBuilder.Entity<CcRequestReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_request_reasons");

            entity.ToTable("cc_request_reasons", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_118342174");

            entity.HasIndex(e => e.Name, "idx_457385125");

            entity.HasIndex(e => e.Code, "idx_936255840");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcResultHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_result_history");

            entity.ToTable("cc_result_history", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcResultHistory)
                .HasForeignKey<CcResultHistory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_result_history");
        });

        modelBuilder.Entity<CcResultHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_result_historys");

            entity.ToTable("cc_result_historys", "dbo");

            entity.HasIndex(e => e.AppNum, "idx_416746465");

            entity.HasIndex(e => e.PersonId, "idx_418320887");

            entity.HasIndex(e => e.FinishDate, "idx_433411771");

            entity.HasIndex(e => e.ModificationDate, "idx_434424037");

            entity.HasIndex(e => e.EduOrgId, "idx_58632491");

            entity.HasIndex(e => e.EduType, "idx_587598681");

            entity.HasIndex(e => e.StartDate, "idx_599401628");

            entity.HasIndex(e => e.CourseName, "idx_719705787");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AppNum).HasColumnName("app_num");
            entity.Property(e => e.CourseName).HasColumnName("course_name");
            entity.Property(e => e.EduOrgId).HasColumnName("edu_org_id");
            entity.Property(e => e.EduType).HasColumnName("edu_type");
            entity.Property(e => e.EventForm).HasColumnName("event_form");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Presence).HasColumnName("presence");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.ValidationDate).HasColumnName("validation_date");
            entity.Property(e => e.ValidationProtocol).HasColumnName("validation_protocol");
        });

        modelBuilder.Entity<CcRtn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn");

            entity.ToTable("cc_rtn", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtn)
                .HasForeignKey<CcRtn>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn");
        });

        modelBuilder.Entity<CcRtnActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_activity");

            entity.ToTable("cc_rtn_activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnActivity)
                .HasForeignKey<CcRtnActivity>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_activity");
        });

        modelBuilder.Entity<CcRtnActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_activitys");

            entity.ToTable("cc_rtn_activitys", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_457393113");

            entity.HasIndex(e => e.Place, "idx_822848057");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Place).HasColumnName("place");
        });

        modelBuilder.Entity<CcRtnApplication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_application");

            entity.ToTable("cc_rtn_application", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnApplication)
                .HasForeignKey<CcRtnApplication>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_application");
        });

        modelBuilder.Entity<CcRtnApplicationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_application_type");

            entity.ToTable("cc_rtn_application_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnApplicationType)
                .HasForeignKey<CcRtnApplicationType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_application_type");
        });

        modelBuilder.Entity<CcRtnApplicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_application_types");

            entity.ToTable("cc_rtn_application_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_23717359");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnApplications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_applications");

            entity.ToTable("cc_rtn_applications", "dbo");

            entity.HasIndex(e => e.ApplicationTypeId, "idx_291404329");

            entity.HasIndex(e => e.PostLicensedId, "idx_420864713");

            entity.HasIndex(e => e.ActivityId, "idx_509743885");

            entity.HasIndex(e => e.CollaboratorId, "idx_685389837");

            entity.HasIndex(e => e.LicenseId, "idx_815588495");

            entity.HasIndex(e => e.ModificationDate, "idx_824583526");

            entity.HasIndex(e => e.FlToConcern, "idx_982599518");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ApplicationTypeId).HasColumnName("application_type_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.FactDateRtn).HasColumnName("fact_date_rtn");
            entity.Property(e => e.FlNotApply).HasColumnName("fl_not_apply");
            entity.Property(e => e.FlToConcern).HasColumnName("fl_to_concern");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnControlKind>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_control_kind");

            entity.ToTable("cc_rtn_control_kind", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnControlKind)
                .HasForeignKey<CcRtnControlKind>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_control_kind");
        });

        modelBuilder.Entity<CcRtnControlKinds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_control_kinds");

            entity.ToTable("cc_rtn_control_kinds", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_186924549");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnControlResultType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_control_result_type");

            entity.ToTable("cc_rtn_control_result_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnControlResultType)
                .HasForeignKey<CcRtnControlResultType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_control_result_type");
        });

        modelBuilder.Entity<CcRtnControlResultTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_control_result_types");

            entity.ToTable("cc_rtn_control_result_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_36687212");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Module).HasColumnName("module");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnControlType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_control_type");

            entity.ToTable("cc_rtn_control_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnControlType)
                .HasForeignKey<CcRtnControlType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_control_type");
        });

        modelBuilder.Entity<CcRtnControlTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_control_types");

            entity.ToTable("cc_rtn_control_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_69085981");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.FlAttestation).HasColumnName("fl_attestation");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnDuty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_duty");

            entity.ToTable("cc_rtn_duty", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnDuty)
                .HasForeignKey<CcRtnDuty>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_duty");
        });

        modelBuilder.Entity<CcRtnDutys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_dutys");

            entity.ToTable("cc_rtn_dutys", "dbo");

            entity.HasIndex(e => e.PostLicensedId, "idx_669978579");

            entity.HasIndex(e => e.CollaboratorId, "idx_788874636");

            entity.HasIndex(e => e.ModificationDate, "idx_806071142");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate).HasColumnName("begin_date");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FlHeldPost).HasColumnName("fl_held_post");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderProps).HasColumnName("order_props");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnExamMedical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_exam_medical");

            entity.ToTable("cc_rtn_exam_medical", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnExamMedical)
                .HasForeignKey<CcRtnExamMedical>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_exam_medical");
        });

        modelBuilder.Entity<CcRtnExamMedicals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_exam_medicals");

            entity.ToTable("cc_rtn_exam_medicals", "dbo");

            entity.HasIndex(e => e.PlanDate, "idx_484632267");

            entity.HasIndex(e => e.ModificationDate, "idx_565184392");

            entity.HasIndex(e => e.CollaboratorId, "idx_681657137");

            entity.HasIndex(e => e.FactDate, "idx_741210271");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
        });

        modelBuilder.Entity<CcRtnExamPsychical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_exam_psychical");

            entity.ToTable("cc_rtn_exam_psychical", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnExamPsychical)
                .HasForeignKey<CcRtnExamPsychical>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_exam_psychical");
        });

        modelBuilder.Entity<CcRtnExamPsychicals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_exam_psychicals");

            entity.ToTable("cc_rtn_exam_psychicals", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_419202857");

            entity.HasIndex(e => e.PlanDate, "idx_668584654");

            entity.HasIndex(e => e.FactDate, "idx_882748948");

            entity.HasIndex(e => e.ModificationDate, "idx_983785592");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
        });

        modelBuilder.Entity<CcRtnFault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_fault");

            entity.ToTable("cc_rtn_fault", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnFault)
                .HasForeignKey<CcRtnFault>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_fault");
        });

        modelBuilder.Entity<CcRtnFaults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_faults");

            entity.ToTable("cc_rtn_faults", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_368016989");

            entity.HasIndex(e => e.ModificationDate, "idx_443073854");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderProps).HasColumnName("order_props");
        });

        modelBuilder.Entity<CcRtnKnowledge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_knowledge");

            entity.ToTable("cc_rtn_knowledge", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnKnowledge)
                .HasForeignKey<CcRtnKnowledge>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_knowledge");
        });

        modelBuilder.Entity<CcRtnKnowledgeSafety>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_knowledge_safety");

            entity.ToTable("cc_rtn_knowledge_safety", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnKnowledgeSafety)
                .HasForeignKey<CcRtnKnowledgeSafety>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_knowledge_safety");
        });

        modelBuilder.Entity<CcRtnKnowledgeSafetys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_knowledge_safetys");

            entity.ToTable("cc_rtn_knowledge_safetys", "dbo");

            entity.HasIndex(e => e.PostLicensedId, "idx_285554514");

            entity.HasIndex(e => e.CollaboratorId, "idx_345849434");

            entity.HasIndex(e => e.ResultId, "idx_952833095");

            entity.HasIndex(e => e.ModificationDate, "idx_992881037");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.DocProps).HasColumnName("doc_props");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnKnowledgeTheory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_knowledge_theory");

            entity.ToTable("cc_rtn_knowledge_theory", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnKnowledgeTheory)
                .HasForeignKey<CcRtnKnowledgeTheory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_knowledge_theory");
        });

        modelBuilder.Entity<CcRtnKnowledgeTheorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_knowledge_theorys");

            entity.ToTable("cc_rtn_knowledge_theorys", "dbo");

            entity.HasIndex(e => e.ResultId, "idx_313511429");

            entity.HasIndex(e => e.ModificationDate, "idx_394597107");

            entity.HasIndex(e => e.ApplicationId, "idx_463491590");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ApplicationId).HasColumnName("application_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnKnowledges>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_knowledges");

            entity.ToTable("cc_rtn_knowledges", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_331969304");

            entity.HasIndex(e => e.ModificationDate, "idx_493788164");

            entity.HasIndex(e => e.PostLicensedId, "idx_600300276");

            entity.HasIndex(e => e.ControlTypeId, "idx_73812112");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ControlTypeId).HasColumnName("control_type_id");
            entity.Property(e => e.DocProps).HasColumnName("doc_props");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnLicense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license");

            entity.ToTable("cc_rtn_license", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicense)
                .HasForeignKey<CcRtnLicense>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license");
        });

        modelBuilder.Entity<CcRtnLicense2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license2");

            entity.ToTable("cc_rtn_license2", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicense2)
                .HasForeignKey<CcRtnLicense2>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license2");
        });

        modelBuilder.Entity<CcRtnLicense2s>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license2s");

            entity.ToTable("cc_rtn_license2s", "dbo");

            entity.HasIndex(e => e.FlOperative, "idx_350223351");

            entity.HasIndex(e => e.ParentId, "idx_509808844");

            entity.HasIndex(e => e.StationId, "idx_588826395");

            entity.HasIndex(e => e.LicenseHolderTypeId, "idx_623517260");

            entity.HasIndex(e => e.PrepareStateId, "idx_658889839");

            entity.HasIndex(e => e.ResponsibleDepartment, "idx_678456518");

            entity.HasIndex(e => e.ModificationDate, "idx_947141823");

            entity.HasIndex(e => e.ResponsibleId, "idx_955582131");

            entity.HasIndex(e => e.CollaboratorId, "idx_984459413");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.FlOperative).HasColumnName("fl_operative");
            entity.Property(e => e.LicenseHolderTypeId).HasColumnName("license_holder_type_id");
            entity.Property(e => e.Mock).HasColumnName("mock");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PrepareStateId).HasColumnName("prepare_state_id");
            entity.Property(e => e.ResponsibleDepartment).HasColumnName("responsible_department");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnLicenseActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_activity");

            entity.ToTable("cc_rtn_license_activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseActivity)
                .HasForeignKey<CcRtnLicenseActivity>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_activity");
        });

        modelBuilder.Entity<CcRtnLicenseActivityResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_activity_result");

            entity.ToTable("cc_rtn_license_activity_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseActivityResult)
                .HasForeignKey<CcRtnLicenseActivityResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_activity_result");
        });

        modelBuilder.Entity<CcRtnLicenseActivityResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_activity_results");

            entity.ToTable("cc_rtn_license_activity_results", "dbo");

            entity.HasIndex(e => e.LicenseActivityId, "idx_23233021");

            entity.HasIndex(e => e.ResultId, "idx_298464764");

            entity.HasIndex(e => e.ProtocolId, "idx_751876060");

            entity.HasIndex(e => e.ModificationDate, "idx_988814359");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CaConcernFactDate).HasColumnName("ca_concern_fact_date");
            entity.Property(e => e.ExamDate).HasColumnName("exam_date");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");
            entity.Property(e => e.ResultFailNumber).HasColumnName("result_fail_number");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.RtnFactDate).HasColumnName("rtn_fact_date");
            entity.Property(e => e.RtnPlanDate).HasColumnName("rtn_plan_date");
        });

        modelBuilder.Entity<CcRtnLicenseActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_activitys");

            entity.ToTable("cc_rtn_license_activitys", "dbo");

            entity.HasIndex(e => e.ActivityId, "idx_309225123");

            entity.HasIndex(e => e.ModificationDate, "idx_526513886");

            entity.HasIndex(e => e.Year, "idx_617324563");

            entity.HasIndex(e => e.LicenseId, "idx_868412626");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlSuccess).HasColumnName("fl_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CcRtnLicenseControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_control");

            entity.ToTable("cc_rtn_license_control", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseControl)
                .HasForeignKey<CcRtnLicenseControl>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_control");
        });

        modelBuilder.Entity<CcRtnLicenseControlResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_control_result");

            entity.ToTable("cc_rtn_license_control_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseControlResult)
                .HasForeignKey<CcRtnLicenseControlResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_control_result");
        });

        modelBuilder.Entity<CcRtnLicenseControlResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_control_results");

            entity.ToTable("cc_rtn_license_control_results", "dbo");

            entity.HasIndex(e => e.LicenseControlId, "idx_414119569");

            entity.HasIndex(e => e.ProtocolId, "idx_477997867");

            entity.HasIndex(e => e.ModificationDate, "idx_839079493");

            entity.HasIndex(e => e.ResultId, "idx_92432936");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.LicenseControlId).HasColumnName("license_control_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnLicenseControls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_controls");

            entity.ToTable("cc_rtn_license_controls", "dbo");

            entity.HasIndex(e => e.Year, "idx_329329234");

            entity.HasIndex(e => e.ControlId, "idx_500998419");

            entity.HasIndex(e => e.ModificationDate, "idx_53270533");

            entity.HasIndex(e => e.ControlKindId, "idx_783307923");

            entity.HasIndex(e => e.LicenseId, "idx_842821684");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ControlId).HasColumnName("control_id");
            entity.Property(e => e.ControlKindId).HasColumnName("control_kind_id");
            entity.Property(e => e.DeadlineDate).HasColumnName("deadline_date");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.SuccessDate).HasColumnName("success_date");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CcRtnLicenseDoubling>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_doubling");

            entity.ToTable("cc_rtn_license_doubling", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseDoubling)
                .HasForeignKey<CcRtnLicenseDoubling>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_doubling");
        });

        modelBuilder.Entity<CcRtnLicenseDoublings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_doublings");

            entity.ToTable("cc_rtn_license_doublings", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_339946549");

            entity.HasIndex(e => e.LicenseId, "idx_776401919");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate).HasColumnName("begin_date");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FlSuccess).HasColumnName("fl_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderProps).HasColumnName("order_props");
        });

        modelBuilder.Entity<CcRtnLicenseFault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_fault");

            entity.ToTable("cc_rtn_license_fault", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseFault)
                .HasForeignKey<CcRtnLicenseFault>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_fault");
        });

        modelBuilder.Entity<CcRtnLicenseFaults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_faults");

            entity.ToTable("cc_rtn_license_faults", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_130531750");

            entity.HasIndex(e => e.LicenseActivityId, "idx_597461573");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderProps).HasColumnName("order_props");
        });

        modelBuilder.Entity<CcRtnLicenseHolder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_holder");

            entity.ToTable("cc_rtn_license_holder", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseHolder)
                .HasForeignKey<CcRtnLicenseHolder>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_holder");
        });

        modelBuilder.Entity<CcRtnLicenseHolderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_holder_type");

            entity.ToTable("cc_rtn_license_holder_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseHolderType)
                .HasForeignKey<CcRtnLicenseHolderType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_holder_type");
        });

        modelBuilder.Entity<CcRtnLicenseHolderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_holder_types");

            entity.ToTable("cc_rtn_license_holder_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_792333418");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicenseHolders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_holders");

            entity.ToTable("cc_rtn_license_holders", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_155292685");

            entity.HasIndex(e => e.LicenseStateId, "idx_275048454");

            entity.HasIndex(e => e.LicenseActivityId, "idx_404372933");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate).HasColumnName("begin_date");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.LicenseStateId).HasColumnName("license_state_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
        });

        modelBuilder.Entity<CcRtnLicensePerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_perm");

            entity.ToTable("cc_rtn_license_perm", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePerm)
                .HasForeignKey<CcRtnLicensePerm>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_perm");
        });

        modelBuilder.Entity<CcRtnLicensePermState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_perm_state");

            entity.ToTable("cc_rtn_license_perm_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePermState)
                .HasForeignKey<CcRtnLicensePermState>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_perm_state");
        });

        modelBuilder.Entity<CcRtnLicensePermStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_perm_states");

            entity.ToTable("cc_rtn_license_perm_states", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_526977499");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicensePerms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_perms");

            entity.ToTable("cc_rtn_license_perms", "dbo");

            entity.HasIndex(e => e.StateId, "idx_808301529");

            entity.HasIndex(e => e.ModificationDate, "idx_891654763");

            entity.HasIndex(e => e.LicenseActivityId, "idx_933956715");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DocProps).HasColumnName("doc_props");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
        });

        modelBuilder.Entity<CcRtnLicensePost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_post");

            entity.ToTable("cc_rtn_license_post", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePost)
                .HasForeignKey<CcRtnLicensePost>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_post");
        });

        modelBuilder.Entity<CcRtnLicensePost2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_post2");

            entity.ToTable("cc_rtn_license_post2", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePost2)
                .HasForeignKey<CcRtnLicensePost2>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_post2");
        });

        modelBuilder.Entity<CcRtnLicensePost2s>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_post2s");

            entity.ToTable("cc_rtn_license_post2s", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_386128531");

            entity.HasIndex(e => e.LicenseId, "idx_433241761");

            entity.HasIndex(e => e.PostLicensedId, "idx_883615366");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlHeldPost).HasColumnName("fl_held_post");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.Mock).HasColumnName("mock");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnLicensePostHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_post_history");

            entity.ToTable("cc_rtn_license_post_history", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePostHistory)
                .HasForeignKey<CcRtnLicensePostHistory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_post_history");
        });

        modelBuilder.Entity<CcRtnLicensePostHistorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_post_historys");

            entity.ToTable("cc_rtn_license_post_historys", "dbo");

            entity.HasIndex(e => e.MainDivId, "idx_152215057");

            entity.HasIndex(e => e.DivId, "idx_187273380");

            entity.HasIndex(e => e.ModificationDate, "idx_476689602");

            entity.HasIndex(e => e.LicenseId, "idx_683629535");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.DivName).HasColumnName("div_name");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.MainDivId).HasColumnName("main_div_id");
            entity.Property(e => e.MainDivName).HasColumnName("main_div_name");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicensePosts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_posts");

            entity.ToTable("cc_rtn_license_posts", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_223560407");

            entity.HasIndex(e => e.MainDivId, "idx_308823186");

            entity.HasIndex(e => e.LicenseId, "idx_502779786");

            entity.HasIndex(e => e.DivId, "idx_812585045");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.DivName).HasColumnName("div_name");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.MainDivId).HasColumnName("main_div_id");
            entity.Property(e => e.MainDivName).HasColumnName("main_div_name");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicensePrepareState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_prepare_state");

            entity.ToTable("cc_rtn_license_prepare_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicensePrepareState)
                .HasForeignKey<CcRtnLicensePrepareState>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_prepare_state");
        });

        modelBuilder.Entity<CcRtnLicensePrepareStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_prepare_states");

            entity.ToTable("cc_rtn_license_prepare_states", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_164458955");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicenseQual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_qual");

            entity.ToTable("cc_rtn_license_qual", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseQual)
                .HasForeignKey<CcRtnLicenseQual>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_qual");
        });

        modelBuilder.Entity<CcRtnLicenseQuals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_quals");

            entity.ToTable("cc_rtn_license_quals", "dbo");

            entity.HasIndex(e => e.PostLicensedId, "idx_329878697");

            entity.HasIndex(e => e.ActivityId, "idx_40401664");

            entity.HasIndex(e => e.ModificationDate, "idx_528204849");

            entity.HasIndex(e => e.LicenseId, "idx_752271133");

            entity.HasIndex(e => e.LicenseActivityId, "idx_902178074");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate).HasColumnName("begin_date");
            entity.Property(e => e.DocProps).HasColumnName("doc_props");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FlDistance).HasColumnName("fl_distance");
            entity.Property(e => e.FlSuccess).HasColumnName("fl_success");
            entity.Property(e => e.LicenseActivityId).HasColumnName("license_activity_id");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnLicenseSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_skill");

            entity.ToTable("cc_rtn_license_skill", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseSkill)
                .HasForeignKey<CcRtnLicenseSkill>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_skill");
        });

        modelBuilder.Entity<CcRtnLicenseSkillResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_skill_result");

            entity.ToTable("cc_rtn_license_skill_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseSkillResult)
                .HasForeignKey<CcRtnLicenseSkillResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_skill_result");
        });

        modelBuilder.Entity<CcRtnLicenseSkillResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_skill_results");

            entity.ToTable("cc_rtn_license_skill_results", "dbo");

            entity.HasIndex(e => e.ProtocolId, "idx_528882731");

            entity.HasIndex(e => e.LicenseSkillId, "idx_709379852");

            entity.HasIndex(e => e.ResultId, "idx_858885198");

            entity.HasIndex(e => e.ModificationDate, "idx_934072853");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.LicenseSkillId).HasColumnName("license_skill_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtnLicenseSkills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_skills");

            entity.ToTable("cc_rtn_license_skills", "dbo");

            entity.HasIndex(e => e.ControlKindId, "idx_211434517");

            entity.HasIndex(e => e.LicensePostId, "idx_30598376");

            entity.HasIndex(e => e.ModificationDate, "idx_975124453");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ControlKindId).HasColumnName("control_kind_id");
            entity.Property(e => e.LicensePostId).HasColumnName("license_post_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.SuccessDate).HasColumnName("success_date");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<CcRtnLicenseState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_state");

            entity.ToTable("cc_rtn_license_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseState)
                .HasForeignKey<CcRtnLicenseState>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_state");
        });

        modelBuilder.Entity<CcRtnLicenseStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_states");

            entity.ToTable("cc_rtn_license_states", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_322286532");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnLicenseTraining>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_training");

            entity.ToTable("cc_rtn_license_training", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseTraining)
                .HasForeignKey<CcRtnLicenseTraining>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_training");
        });

        modelBuilder.Entity<CcRtnLicenseTraining2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_training2");

            entity.ToTable("cc_rtn_license_training2", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnLicenseTraining2)
                .HasForeignKey<CcRtnLicenseTraining2>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_license_training2");
        });

        modelBuilder.Entity<CcRtnLicenseTraining2s>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_training2s");

            entity.ToTable("cc_rtn_license_training2s", "dbo");

            entity.HasIndex(e => e.LicenseId, "idx_381382847");

            entity.HasIndex(e => e.ModificationDate, "idx_770330901");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditionalBegin).HasColumnName("additional_begin");
            entity.Property(e => e.AdditionalEnd).HasColumnName("additional_end");
            entity.Property(e => e.AdditionalHours).HasColumnName("additional_hours");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ExperienceBegin).HasColumnName("experience_begin");
            entity.Property(e => e.ExperienceEnd).HasColumnName("experience_end");
            entity.Property(e => e.ExperienceHours).HasColumnName("experience_hours");
            entity.Property(e => e.FlAdditionalSuccess).HasColumnName("fl_additional_success");
            entity.Property(e => e.FlExperienceSuccess).HasColumnName("fl_experience_success");
            entity.Property(e => e.FlPracticeSuccess).HasColumnName("fl_practice_success");
            entity.Property(e => e.FlTheorySuccess).HasColumnName("fl_theory_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PracticeBegin).HasColumnName("practice_begin");
            entity.Property(e => e.PracticeEnd).HasColumnName("practice_end");
            entity.Property(e => e.PracticeHours).HasColumnName("practice_hours");
            entity.Property(e => e.TheoryBegin).HasColumnName("theory_begin");
            entity.Property(e => e.TheoryEnd).HasColumnName("theory_end");
            entity.Property(e => e.TheoryHours).HasColumnName("theory_hours");
        });

        modelBuilder.Entity<CcRtnLicenseTrainings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_license_trainings");

            entity.ToTable("cc_rtn_license_trainings", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_457033011");

            entity.HasIndex(e => e.LicenseId, "idx_461854436");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DoublingBegin).HasColumnName("doubling_begin");
            entity.Property(e => e.DoublingEnd).HasColumnName("doubling_end");
            entity.Property(e => e.DoublingProps).HasColumnName("doubling_props");
            entity.Property(e => e.ExperienceBegin).HasColumnName("experience_begin");
            entity.Property(e => e.ExperienceEnd).HasColumnName("experience_end");
            entity.Property(e => e.FlDoublingSuccess).HasColumnName("fl_doubling_success");
            entity.Property(e => e.FlExperienceSuccess).HasColumnName("fl_experience_success");
            entity.Property(e => e.FlPracticeSuccess).HasColumnName("fl_practice_success");
            entity.Property(e => e.FlTheorySuccess).HasColumnName("fl_theory_success");
            entity.Property(e => e.LicenseId).HasColumnName("license_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PracticeBegin).HasColumnName("practice_begin");
            entity.Property(e => e.PracticeEnd).HasColumnName("practice_end");
            entity.Property(e => e.TheoryBegin).HasColumnName("theory_begin");
            entity.Property(e => e.TheoryEnd).HasColumnName("theory_end");
        });

        modelBuilder.Entity<CcRtnLicenses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_licenses");

            entity.ToTable("cc_rtn_licenses", "dbo");

            entity.HasIndex(e => e.PostLicensedId, "idx_104708821");

            entity.HasIndex(e => e.ModificationDate, "idx_304111159");

            entity.HasIndex(e => e.CollaboratorId, "idx_304153966");

            entity.HasIndex(e => e.FlCancel, "idx_397054834");

            entity.HasIndex(e => e.FlPrepareComplete, "idx_507319818");

            entity.HasIndex(e => e.FlPrepare, "idx_851678245");

            entity.HasIndex(e => e.ActivityId, "idx_8882236");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BeginDate).HasColumnName("begin_date");
            entity.Property(e => e.CancelNote).HasColumnName("cancel_note");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FlCancel).HasColumnName("fl_cancel");
            entity.Property(e => e.FlHeldPost).HasColumnName("fl_held_post");
            entity.Property(e => e.FlPrepare).HasColumnName("fl_prepare");
            entity.Property(e => e.FlPrepareComplete).HasColumnName("fl_prepare_complete");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.OrderProps).HasColumnName("order_props");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.PrepareCompleteDate).HasColumnName("prepare_complete_date");
        });

        modelBuilder.Entity<CcRtnNppBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_npp_block");

            entity.ToTable("cc_rtn_npp_block", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnNppBlock)
                .HasForeignKey<CcRtnNppBlock>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_npp_block");
        });

        modelBuilder.Entity<CcRtnNppBlockStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_npp_block_stage");

            entity.ToTable("cc_rtn_npp_block_stage", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnNppBlockStage)
                .HasForeignKey<CcRtnNppBlockStage>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_npp_block_stage");
        });

        modelBuilder.Entity<CcRtnNppBlockStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_npp_block_stages");

            entity.ToTable("cc_rtn_npp_block_stages", "dbo");

            entity.HasIndex(e => e.StationId, "idx_221900180");

            entity.HasIndex(e => e.ModificationDate, "idx_607627214");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnNppBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_npp_blocks");

            entity.ToTable("cc_rtn_npp_blocks", "dbo");

            entity.HasIndex(e => e.StageId, "idx_460195541");

            entity.HasIndex(e => e.StationId, "idx_492356029");

            entity.HasIndex(e => e.ModificationDate, "idx_696432240");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_permission");

            entity.ToTable("cc_rtn_permission", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPermission)
                .HasForeignKey<CcRtnPermission>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_permission");
        });

        modelBuilder.Entity<CcRtnPermissionStatusType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_permission_status_type");

            entity.ToTable("cc_rtn_permission_status_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPermissionStatusType)
                .HasForeignKey<CcRtnPermissionStatusType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_permission_status_type");
        });

        modelBuilder.Entity<CcRtnPermissionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_permission_status_types");

            entity.ToTable("cc_rtn_permission_status_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_253039514");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnPermissionStop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_permission_stop");

            entity.ToTable("cc_rtn_permission_stop", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPermissionStop)
                .HasForeignKey<CcRtnPermissionStop>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_permission_stop");
        });

        modelBuilder.Entity<CcRtnPermissionStops>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_permission_stops");

            entity.ToTable("cc_rtn_permission_stops", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_445740854");

            entity.HasIndex(e => e.PermissionId, "idx_522971357");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DocProps).HasColumnName("doc_props");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");
        });

        modelBuilder.Entity<CcRtnPermissions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_permissions");

            entity.ToTable("cc_rtn_permissions", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_158317737");

            entity.HasIndex(e => e.ActivityId, "idx_699707558");

            entity.HasIndex(e => e.ModificationDate, "idx_859733601");

            entity.HasIndex(e => e.PostLicensedId, "idx_937609793");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.FlCancel).HasColumnName("fl_cancel");
            entity.Property(e => e.FlStop).HasColumnName("fl_stop");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderProps).HasColumnName("order_props");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
        });

        modelBuilder.Entity<CcRtnPostApproved>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_approved");

            entity.ToTable("cc_rtn_post_approved", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostApproved)
                .HasForeignKey<CcRtnPostApproved>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_approved");
        });

        modelBuilder.Entity<CcRtnPostApproveds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_approveds");

            entity.ToTable("cc_rtn_post_approveds", "dbo");

            entity.HasIndex(e => e.SubcategoryId, "idx_11210049");

            entity.HasIndex(e => e.CategoryId, "idx_19117150");

            entity.HasIndex(e => e.ModificationDate, "idx_456863218");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.FlCaControl).HasColumnName("fl_ca_control");
            entity.Property(e => e.FlLead).HasColumnName("fl_lead");
            entity.Property(e => e.FlOperative).HasColumnName("fl_operative");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");
        });

        modelBuilder.Entity<CcRtnPostCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_category");

            entity.ToTable("cc_rtn_post_category", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostCategory)
                .HasForeignKey<CcRtnPostCategory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_category");
        });

        modelBuilder.Entity<CcRtnPostCategorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_categorys");

            entity.ToTable("cc_rtn_post_categorys", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_413360372");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnPostLicensed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_licensed");

            entity.ToTable("cc_rtn_post_licensed", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostLicensed)
                .HasForeignKey<CcRtnPostLicensed>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_licensed");
        });

        modelBuilder.Entity<CcRtnPostLicenseds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_licenseds");

            entity.ToTable("cc_rtn_post_licenseds", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_961933007");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.FlOperative).HasColumnName("fl_operative");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnPostOperative>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_operative");

            entity.ToTable("cc_rtn_post_operative", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostOperative)
                .HasForeignKey<CcRtnPostOperative>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_operative");
        });

        modelBuilder.Entity<CcRtnPostOperativeBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_operative_block");

            entity.ToTable("cc_rtn_post_operative_block", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostOperativeBlock)
                .HasForeignKey<CcRtnPostOperativeBlock>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_operative_block");
        });

        modelBuilder.Entity<CcRtnPostOperativeBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_operative_blocks");

            entity.ToTable("cc_rtn_post_operative_blocks", "dbo");

            entity.HasIndex(e => e.NppBlockId, "idx_26495307");

            entity.HasIndex(e => e.ModificationDate, "idx_310711838");

            entity.HasIndex(e => e.PostOperativeId, "idx_843972631");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Mock).HasColumnName("mock");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NppBlockId).HasColumnName("npp_block_id");
            entity.Property(e => e.PostOperativeId).HasColumnName("post_operative_id");
        });

        modelBuilder.Entity<CcRtnPostOperatives>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_operatives");

            entity.ToTable("cc_rtn_post_operatives", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_152247278");

            entity.HasIndex(e => e.NppStageId, "idx_262186004");

            entity.HasIndex(e => e.PostStructureId, "idx_753764229");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.MinCount).HasColumnName("min_count");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NppStageId).HasColumnName("npp_stage_id");
            entity.Property(e => e.PostStructureId).HasColumnName("post_structure_id");
        });

        modelBuilder.Entity<CcRtnPostStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_station");

            entity.ToTable("cc_rtn_post_station", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStation)
                .HasForeignKey<CcRtnPostStation>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_station");
        });

        modelBuilder.Entity<CcRtnPostStationActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_station_activity");

            entity.ToTable("cc_rtn_post_station_activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStationActivity)
                .HasForeignKey<CcRtnPostStationActivity>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_station_activity");
        });

        modelBuilder.Entity<CcRtnPostStationActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_station_activitys");

            entity.ToTable("cc_rtn_post_station_activitys", "dbo");

            entity.HasIndex(e => e.PostStationId, "idx_234186275");

            entity.HasIndex(e => e.ModificationDate, "idx_505978977");

            entity.HasIndex(e => e.ActivityId, "idx_822782377");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Mock).HasColumnName("mock");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostStationId).HasColumnName("post_station_id");
        });

        modelBuilder.Entity<CcRtnPostStationLicensed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_station_licensed");

            entity.ToTable("cc_rtn_post_station_licensed", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStationLicensed)
                .HasForeignKey<CcRtnPostStationLicensed>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_station_licensed");
        });

        modelBuilder.Entity<CcRtnPostStationLicenseds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_station_licenseds");

            entity.ToTable("cc_rtn_post_station_licenseds", "dbo");

            entity.HasIndex(e => e.PostLicensedId, "idx_174339822");

            entity.HasIndex(e => e.ModificationDate, "idx_233630843");

            entity.HasIndex(e => e.PostStationId, "idx_476203819");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Mock).HasColumnName("mock");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.PostStationId).HasColumnName("post_station_id");
        });

        modelBuilder.Entity<CcRtnPostStations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_stations");

            entity.ToTable("cc_rtn_post_stations", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_360007797");

            entity.HasIndex(e => e.StationId, "idx_522135377");

            entity.HasIndex(e => e.PostApprovedId, "idx_847718079");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostApprovedId).HasColumnName("post_approved_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnPostStructure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_structure");

            entity.ToTable("cc_rtn_post_structure", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStructure)
                .HasForeignKey<CcRtnPostStructure>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_structure");
        });

        modelBuilder.Entity<CcRtnPostStructureControl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_structure_control");

            entity.ToTable("cc_rtn_post_structure_control", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostStructureControl)
                .HasForeignKey<CcRtnPostStructureControl>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_structure_control");
        });

        modelBuilder.Entity<CcRtnPostStructureControls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_structure_controls");

            entity.ToTable("cc_rtn_post_structure_controls", "dbo");

            entity.HasIndex(e => e.PostStructureId, "idx_167547502");

            entity.HasIndex(e => e.ControlTypeId, "idx_34261686");

            entity.HasIndex(e => e.ModificationDate, "idx_993775205");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ControlPeriod).HasColumnName("control_period");
            entity.Property(e => e.ControlTypeId).HasColumnName("control_type_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostStructureId).HasColumnName("post_structure_id");
        });

        modelBuilder.Entity<CcRtnPostStructures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_structures");

            entity.ToTable("cc_rtn_post_structures", "dbo");

            entity.HasIndex(e => e.ResponsibleDepartment, "idx_237124198");

            entity.HasIndex(e => e.PostLicensedId, "idx_661902704");

            entity.HasIndex(e => e.ModificationDate, "idx_777563201");

            entity.HasIndex(e => e.StationId, "idx_813133749");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.InstructionId).HasColumnName("instruction_id");
            entity.Property(e => e.Mock).HasColumnName("mock");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResponsibleDepartment).HasColumnName("responsible_department");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcRtnPostSubcategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_subcategory");

            entity.ToTable("cc_rtn_post_subcategory", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnPostSubcategory)
                .HasForeignKey<CcRtnPostSubcategory>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_post_subcategory");
        });

        modelBuilder.Entity<CcRtnPostSubcategorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_post_subcategorys");

            entity.ToTable("cc_rtn_post_subcategorys", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_452953462");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlActive).HasColumnName("fl_active");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcRtnSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_skill");

            entity.ToTable("cc_rtn_skill", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcRtnSkill)
                .HasForeignKey<CcRtnSkill>(d => d.Id)
                .HasConstraintName("fk_objects_cc_rtn_skill");
        });

        modelBuilder.Entity<CcRtnSkills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtn_skills");

            entity.ToTable("cc_rtn_skills", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_197502997");

            entity.HasIndex(e => e.ModificationDate, "idx_481586914");

            entity.HasIndex(e => e.PostLicensedId, "idx_805095974");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.DocProps).HasColumnName("doc_props");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
            entity.Property(e => e.PostLicensedId).HasColumnName("post_licensed_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
        });

        modelBuilder.Entity<CcRtns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_rtns");

            entity.ToTable("cc_rtns", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_685814538");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.IssueDate).HasColumnName("issue_date");
            entity.Property(e => e.IssuedBy).HasColumnName("issued_by");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ResolutionForm).HasColumnName("resolution_form");
            entity.Property(e => e.ResolutionType).HasColumnName("resolution_type");
            entity.Property(e => e.Serial).HasColumnName("serial");
            entity.Property(e => e.Validity).HasColumnName("validity");
        });

        modelBuilder.Entity<CcScmtAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign");

            entity.ToTable("cc_scmt_assign", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssign)
                .HasForeignKey<CcScmtAssign>(d => d.Id)
                .HasConstraintName("fk_objects_cc_scmt_assign");
        });

        modelBuilder.Entity<CcScmtAssignAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign_answer");

            entity.ToTable("cc_scmt_assign_answer", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssignAnswer)
                .HasForeignKey<CcScmtAssignAnswer>(d => d.Id)
                .HasConstraintName("fk_objects_cc_scmt_assign_answer");
        });

        modelBuilder.Entity<CcScmtAssignAnswers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign_answers");

            entity.ToTable("cc_scmt_assign_answers", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_217592442");

            entity.HasIndex(e => e.Answer, "idx_334824109");

            entity.HasIndex(e => e.Type, "idx_817564269");

            entity.HasIndex(e => e.GroupUserRel, "idx_970458402");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Answer).HasColumnName("answer");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.GroupUserRel).HasColumnName("group_user_rel");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcScmtAssignGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign_group");

            entity.ToTable("cc_scmt_assign_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssignGroup)
                .HasForeignKey<CcScmtAssignGroup>(d => d.Id)
                .HasConstraintName("fk_objects_cc_scmt_assign_group");
        });

        modelBuilder.Entity<CcScmtAssignGroupList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign_group_list");

            entity.ToTable("cc_scmt_assign_group_list", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtAssignGroupList)
                .HasForeignKey<CcScmtAssignGroupList>(d => d.Id)
                .HasConstraintName("fk_objects_cc_scmt_assign_group_list");
        });

        modelBuilder.Entity<CcScmtAssignGroupLists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign_group_lists");

            entity.ToTable("cc_scmt_assign_group_lists", "dbo");

            entity.HasIndex(e => e.User, "idx_315942838");

            entity.HasIndex(e => e.Shift, "idx_547917622");

            entity.HasIndex(e => e.ModificationDate, "idx_725250579");

            entity.HasIndex(e => e.Group, "idx_978003659");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FlForcedNull).HasColumnName("fl_forced_null");
            entity.Property(e => e.Fullname).HasColumnName("fullname");
            entity.Property(e => e.Group).HasColumnName("group");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Shift).HasColumnName("shift");
            entity.Property(e => e.SubdivisionCeh).HasColumnName("subdivision_ceh");
            entity.Property(e => e.TimeQuestOne).HasColumnName("time_quest_one");
            entity.Property(e => e.TimeQuestTwo).HasColumnName("time_quest_two");
            entity.Property(e => e.User).HasColumnName("user");
        });

        modelBuilder.Entity<CcScmtAssignGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assign_groups");

            entity.ToTable("cc_scmt_assign_groups", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_897606112");

            entity.HasIndex(e => e.Assign, "idx_960068066");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Assign).HasColumnName("assign");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.ShortName).HasColumnName("short_name");
        });

        modelBuilder.Entity<CcScmtAssigns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_assigns");

            entity.ToTable("cc_scmt_assigns", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_752234558");

            entity.HasIndex(e => e.Subdivision, "idx_875064484");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AverageTimeAnswer).HasColumnName("average_time_answer");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Finished).HasColumnName("finished");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.QuestOne).HasColumnName("quest_one");
            entity.Property(e => e.QuestTwo).HasColumnName("quest_two");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
        });

        modelBuilder.Entity<CcScmtOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_option");

            entity.ToTable("cc_scmt_option", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcScmtOption)
                .HasForeignKey<CcScmtOption>(d => d.Id)
                .HasConstraintName("fk_objects_cc_scmt_option");
        });

        modelBuilder.Entity<CcScmtOptions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_scmt_options");

            entity.ToTable("cc_scmt_options", "dbo");

            entity.HasIndex(e => e.Name, "idx_381586701");

            entity.HasIndex(e => e.ModificationDate, "idx_479115688");

            entity.HasIndex(e => e.Subdivision, "idx_656675343");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<CcSelftestCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_code");

            entity.ToTable("cc_selftest_code", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestCode)
                .HasForeignKey<CcSelftestCode>(d => d.Id)
                .HasConstraintName("fk_objects_cc_selftest_code");
        });

        modelBuilder.Entity<CcSelftestCodes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_codes");

            entity.ToTable("cc_selftest_codes", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_212042557");

            entity.HasIndex(e => e.Code, "idx_364779122");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSelftestDb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_db");

            entity.ToTable("cc_selftest_db", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestDb)
                .HasForeignKey<CcSelftestDb>(d => d.Id)
                .HasConstraintName("fk_objects_cc_selftest_db");
        });

        modelBuilder.Entity<CcSelftestDbs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_dbs");

            entity.ToTable("cc_selftest_dbs", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_131656776");

            entity.HasIndex(e => e.MethodCode, "idx_416537166");

            entity.HasIndex(e => e.UserId, "idx_903735002");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Cnt).HasColumnName("cnt");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.Fact).HasColumnName("fact");
            entity.Property(e => e.Method).HasColumnName("method");
            entity.Property(e => e.MethodCode).HasColumnName("method_code");
            entity.Property(e => e.ModelCode).HasColumnName("model_code");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcSelftestExpert>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_expert");

            entity.ToTable("cc_selftest_expert", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestExpert)
                .HasForeignKey<CcSelftestExpert>(d => d.Id)
                .HasConstraintName("fk_objects_cc_selftest_expert");
        });

        modelBuilder.Entity<CcSelftestExperts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_experts");

            entity.ToTable("cc_selftest_experts", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_793279535");

            entity.HasIndex(e => e.BpId, "idx_810429440");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSelftestModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_model");

            entity.ToTable("cc_selftest_model", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSelftestModel)
                .HasForeignKey<CcSelftestModel>(d => d.Id)
                .HasConstraintName("fk_objects_cc_selftest_model");
        });

        modelBuilder.Entity<CcSelftestModels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_selftest_models");

            entity.ToTable("cc_selftest_models", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_395451829");

            entity.HasIndex(e => new { e.Pid, e.Id }, "idx_639456040");

            entity.HasIndex(e => e.Pid, "idx_781404779");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Pid).HasColumnName("pid");
        });

        modelBuilder.Entity<CcSkvzActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_activity");

            entity.ToTable("cc_skvz_activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzActivity)
                .HasForeignKey<CcSkvzActivity>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_activity");
        });

        modelBuilder.Entity<CcSkvzActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_activitys");

            entity.ToTable("cc_skvz_activitys", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_125072037");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzBpApprovedObject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_bp_approved_object");

            entity.ToTable("cc_skvz_bp_approved_object", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzBpApprovedObject)
                .HasForeignKey<CcSkvzBpApprovedObject>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_bp_approved_object");
        });

        modelBuilder.Entity<CcSkvzBpApprovedObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_bp_approved_objects");

            entity.ToTable("cc_skvz_bp_approved_objects", "dbo");

            entity.HasIndex(e => e.WorkGroup, "idx_172419165");

            entity.HasIndex(e => e.SkvzSpWait, "idx_307228053");

            entity.HasIndex(e => e.SkvzSp, "idx_446930270");

            entity.HasIndex(e => e.ModificationDate, "idx_533281009");

            entity.HasIndex(e => e.WorkGroupWait, "idx_84023664");

            entity.HasIndex(e => e.BpId, "idx_950935337");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.SkvzSp).HasColumnName("skvz_sp");
            entity.Property(e => e.SkvzSpWait).HasColumnName("skvz_sp_wait");
            entity.Property(e => e.WorkGroup).HasColumnName("work_group");
            entity.Property(e => e.WorkGroupWait).HasColumnName("work_group_wait");
        });

        modelBuilder.Entity<CcSkvzCouncilMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_council_member");

            entity.ToTable("cc_skvz_council_member", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCouncilMember)
                .HasForeignKey<CcSkvzCouncilMember>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_council_member");
        });

        modelBuilder.Entity<CcSkvzCouncilMemberDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_council_member_div");

            entity.ToTable("cc_skvz_council_member_div", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCouncilMemberDiv)
                .HasForeignKey<CcSkvzCouncilMemberDiv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_council_member_div");
        });

        modelBuilder.Entity<CcSkvzCouncilMemberDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_council_member_divs");

            entity.ToTable("cc_skvz_council_member_divs", "dbo");

            entity.HasIndex(e => e.DivId, "idx_164331208");

            entity.HasIndex(e => e.CuratorId, "idx_451888955");

            entity.HasIndex(e => e.ModificationDate, "idx_642345308");

            entity.HasIndex(e => e.ActivityId, "idx_731532070");

            entity.HasIndex(e => e.CouncilMemberId, "idx_846827666");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CouncilMemberId).HasColumnName("council_member_id");
            entity.Property(e => e.CuratorId).HasColumnName("curator_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcSkvzCouncilMembers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_council_members");

            entity.ToTable("cc_skvz_council_members", "dbo");

            entity.HasIndex(e => e.SendingDate, "idx_22954014");

            entity.HasIndex(e => e.ActivityId, "idx_638210450");

            entity.HasIndex(e => e.ModificationDate, "idx_823389136");

            entity.HasIndex(e => e.PersonId, "idx_854742136");

            entity.HasIndex(e => e.StationId, "idx_929255115");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Complete).HasColumnName("complete");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SendingDate).HasColumnName("sending_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzCritPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_crit_position");

            entity.ToTable("cc_skvz_crit_position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCritPosition)
                .HasForeignKey<CcSkvzCritPosition>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_crit_position");
        });

        modelBuilder.Entity<CcSkvzCritPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_crit_positions");

            entity.ToTable("cc_skvz_crit_positions", "dbo");

            entity.HasIndex(e => e.DivId, "idx_144820637");

            entity.HasIndex(e => e.StationId, "idx_275417949");

            entity.HasIndex(e => e.Name, "idx_31579218");

            entity.HasIndex(e => e.PlanCnt, "idx_40874180");

            entity.HasIndex(e => e.ModificationDate, "idx_477506814");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PlanCnt).HasColumnName("plan_cnt");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzCriteriaActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_criteria_activity");

            entity.ToTable("cc_skvz_criteria_activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCriteriaActivity)
                .HasForeignKey<CcSkvzCriteriaActivity>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_criteria_activity");
        });

        modelBuilder.Entity<CcSkvzCriteriaActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_criteria_activitys");

            entity.ToTable("cc_skvz_criteria_activitys", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_13822711");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzCriticalityPosFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_criticality_pos_factor");

            entity.ToTable("cc_skvz_criticality_pos_factor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzCriticalityPosFactor)
                .HasForeignKey<CcSkvzCriticalityPosFactor>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_criticality_pos_factor");
        });

        modelBuilder.Entity<CcSkvzCriticalityPosFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_criticality_pos_factors");

            entity.ToTable("cc_skvz_criticality_pos_factors", "dbo");

            entity.HasIndex(e => e.Name, "idx_699500436");

            entity.HasIndex(e => e.Code, "idx_882241167");

            entity.HasIndex(e => e.ModificationDate, "idx_944934444");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_div");

            entity.ToTable("cc_skvz_div", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzDiv)
                .HasForeignKey<CcSkvzDiv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_div");
        });

        modelBuilder.Entity<CcSkvzDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_divs");

            entity.ToTable("cc_skvz_divs", "dbo");

            entity.HasIndex(e => e.StationBlockTypeId, "idx_333047036");

            entity.HasIndex(e => e.CouncilMemberId, "idx_646260765");

            entity.HasIndex(e => e.HeadId, "idx_651540583");

            entity.HasIndex(e => e.StationId, "idx_793711471");

            entity.HasIndex(e => e.DivId, "idx_854580139");

            entity.HasIndex(e => e.ModificationDate, "idx_984022919");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CouncilMemberId).HasColumnName("council_member_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.HeadId).HasColumnName("head_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StationBlockTypeId).HasColumnName("station_block_type_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzEv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_ev");

            entity.ToTable("cc_skvz_ev", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzEv)
                .HasForeignKey<CcSkvzEv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_ev");
        });

        modelBuilder.Entity<CcSkvzEvs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_evs");

            entity.ToTable("cc_skvz_evs", "dbo");

            entity.HasIndex(e => e.Name, "idx_232443372");

            entity.HasIndex(e => e.NeedExtract, "idx_546056977");

            entity.HasIndex(e => e.NeedSuccessor, "idx_621819682");

            entity.HasIndex(e => e.Code, "idx_962653804");

            entity.HasIndex(e => e.ModificationDate, "idx_974532747");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NeedExtract).HasColumnName("need_extract");
            entity.Property(e => e.NeedSuccessor).HasColumnName("need_successor");
        });

        modelBuilder.Entity<CcSkvzExtractKvzType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_extract_kvz_type");

            entity.ToTable("cc_skvz_extract_kvz_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzExtractKvzType)
                .HasForeignKey<CcSkvzExtractKvzType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_extract_kvz_type");
        });

        modelBuilder.Entity<CcSkvzExtractKvzTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_extract_kvz_types");

            entity.ToTable("cc_skvz_extract_kvz_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_594461647");

            entity.HasIndex(e => e.Name, "idx_803649049");

            entity.HasIndex(e => e.Code, "idx_912664733");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzKmap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_kmap");

            entity.ToTable("cc_skvz_kmap", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzKmap)
                .HasForeignKey<CcSkvzKmap>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_kmap");
        });

        modelBuilder.Entity<CcSkvzKmapItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_kmap_item");

            entity.ToTable("cc_skvz_kmap_item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzKmapItem)
                .HasForeignKey<CcSkvzKmapItem>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_kmap_item");
        });

        modelBuilder.Entity<CcSkvzKmapItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_kmap_items");

            entity.ToTable("cc_skvz_kmap_items", "dbo");

            entity.HasIndex(e => e.KmapId, "idx_316609824");

            entity.HasIndex(e => e.Value, "idx_374275299");

            entity.HasIndex(e => e.ModificationDate, "idx_374760960");

            entity.HasIndex(e => e.Name, "idx_489615088");

            entity.HasIndex(e => e.ParentId, "idx_550370401");

            entity.HasIndex(e => e.Code, "idx_771635760");

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idx_823772993");

            entity.HasIndex(e => e.BaseId, "idx_905504608");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BaseId).HasColumnName("base_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.KmapId).HasColumnName("kmap_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<CcSkvzKmaps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_kmaps");

            entity.ToTable("cc_skvz_kmaps", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_47685053");

            entity.HasIndex(e => e.Code, "idx_568105853");

            entity.HasIndex(e => e.ModificationDate, "idx_595565679");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSkvzKnowledgeDocsFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_knowledge_docs_factor");

            entity.ToTable("cc_skvz_knowledge_docs_factor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzKnowledgeDocsFactor)
                .HasForeignKey<CcSkvzKnowledgeDocsFactor>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_knowledge_docs_factor");
        });

        modelBuilder.Entity<CcSkvzKnowledgeDocsFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_knowledge_docs_factors");

            entity.ToTable("cc_skvz_knowledge_docs_factors", "dbo");

            entity.HasIndex(e => e.Name, "idx_270944511");

            entity.HasIndex(e => e.Code, "idx_542970339");

            entity.HasIndex(e => e.ModificationDate, "idx_982600952");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzMovedStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_moved_stage");

            entity.ToTable("cc_skvz_moved_stage", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzMovedStage)
                .HasForeignKey<CcSkvzMovedStage>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_moved_stage");
        });

        modelBuilder.Entity<CcSkvzMovedStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_moved_stages");

            entity.ToTable("cc_skvz_moved_stages", "dbo");

            entity.HasIndex(e => e.Code, "idx_524250860");

            entity.HasIndex(e => e.ModificationDate, "idx_99593447");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzPlanEv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_ev");

            entity.ToTable("cc_skvz_plan_ev", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanEv)
                .HasForeignKey<CcSkvzPlanEv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_ev");
        });

        modelBuilder.Entity<CcSkvzPlanEvEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_ev_event");

            entity.ToTable("cc_skvz_plan_ev_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanEvEvent)
                .HasForeignKey<CcSkvzPlanEvEvent>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_ev_event");
        });

        modelBuilder.Entity<CcSkvzPlanEvEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_ev_events");

            entity.ToTable("cc_skvz_plan_ev_events", "dbo");

            entity.HasIndex(e => e.EvId, "idx_44237205");

            entity.HasIndex(e => e.PlanEvId, "idx_532324303");

            entity.HasIndex(e => e.FactDate, "idx_694780784");

            entity.HasIndex(e => e.ModificationDate, "idx_767313580");

            entity.HasIndex(e => e.IsComplete, "idx_812588825");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.EvId).HasColumnName("ev_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanEvId).HasColumnName("plan_ev_id");
        });

        modelBuilder.Entity<CcSkvzPlanEvs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_evs");

            entity.ToTable("cc_skvz_plan_evs", "dbo");

            entity.HasIndex(e => e.Priority, "idx_314366663");

            entity.HasIndex(e => e.MDateComplete, "idx_320639196");

            entity.HasIndex(e => e.PlanFileId, "idx_371941055");

            entity.HasIndex(e => e.DateComplete, "idx_420030200");

            entity.HasIndex(e => e.MDateStart, "idx_458997556");

            entity.HasIndex(e => e.ResponsibleId, "idx_471964141");

            entity.HasIndex(e => e.FactDate, "idx_539990697");

            entity.HasIndex(e => e.IsComplete, "idx_609834726");

            entity.HasIndex(e => e.KvzPersonId, "idx_619337348");

            entity.HasIndex(e => e.ModificationDate, "idx_865680323");

            entity.HasIndex(e => e.MIsComplete, "idx_92579312");

            entity.HasIndex(e => e.ProtFileId, "idx_948508834");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.DateComplete).HasColumnName("date_complete");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.MDateComplete).HasColumnName("m_date_complete");
            entity.Property(e => e.MDateStart).HasColumnName("m_date_start");
            entity.Property(e => e.MIsComplete).HasColumnName("m_is_complete");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanFileId).HasColumnName("plan_file_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProtFileId).HasColumnName("prot_file_id");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz");

            entity.ToTable("cc_skvz_plan_extract_kvz", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvz)
                .HasForeignKey<CcSkvzPlanExtractKvz>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_extract_kvz");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzExp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz_exp");

            entity.ToTable("cc_skvz_plan_extract_kvz_exp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvzExp)
                .HasForeignKey<CcSkvzPlanExtractKvzExp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_extract_kvz_exp");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzExps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz_exps");

            entity.ToTable("cc_skvz_plan_extract_kvz_exps", "dbo");

            entity.HasIndex(e => e.PlanId, "idx_165049127");

            entity.HasIndex(e => e.PersonId, "idx_478053808");

            entity.HasIndex(e => e.ModificationDate, "idx_701284156");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz_file");

            entity.ToTable("cc_skvz_plan_extract_kvz_file", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvzFile)
                .HasForeignKey<CcSkvzPlanExtractKvzFile>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_extract_kvz_file");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzFiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz_files");

            entity.ToTable("cc_skvz_plan_extract_kvz_files", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_103651107");

            entity.HasIndex(e => e.PlanId, "idx_159053192");

            entity.HasIndex(e => e.FileId, "idx_951810092");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzWg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz_wg");

            entity.ToTable("cc_skvz_plan_extract_kvz_wg", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanExtractKvzWg)
                .HasForeignKey<CcSkvzPlanExtractKvzWg>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_extract_kvz_wg");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzWgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvz_wgs");

            entity.ToTable("cc_skvz_plan_extract_kvz_wgs", "dbo");

            entity.HasIndex(e => e.PlanId, "idx_133028721");

            entity.HasIndex(e => e.ModificationDate, "idx_218865741");

            entity.HasIndex(e => e.WgMemberId, "idx_295253434");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.WgMemberId).HasColumnName("wg_member_id");
        });

        modelBuilder.Entity<CcSkvzPlanExtractKvzs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_extract_kvzs");

            entity.ToTable("cc_skvz_plan_extract_kvzs", "dbo");

            entity.HasIndex(e => e.MFactDate, "idx_525108809");

            entity.HasIndex(e => e.KvzPersonId, "idx_566557121");

            entity.HasIndex(e => e.IsPollComplete, "idx_596739952");

            entity.HasIndex(e => e.IsInPoll, "idx_661949388");

            entity.HasIndex(e => e.MStartDate, "idx_680563154");

            entity.HasIndex(e => e.FactDate, "idx_686780633");

            entity.HasIndex(e => e.IsComplete, "idx_738436449");

            entity.HasIndex(e => e.ModificationDate, "idx_795609606");

            entity.HasIndex(e => e.ExtractKvzTypeId, "idx_822368465");

            entity.HasIndex(e => e.MIsComplete, "idx_913482616");

            entity.HasIndex(e => e.Kvz, "idx_980460024");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ExtractKvzTypeId).HasColumnName("extract_kvz_type_id");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsInPoll).HasColumnName("is_in_poll");
            entity.Property(e => e.IsPollComplete).HasColumnName("is_poll_complete");
            entity.Property(e => e.Kvz).HasColumnName("kvz");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.MFactDate).HasColumnName("m_fact_date");
            entity.Property(e => e.MIsComplete).HasColumnName("m_is_complete");
            entity.Property(e => e.MStartDate).HasColumnName("m_start_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcSkvzPlanInstallKvz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_install_kvz");

            entity.ToTable("cc_skvz_plan_install_kvz", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPlanInstallKvz)
                .HasForeignKey<CcSkvzPlanInstallKvz>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_plan_install_kvz");
        });

        modelBuilder.Entity<CcSkvzPlanInstallKvzs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_plan_install_kvzs");

            entity.ToTable("cc_skvz_plan_install_kvzs", "dbo");

            entity.HasIndex(e => e.IsPollComplete, "idx_200055742");

            entity.HasIndex(e => e.ProtFileId, "idx_263174342");

            entity.HasIndex(e => e.Method, "idx_29956626");

            entity.HasIndex(e => e.MmFileId, "idx_329485129");

            entity.HasIndex(e => e.ModificationDate, "idx_472768803");

            entity.HasIndex(e => e.IsInPoll, "idx_624317381");

            entity.HasIndex(e => e.KvzPersonId, "idx_75737862");

            entity.HasIndex(e => e.FactDate, "idx_77928599");

            entity.HasIndex(e => e.FormalizePersonId, "idx_78257830");

            entity.HasIndex(e => e.FormalizeDivId, "idx_793410127");

            entity.HasIndex(e => e.Kvz, "idx_80963159");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.FormalizeDivId).HasColumnName("formalize_div_id");
            entity.Property(e => e.FormalizePersonId).HasColumnName("formalize_person_id");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.IsInPoll).HasColumnName("is_in_poll");
            entity.Property(e => e.IsPollComplete).HasColumnName("is_poll_complete");
            entity.Property(e => e.Kvz).HasColumnName("kvz");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.Method).HasColumnName("method");
            entity.Property(e => e.MmFileId).HasColumnName("mm_file_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProtFileId).HasColumnName("prot_file_id");
        });

        modelBuilder.Entity<CcSkvzPollActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_activity");

            entity.ToTable("cc_skvz_poll_activity", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollActivity)
                .HasForeignKey<CcSkvzPollActivity>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_poll_activity");
        });

        modelBuilder.Entity<CcSkvzPollActivityCr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_activity_cr");

            entity.ToTable("cc_skvz_poll_activity_cr", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollActivityCr)
                .HasForeignKey<CcSkvzPollActivityCr>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_poll_activity_cr");
        });

        modelBuilder.Entity<CcSkvzPollActivityCrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_activity_crs");

            entity.ToTable("cc_skvz_poll_activity_crs", "dbo");

            entity.HasIndex(e => e.CriteriaActivityId, "idx_265534195");

            entity.HasIndex(e => e.ActivityResultId, "idx_3850800");

            entity.HasIndex(e => e.ModificationDate, "idx_601305850");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityResultId).HasColumnName("activity_result_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CriteriaActivityId).HasColumnName("criteria_activity_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcSkvzPollActivitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_activitys");

            entity.ToTable("cc_skvz_poll_activitys", "dbo");

            entity.HasIndex(e => e.ActivityId, "idx_367338160");

            entity.HasIndex(e => e.CuratorId, "idx_432218811");

            entity.HasIndex(e => e.DivId, "idx_44117140");

            entity.HasIndex(e => e.ModificationDate, "idx_619563935");

            entity.HasIndex(e => e.PollResultId, "idx_84886253");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CuratorId).HasColumnName("curator_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
        });

        modelBuilder.Entity<CcSkvzPollKvzPersonResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_kvz_person_result");

            entity.ToTable("cc_skvz_poll_kvz_person_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollKvzPersonResult)
                .HasForeignKey<CcSkvzPollKvzPersonResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_poll_kvz_person_result");
        });

        modelBuilder.Entity<CcSkvzPollKvzPersonResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_kvz_person_results");

            entity.ToTable("cc_skvz_poll_kvz_person_results", "dbo");

            entity.HasIndex(e => e.UnplanComplete, "idx_100395579");

            entity.HasIndex(e => e.MovedTo, "idx_116145213");

            entity.HasIndex(e => e.ModificationDate, "idx_158443802");

            entity.HasIndex(e => e.ProfileResultId, "idx_161668536");

            entity.HasIndex(e => e.Sfr, "idx_169355854");

            entity.HasIndex(e => e.PollResultId, "idx_216432452");

            entity.HasIndex(e => e.FkdFdzResultId, "idx_31961043");

            entity.HasIndex(e => e.FnprResultId, "idx_349439117");

            entity.HasIndex(e => e.FrodResultId, "idx_351859708");

            entity.HasIndex(e => e.MovedMentoringTo, "idx_353816220");

            entity.HasIndex(e => e.SkvzActivity, "idx_35387457");

            entity.HasIndex(e => e.UtpApproved, "idx_358408246");

            entity.HasIndex(e => e.MovedStage, "idx_39254056");

            entity.HasIndex(e => e.KvzPersonArea, "idx_427923477");

            entity.HasIndex(e => e.IsUnplan, "idx_431752832");

            entity.HasIndex(e => e.SuccessorsResultId, "idx_466586271");

            entity.HasIndex(e => e.Fdz, "idx_476561685");

            entity.HasIndex(e => e.PersonId, "idx_531347064");

            entity.HasIndex(e => e.IsHistory, "idx_532915937");

            entity.HasIndex(e => e.PersonType, "idx_564854723");

            entity.HasIndex(e => e.Fkd, "idx_643365949");

            entity.HasIndex(e => e.MapSmallId, "idx_715079317");

            entity.HasIndex(e => e.MapBigId, "idx_721232338");

            entity.HasIndex(e => e.Frod, "idx_74855448");

            entity.HasIndex(e => e.Fnpr, "idx_775439202");

            entity.HasIndex(e => e.DivId, "idx_867730197");

            entity.HasIndex(e => e.StationBlockId, "idx_888945824");

            entity.HasIndex(e => e.MovedMentoringStage, "idx_896870849");

            entity.HasIndex(e => e.BpId, "idx_991069342");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.Fdz).HasColumnName("fdz");
            entity.Property(e => e.Fkd).HasColumnName("fkd");
            entity.Property(e => e.FkdFdzResultId).HasColumnName("fkd_fdz_result_id");
            entity.Property(e => e.Fnpr).HasColumnName("fnpr");
            entity.Property(e => e.FnprResultId).HasColumnName("fnpr_result_id");
            entity.Property(e => e.Frod).HasColumnName("frod");
            entity.Property(e => e.FrodResultId).HasColumnName("frod_result_id");
            entity.Property(e => e.IsHistory).HasColumnName("is_history");
            entity.Property(e => e.IsUnplan).HasColumnName("is_unplan");
            entity.Property(e => e.KvzPersonArea).HasColumnName("kvz_person_area");
            entity.Property(e => e.MapBigId).HasColumnName("map_big_id");
            entity.Property(e => e.MapSmallId).HasColumnName("map_small_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.MovedMentoringStage).HasColumnName("moved_mentoring_stage");
            entity.Property(e => e.MovedMentoringTo).HasColumnName("moved_mentoring_to");
            entity.Property(e => e.MovedStage).HasColumnName("moved_stage");
            entity.Property(e => e.MovedTo).HasColumnName("moved_to");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonType).HasColumnName("person_type");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
            entity.Property(e => e.ProfileResultId).HasColumnName("profile_result_id");
            entity.Property(e => e.Sfr).HasColumnName("sfr");
            entity.Property(e => e.SkvzActivity).HasColumnName("skvz_activity");
            entity.Property(e => e.StationBlockId).HasColumnName("station_block_id");
            entity.Property(e => e.SuccessorsResultId).HasColumnName("successors_result_id");
            entity.Property(e => e.UnplanComplete).HasColumnName("unplan_complete");
            entity.Property(e => e.UtpApproved).HasColumnName("utp_approved");
        });

        modelBuilder.Entity<CcSkvzPollSpFinalResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_sp_final_result");

            entity.ToTable("cc_skvz_poll_sp_final_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollSpFinalResult)
                .HasForeignKey<CcSkvzPollSpFinalResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_poll_sp_final_result");
        });

        modelBuilder.Entity<CcSkvzPollSpFinalResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_sp_final_results");

            entity.ToTable("cc_skvz_poll_sp_final_results", "dbo");

            entity.HasIndex(e => e.SpFirstResultId, "idx_47536358");

            entity.HasIndex(e => e.ModificationDate, "idx_510443869");

            entity.HasIndex(e => e.PollResultId, "idx_816872760");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
            entity.Property(e => e.SpFirstResultId).HasColumnName("sp_first_result_id");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstCr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_sp_first_cr");

            entity.ToTable("cc_skvz_poll_sp_first_cr", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollSpFirstCr)
                .HasForeignKey<CcSkvzPollSpFirstCr>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_poll_sp_first_cr");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstCrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_sp_first_crs");

            entity.ToTable("cc_skvz_poll_sp_first_crs", "dbo");

            entity.HasIndex(e => e.CriteriaActivityId, "idx_39066055");

            entity.HasIndex(e => e.ModificationDate, "idx_47088034");

            entity.HasIndex(e => e.SpFirstResultId, "idx_821544469");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CriteriaActivityId).HasColumnName("criteria_activity_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.SpFirstResultId).HasColumnName("sp_first_result_id");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_sp_first_result");

            entity.ToTable("cc_skvz_poll_sp_first_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzPollSpFirstResult)
                .HasForeignKey<CcSkvzPollSpFirstResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_poll_sp_first_result");
        });

        modelBuilder.Entity<CcSkvzPollSpFirstResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_poll_sp_first_results");

            entity.ToTable("cc_skvz_poll_sp_first_results", "dbo");

            entity.HasIndex(e => e.DivId, "idx_305023496");

            entity.HasIndex(e => e.ModificationDate, "idx_811426722");

            entity.HasIndex(e => e.PollResultId, "idx_926351359");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollResultId).HasColumnName("poll_result_id");
        });

        modelBuilder.Entity<CcSkvzReadyReservFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_ready_reserv_factor");

            entity.ToTable("cc_skvz_ready_reserv_factor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzReadyReservFactor)
                .HasForeignKey<CcSkvzReadyReservFactor>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_ready_reserv_factor");
        });

        modelBuilder.Entity<CcSkvzReadyReservFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_ready_reserv_factors");

            entity.ToTable("cc_skvz_ready_reserv_factors", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_439675740");

            entity.HasIndex(e => e.Name, "idx_892827483");

            entity.HasIndex(e => e.Code, "idx_982516043");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzRiskFreePosFactor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_risk_free_pos_factor");

            entity.ToTable("cc_skvz_risk_free_pos_factor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzRiskFreePosFactor)
                .HasForeignKey<CcSkvzRiskFreePosFactor>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_risk_free_pos_factor");
        });

        modelBuilder.Entity<CcSkvzRiskFreePosFactors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_risk_free_pos_factors");

            entity.ToTable("cc_skvz_risk_free_pos_factors", "dbo");

            entity.HasIndex(e => e.Code, "idx_455406961");

            entity.HasIndex(e => e.Name, "idx_493629689");

            entity.HasIndex(e => e.ModificationDate, "idx_850174406");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_sp");

            entity.ToTable("cc_skvz_sp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzSp)
                .HasForeignKey<CcSkvzSp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_sp");
        });

        modelBuilder.Entity<CcSkvzSpActivityCr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_sp_activity_cr");

            entity.ToTable("cc_skvz_sp_activity_cr", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzSpActivityCr)
                .HasForeignKey<CcSkvzSpActivityCr>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_sp_activity_cr");
        });

        modelBuilder.Entity<CcSkvzSpActivityCrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_sp_activity_crs");

            entity.ToTable("cc_skvz_sp_activity_crs", "dbo");

            entity.HasIndex(e => e.SkvzSpId, "idx_243281801");

            entity.HasIndex(e => e.CriteriaActivityId, "idx_549156820");

            entity.HasIndex(e => e.ModificationDate, "idx_93991364");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CriteriaActivityId).HasColumnName("criteria_activity_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.SkvzSpId).HasColumnName("skvz_sp_id");
        });

        modelBuilder.Entity<CcSkvzSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_sps");

            entity.ToTable("cc_skvz_sps", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_322986858");

            entity.HasIndex(e => e.OrderFileId, "idx_460747710");

            entity.HasIndex(e => e.BpId, "idx_597200532");

            entity.HasIndex(e => e.DivId, "idx_8392291");

            entity.HasIndex(e => e.ActivityId, "idx_904272116");

            entity.HasIndex(e => e.DelegateId, "idx_979075177");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.DelegateId).HasColumnName("delegate_id");
            entity.Property(e => e.DivId).HasColumnName("div_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderFileId).HasColumnName("order_file_id");
        });

        modelBuilder.Entity<CcSkvzStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_station");

            entity.ToTable("cc_skvz_station", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzStation)
                .HasForeignKey<CcSkvzStation>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_station");
        });

        modelBuilder.Entity<CcSkvzStationBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_station_block");

            entity.ToTable("cc_skvz_station_block", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzStationBlock)
                .HasForeignKey<CcSkvzStationBlock>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_station_block");
        });

        modelBuilder.Entity<CcSkvzStationBlockType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_station_block_type");

            entity.ToTable("cc_skvz_station_block_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzStationBlockType)
                .HasForeignKey<CcSkvzStationBlockType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_station_block_type");
        });

        modelBuilder.Entity<CcSkvzStationBlockTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_station_block_types");

            entity.ToTable("cc_skvz_station_block_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_270159972");

            entity.HasIndex(e => e.Name, "idx_721574621");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzStationBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_station_blocks");

            entity.ToTable("cc_skvz_station_blocks", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_238280244");

            entity.HasIndex(e => e.StationId, "idx_882194424");

            entity.HasIndex(e => e.Name, "idx_910761246");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcSkvzStations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_stations");

            entity.ToTable("cc_skvz_stations", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_212549199");

            entity.HasIndex(e => e.UtpHeadId, "idx_300641966");

            entity.HasIndex(e => e.StationId, "idx_442588573");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ReactorType).HasColumnName("reactor_type");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.UtpHeadId).HasColumnName("utp_head_id");
        });

        modelBuilder.Entity<CcSkvzSuccessor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_successor");

            entity.ToTable("cc_skvz_successor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzSuccessor)
                .HasForeignKey<CcSkvzSuccessor>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_successor");
        });

        modelBuilder.Entity<CcSkvzSuccessors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_successors");

            entity.ToTable("cc_skvz_successors", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_188941613");

            entity.HasIndex(e => e.PersonId, "idx_387924119");

            entity.HasIndex(e => e.KvzPersonId, "idx_744198790");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.KvzPersonId).HasColumnName("kvz_person_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSkvzWgMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_wg_member");

            entity.ToTable("cc_skvz_wg_member", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzWgMember)
                .HasForeignKey<CcSkvzWgMember>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_wg_member");
        });

        modelBuilder.Entity<CcSkvzWgMemberToType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_wg_member_to_type");

            entity.ToTable("cc_skvz_wg_member_to_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzWgMemberToType)
                .HasForeignKey<CcSkvzWgMemberToType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_wg_member_to_type");
        });

        modelBuilder.Entity<CcSkvzWgMemberToTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_wg_member_to_types");

            entity.ToTable("cc_skvz_wg_member_to_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_423590646");

            entity.HasIndex(e => e.TypeId, "idx_468717666");

            entity.HasIndex(e => e.WgMemberId, "idx_869554763");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.WgMemberId).HasColumnName("wg_member_id");
        });

        modelBuilder.Entity<CcSkvzWgMemberType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_wg_member_type");

            entity.ToTable("cc_skvz_wg_member_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzWgMemberType)
                .HasForeignKey<CcSkvzWgMemberType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_wg_member_type");
        });

        modelBuilder.Entity<CcSkvzWgMemberTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_wg_member_types");

            entity.ToTable("cc_skvz_wg_member_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_418345035");

            entity.HasIndex(e => e.Name, "idx_618972565");

            entity.HasIndex(e => e.ModificationDate, "idx_828874961");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcSkvzWgMembers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_wg_members");

            entity.ToTable("cc_skvz_wg_members", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_625096674");

            entity.HasIndex(e => e.BpId, "idx_641575110");

            entity.HasIndex(e => e.PersonId, "idx_945703090");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcSkvzYearPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_year_plan");

            entity.ToTable("cc_skvz_year_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzYearPlan)
                .HasForeignKey<CcSkvzYearPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_year_plan");
        });

        modelBuilder.Entity<CcSkvzYearPlanEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_year_plan_event");

            entity.ToTable("cc_skvz_year_plan_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcSkvzYearPlanEvent)
                .HasForeignKey<CcSkvzYearPlanEvent>(d => d.Id)
                .HasConstraintName("fk_objects_cc_skvz_year_plan_event");
        });

        modelBuilder.Entity<CcSkvzYearPlanEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_year_plan_events");

            entity.ToTable("cc_skvz_year_plan_events", "dbo");

            entity.HasIndex(e => e.Name, "idx_309329761");

            entity.HasIndex(e => e.OrderNum, "idx_386830100");

            entity.HasIndex(e => e.IsPlan, "idx_464525780");

            entity.HasIndex(e => e.ModificationDate, "idx_5886027");

            entity.HasIndex(e => e.Code, "idx_853423381");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.IsPlan).HasColumnName("is_plan");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OrderNum).HasColumnName("order_num");
        });

        modelBuilder.Entity<CcSkvzYearPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_skvz_year_plans");

            entity.ToTable("cc_skvz_year_plans", "dbo");

            entity.HasIndex(e => e.YearPlanEventId, "idx_378700562");

            entity.HasIndex(e => e.FactDate, "idx_437517899");

            entity.HasIndex(e => e.BpId, "idx_575951519");

            entity.HasIndex(e => e.PlanDate, "idx_659065289");

            entity.HasIndex(e => e.ModificationDate, "idx_685167003");

            entity.HasIndex(e => e.PlanFileId, "idx_972082018");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PlanDate).HasColumnName("plan_date");
            entity.Property(e => e.PlanFileId).HasColumnName("plan_file_id");
            entity.Property(e => e.YearPlanEventId).HasColumnName("year_plan_event_id");
        });

        modelBuilder.Entity<CcStaffevalAgentManagment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_agent_managment");

            entity.ToTable("cc_staffeval_agent_managment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalAgentManagment)
                .HasForeignKey<CcStaffevalAgentManagment>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_agent_managment");
        });

        modelBuilder.Entity<CcStaffevalAgentManagments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_agent_managments");

            entity.ToTable("cc_staffeval_agent_managments", "dbo");

            entity.HasIndex(e => e.Period, "idx_322153383");

            entity.HasIndex(e => e.AgentLink, "idx_327631233");

            entity.HasIndex(e => e.AgentName, "idx_449131488");

            entity.HasIndex(e => e.TriggerType, "idx_459131399");

            entity.HasIndex(e => e.ModificationDate, "idx_873556416");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AgentLink).HasColumnName("agent_link");
            entity.Property(e => e.AgentName).HasColumnName("agent_name");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.TriggerType).HasColumnName("trigger_type");
        });

        modelBuilder.Entity<CcStaffevalAttestation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_attestation");

            entity.ToTable("cc_staffeval_attestation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalAttestation)
                .HasForeignKey<CcStaffevalAttestation>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_attestation");
        });

        modelBuilder.Entity<CcStaffevalAttestations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_attestations");

            entity.ToTable("cc_staffeval_attestations", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_209969171");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Correction).HasColumnName("correction");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateFactFrom).HasColumnName("date_fact_from");
            entity.Property(e => e.DateFactTo).HasColumnName("date_fact_to");
            entity.Property(e => e.DatePlan).HasColumnName("date_plan");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.OrderCorrection).HasColumnName("order_correction");
            entity.Property(e => e.OrderEvent).HasColumnName("order_event");
            entity.Property(e => e.OrderResults).HasColumnName("order_results");
            entity.Property(e => e.Report).HasColumnName("report");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcStaffevalColsCategorie>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_cols_categorie");

            entity.ToTable("cc_staffeval_cols_categorie", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalColsCategorie)
                .HasForeignKey<CcStaffevalColsCategorie>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_cols_categorie");
        });

        modelBuilder.Entity<CcStaffevalColsCategories>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_cols_categories");

            entity.ToTable("cc_staffeval_cols_categories", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_458019162");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalCorrection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_correction");

            entity.ToTable("cc_staffeval_correction", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalCorrection)
                .HasForeignKey<CcStaffevalCorrection>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_correction");
        });

        modelBuilder.Entity<CcStaffevalCorrectionDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_correction_div");

            entity.ToTable("cc_staffeval_correction_div", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalCorrectionDiv)
                .HasForeignKey<CcStaffevalCorrectionDiv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_correction_div");
        });

        modelBuilder.Entity<CcStaffevalCorrectionDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_correction_divs");

            entity.ToTable("cc_staffeval_correction_divs", "dbo");

            entity.HasIndex(e => e.Name, "idx_416506667");

            entity.HasIndex(e => e.ModificationDate, "idx_762171013");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalCorrections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_corrections");

            entity.ToTable("cc_staffeval_corrections", "dbo");

            entity.HasIndex(e => e.LastEditionDate, "idx_127397978");

            entity.HasIndex(e => e.Status, "idx_180789658");

            entity.HasIndex(e => e.PointName, "idx_287933291");

            entity.HasIndex(e => e.ContentOfViolation, "idx_374640791");

            entity.HasIndex(e => e.Date, "idx_407703751");

            entity.HasIndex(e => e.CreatorId, "idx_447157480");

            entity.HasIndex(e => e.StationId, "idx_456122143");

            entity.HasIndex(e => e.CheckedObject, "idx_545061943");

            entity.HasIndex(e => e.ControlObject, "idx_68213435");

            entity.HasIndex(e => e.ModificationDate, "idx_696418765");

            entity.HasIndex(e => e.LastEditorId, "idx_728301618");

            entity.HasIndex(e => e.Responsible, "idx_754511650");

            entity.HasIndex(e => e.OrderCorrection, "idx_756732395");

            entity.HasIndex(e => e.CreationDate, "idx_812164062");

            entity.HasIndex(e => e.OrderResult, "idx_88864817");

            entity.HasIndex(e => e.CheckName, "idx_914445106");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CheckName).HasColumnName("check_name");
            entity.Property(e => e.CheckedObject).HasColumnName("checked_object");
            entity.Property(e => e.ContentOfViolation).HasColumnName("content_of_violation");
            entity.Property(e => e.ControlObject).HasColumnName("control_object");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.LastEditionDate).HasColumnName("last_edition_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderCorrection).HasColumnName("order_correction");
            entity.Property(e => e.OrderResult).HasColumnName("order_result");
            entity.Property(e => e.PointName).HasColumnName("point_name");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcStaffevalCurator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_curator");

            entity.ToTable("cc_staffeval_curator", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalCurator)
                .HasForeignKey<CcStaffevalCurator>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_curator");
        });

        modelBuilder.Entity<CcStaffevalCurators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_curators");

            entity.ToTable("cc_staffeval_curators", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_570016015");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.StationId).HasColumnName("station_id");
        });

        modelBuilder.Entity<CcStaffevalDirection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_direction");

            entity.ToTable("cc_staffeval_direction", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalDirection)
                .HasForeignKey<CcStaffevalDirection>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_direction");
        });

        modelBuilder.Entity<CcStaffevalDirections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_directions");

            entity.ToTable("cc_staffeval_directions", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_268761007");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Parent).HasColumnName("parent");
        });

        modelBuilder.Entity<CcStaffevalDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_document");

            entity.ToTable("cc_staffeval_document", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalDocument)
                .HasForeignKey<CcStaffevalDocument>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_document");
        });

        modelBuilder.Entity<CcStaffevalDocumentCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_document_code");

            entity.ToTable("cc_staffeval_document_code", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalDocumentCode)
                .HasForeignKey<CcStaffevalDocumentCode>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_document_code");
        });

        modelBuilder.Entity<CcStaffevalDocumentCodes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_document_codes");

            entity.ToTable("cc_staffeval_document_codes", "dbo");

            entity.HasIndex(e => e.DocumentId, "idx_118119848");

            entity.HasIndex(e => e.NameDocument, "idx_536738319");

            entity.HasIndex(e => e.ModificationDate, "idx_552788287");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NameDocument).HasColumnName("name_document");
        });

        modelBuilder.Entity<CcStaffevalDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_documents");

            entity.ToTable("cc_staffeval_documents", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_115116217");

            entity.HasIndex(e => e.StatusId, "idx_589915093");

            entity.HasIndex(e => e.Requisites, "idx_680414056");

            entity.HasIndex(e => e.Name, "idx_822835475");

            entity.HasIndex(e => e.DocumentProcessed, "idx_948614268");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalEduHour>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_edu_hour");

            entity.ToTable("cc_staffeval_edu_hour", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalEduHour)
                .HasForeignKey<CcStaffevalEduHour>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_edu_hour");
        });

        modelBuilder.Entity<CcStaffevalEduHours>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_edu_hours");

            entity.ToTable("cc_staffeval_edu_hours", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_577300151");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Categorie).HasColumnName("categorie");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.VolumeOu).HasColumnName("volume_ou");
            entity.Property(e => e.VolumeSp).HasColumnName("volume_sp");
            entity.Property(e => e.VolumeSs).HasColumnName("volume_ss");
            entity.Property(e => e.VolumeTso).HasColumnName("volume_tso");
            entity.Property(e => e.VolumeUtp).HasColumnName("volume_utp");
        });

        modelBuilder.Entity<CcStaffevalFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_file");

            entity.ToTable("cc_staffeval_file", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalFile)
                .HasForeignKey<CcStaffevalFile>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_file");
        });

        modelBuilder.Entity<CcStaffevalFiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_files");

            entity.ToTable("cc_staffeval_files", "dbo");

            entity.HasIndex(e => e.FileType, "idx_197165734");

            entity.HasIndex(e => e.Type, "idx_231569452");

            entity.HasIndex(e => e.FileId, "idx_363329729");

            entity.HasIndex(e => e.FileName, "idx_677498227");

            entity.HasIndex(e => e.ModificationDate, "idx_793587843");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.FileName).HasColumnName("file_name");
            entity.Property(e => e.FileType).HasColumnName("file_type");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalFirstDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_first_document");

            entity.ToTable("cc_staffeval_first_document", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalFirstDocument)
                .HasForeignKey<CcStaffevalFirstDocument>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_first_document");
        });

        modelBuilder.Entity<CcStaffevalFirstDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_first_documents");

            entity.ToTable("cc_staffeval_first_documents", "dbo");

            entity.HasIndex(e => e.InstructorId, "idx_209949850");

            entity.HasIndex(e => e.Requisites, "idx_330359627");

            entity.HasIndex(e => e.Parent, "idx_617188521");

            entity.HasIndex(e => e.ModificationDate, "idx_638769426");

            entity.HasIndex(e => e.Name, "idx_672909592");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalFirstQual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_first_qual");

            entity.ToTable("cc_staffeval_first_qual", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalFirstQual)
                .HasForeignKey<CcStaffevalFirstQual>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_first_qual");
        });

        modelBuilder.Entity<CcStaffevalFirstQuals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_first_quals");

            entity.ToTable("cc_staffeval_first_quals", "dbo");

            entity.HasIndex(e => e.InternshipDocument, "idx_124114014");

            entity.HasIndex(e => e.InstructorEmail, "idx_125972467");

            entity.HasIndex(e => e.Admittance, "idx_175738026");

            entity.HasIndex(e => e.LearningAssessment, "idx_204232666");

            entity.HasIndex(e => e.LastEditDate, "idx_214233918");

            entity.HasIndex(e => e.Category2, "idx_233781134");

            entity.HasIndex(e => e.OrderOnTraining, "idx_243314793");

            entity.HasIndex(e => e.Position, "idx_267415646");

            entity.HasIndex(e => e.Internship, "idx_315901211");

            entity.HasIndex(e => e.DuplicationDocument, "idx_333355155");

            entity.HasIndex(e => e.CreatorId, "idx_345752397");

            entity.HasIndex(e => e.DateStart, "idx_347463135");

            entity.HasIndex(e => e.Instructor, "idx_4031178");

            entity.HasIndex(e => e.StationId, "idx_404092314");

            entity.HasIndex(e => e.ModificationDate, "idx_41682506");

            entity.HasIndex(e => e.Category1, "idx_422150086");

            entity.HasIndex(e => e.IppdDocument, "idx_463101429");

            entity.HasIndex(e => e.ParentId, "idx_469648766");

            entity.HasIndex(e => e.TheoreticalTraining, "idx_508011084");

            entity.HasIndex(e => e.LastEditorId, "idx_604761734");

            entity.HasIndex(e => e.DateFinish, "idx_642485409");

            entity.HasIndex(e => e.Type, "idx_679863854");

            entity.HasIndex(e => e.ResponsibilitiesSubstitution, "idx_736200714");

            entity.HasIndex(e => e.Result, "idx_767472122");

            entity.HasIndex(e => e.Learning, "idx_791572953");

            entity.HasIndex(e => e.Location, "idx_817181575");

            entity.HasIndex(e => e.CreationDate, "idx_830141815");

            entity.HasIndex(e => e.PracticalTraining, "idx_941140813");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Admittance).HasColumnName("admittance");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category_1");
            entity.Property(e => e.Category2).HasColumnName("category_2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateFinish).HasColumnName("date_finish");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.DuplicationDocument).HasColumnName("duplication_document");
            entity.Property(e => e.Instructor).HasColumnName("instructor");
            entity.Property(e => e.InstructorEmail).HasColumnName("instructor_email");
            entity.Property(e => e.Internship).HasColumnName("internship");
            entity.Property(e => e.InternshipDocument).HasColumnName("internship_document");
            entity.Property(e => e.IppdDocument).HasColumnName("ippd_document");
            entity.Property(e => e.LastEditDate).HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Learning).HasColumnName("learning");
            entity.Property(e => e.LearningAssessment).HasColumnName("learning_assessment");
            entity.Property(e => e.Location).HasColumnName("location");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderOnTraining).HasColumnName("order_on_training");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.PracticalTraining).HasColumnName("practical_training");
            entity.Property(e => e.ResponsibilitiesSubstitution).HasColumnName("responsibilities_substitution");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.TheoreticalTraining).HasColumnName("theoretical_training");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalInsPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ins_period");

            entity.ToTable("cc_staffeval_ins_period", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalInsPeriod)
                .HasForeignKey<CcStaffevalInsPeriod>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ins_period");
        });

        modelBuilder.Entity<CcStaffevalInsPeriods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ins_periods");

            entity.ToTable("cc_staffeval_ins_periods", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_657568725");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AddDate).HasColumnName("add_date");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrderFile).HasColumnName("order_file");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<CcStaffevalInsQualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ins_qualification");

            entity.ToTable("cc_staffeval_ins_qualification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalInsQualification)
                .HasForeignKey<CcStaffevalInsQualification>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ins_qualification");
        });

        modelBuilder.Entity<CcStaffevalInsQualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ins_qualifications");

            entity.ToTable("cc_staffeval_ins_qualifications", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_771955014");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnotherPlace).HasColumnName("another_place");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Course).HasColumnName("course");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Num).HasColumnName("num");
            entity.Property(e => e.Org).HasColumnName("org");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UtpDivision).HasColumnName("utp_division");
        });

        modelBuilder.Entity<CcStaffevalInstructor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_instructor");

            entity.ToTable("cc_staffeval_instructor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalInstructor)
                .HasForeignKey<CcStaffevalInstructor>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_instructor");
        });

        modelBuilder.Entity<CcStaffevalInstructors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_instructors");

            entity.ToTable("cc_staffeval_instructors", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_200020322");

            entity.HasIndex(e => e.Code, "idx_46857724");

            entity.HasIndex(e => e.StationId, "idx_840370265");

            entity.HasIndex(e => e.ModificationDate, "idx_968316423");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NotInState).HasColumnName("not_in_state");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartWorkingDate).HasColumnName("start_working_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.UtpDivision).HasColumnName("utp_division");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsPerekr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_log_agnts_perekr");

            entity.ToTable("cc_staffeval_log_agnts_perekr", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalLogAgntsPerekr)
                .HasForeignKey<CcStaffevalLogAgntsPerekr>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_log_agnts_perekr");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsPerekrs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_log_agnts_perekrs");

            entity.ToTable("cc_staffeval_log_agnts_perekrs", "dbo");

            entity.HasIndex(e => e.Agent4, "idx_105119881");

            entity.HasIndex(e => e.Agent3, "idx_121008067");

            entity.HasIndex(e => e.Agent5Visitor, "idx_124555187");

            entity.HasIndex(e => e.LastSendDate6Self, "idx_333783484");

            entity.HasIndex(e => e.Agent6Visitor, "idx_394666365");

            entity.HasIndex(e => e.SelfRatingIsSend, "idx_402499657");

            entity.HasIndex(e => e.VisitingRatingIsSend, "idx_463526210");

            entity.HasIndex(e => e.LastSendDate6Visitor, "idx_497734487");

            entity.HasIndex(e => e.LastSendDate5Visitor, "idx_596808939");

            entity.HasIndex(e => e.Agent6Self, "idx_620116778");

            entity.HasIndex(e => e.StaffevalPgPerekrest, "idx_652728601");

            entity.HasIndex(e => e.LastSendDate3, "idx_65376265");

            entity.HasIndex(e => e.ModificationDate, "idx_668499764");

            entity.HasIndex(e => e.LastSendDate2, "idx_684878888");

            entity.HasIndex(e => e.Agent2, "idx_705133955");

            entity.HasIndex(e => e.LastSendDate1, "idx_733632908");

            entity.HasIndex(e => e.Agent1, "idx_751097799");

            entity.HasIndex(e => e.LastSendDate5Self, "idx_770359322");

            entity.HasIndex(e => e.Agent5Self, "idx_894918680");

            entity.HasIndex(e => e.LastSendDate4, "idx_993828355");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.Agent5Self).HasColumnName("agent_5_self");
            entity.Property(e => e.Agent5Visitor).HasColumnName("agent_5_visitor");
            entity.Property(e => e.Agent6Self).HasColumnName("agent_6_self");
            entity.Property(e => e.Agent6Visitor).HasColumnName("agent_6_visitor");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.LastSendDate1).HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2).HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3).HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4).HasColumnName("last_send_date_4");
            entity.Property(e => e.LastSendDate5Self).HasColumnName("last_send_date_5_self");
            entity.Property(e => e.LastSendDate5Visitor).HasColumnName("last_send_date_5_visitor");
            entity.Property(e => e.LastSendDate6Self).HasColumnName("last_send_date_6_self");
            entity.Property(e => e.LastSendDate6Visitor).HasColumnName("last_send_date_6_visitor");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.SelfRatingIsSend).HasColumnName("self_rating_is_send");
            entity.Property(e => e.StaffevalPgPerekrest).HasColumnName("staffeval_pg_perekrest");
            entity.Property(e => e.VisitingRatingIsSend).HasColumnName("visiting_rating_is_send");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsQual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_log_agnts_qual");

            entity.ToTable("cc_staffeval_log_agnts_qual", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalLogAgntsQual)
                .HasForeignKey<CcStaffevalLogAgntsQual>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_log_agnts_qual");
        });

        modelBuilder.Entity<CcStaffevalLogAgntsQuals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_log_agnts_quals");

            entity.ToTable("cc_staffeval_log_agnts_quals", "dbo");

            entity.HasIndex(e => e.StaffevalQualification, "idx_117730698");

            entity.HasIndex(e => e.Agent2, "idx_162710577");

            entity.HasIndex(e => e.LastSendDate1, "idx_209908735");

            entity.HasIndex(e => e.Agent4, "idx_285844363");

            entity.HasIndex(e => e.Agent3, "idx_298730692");

            entity.HasIndex(e => e.LastSendDate3, "idx_341882047");

            entity.HasIndex(e => e.Agent5, "idx_439483258");

            entity.HasIndex(e => e.LastSendDate2, "idx_441386699");

            entity.HasIndex(e => e.ModificationDate, "idx_598739824");

            entity.HasIndex(e => e.LastSendDate6, "idx_604587507");

            entity.HasIndex(e => e.Agent7, "idx_708468678");

            entity.HasIndex(e => e.LastSendDate5, "idx_830720032");

            entity.HasIndex(e => e.LastSendDate7, "idx_880951084");

            entity.HasIndex(e => e.LastSendDate4, "idx_903812291");

            entity.HasIndex(e => e.Agent1, "idx_980943330");

            entity.HasIndex(e => e.Agent6, "idx_999243061");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.Agent5).HasColumnName("agent_5");
            entity.Property(e => e.Agent6).HasColumnName("agent_6");
            entity.Property(e => e.Agent7).HasColumnName("agent_7");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.LastSendDate1).HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2).HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3).HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4).HasColumnName("last_send_date_4");
            entity.Property(e => e.LastSendDate5).HasColumnName("last_send_date_5");
            entity.Property(e => e.LastSendDate6).HasColumnName("last_send_date_6");
            entity.Property(e => e.LastSendDate7).HasColumnName("last_send_date_7");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StaffevalQualification).HasColumnName("staffeval_qualification");
        });

        modelBuilder.Entity<CcStaffevalPgPerekrest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_pg_perekrest");

            entity.ToTable("cc_staffeval_pg_perekrest", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPgPerekrest)
                .HasForeignKey<CcStaffevalPgPerekrest>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_pg_perekrest");
        });

        modelBuilder.Entity<CcStaffevalPgPerekrests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_pg_perekrests");

            entity.ToTable("cc_staffeval_pg_perekrests", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_509540675");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.ChangeNumber).HasColumnName("change_number");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ColsCategory).HasColumnName("cols_category");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.FactDate).HasColumnName("fact_date");
            entity.Property(e => e.GuestMark).HasColumnName("guest_mark");
            entity.Property(e => e.GuestUtpDivision).HasColumnName("guest_utp_division");
            entity.Property(e => e.InsUtpDivision).HasColumnName("ins_utp_division");
            entity.Property(e => e.Instructor).HasColumnName("instructor");
            entity.Property(e => e.InstructorGuest).HasColumnName("instructor_guest");
            entity.Property(e => e.InstructorMark).HasColumnName("instructor_mark");
            entity.Property(e => e.Ishappened).HasColumnName("ishappened");
            entity.Property(e => e.LearningAssessment).HasColumnName("learning_assessment");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollPdf).HasColumnName("poll_pdf");
            entity.Property(e => e.Programm).HasColumnName("programm");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.SelfRating).HasColumnName("self_rating");
            entity.Property(e => e.SendDateSelfRating).HasColumnName("send_date_self_rating");
            entity.Property(e => e.SendDateVisitorRating).HasColumnName("send_date_visitor_rating");
            entity.Property(e => e.SpId).HasColumnName("sp_id");
            entity.Property(e => e.SpRukId).HasColumnName("sp_ruk_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Theme).HasColumnName("theme");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.VisitType).HasColumnName("visit_type");
            entity.Property(e => e.VisitorRating).HasColumnName("visitor_rating");
        });

        modelBuilder.Entity<CcStaffevalPollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_poll_procedure");

            entity.ToTable("cc_staffeval_poll_procedure", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollProcedure)
                .HasForeignKey<CcStaffevalPollProcedure>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_poll_procedure");
        });

        modelBuilder.Entity<CcStaffevalPollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_poll_procedures");

            entity.ToTable("cc_staffeval_poll_procedures", "dbo");

            entity.HasIndex(e => e.CreatorId, "idx_202462319");

            entity.HasIndex(e => e.StationId, "idx_305659115");

            entity.HasIndex(e => e.ModificationDate, "idx_455988731");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BpId).HasColumnName("bp_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.PollProcessId).HasColumnName("poll_process_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcStaffevalPollsItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_item");

            entity.ToTable("cc_staffeval_polls_item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsItem)
                .HasForeignKey<CcStaffevalPollsItem>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_polls_item");
        });

        modelBuilder.Entity<CcStaffevalPollsItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_items");

            entity.ToTable("cc_staffeval_polls_items", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_294182783");

            entity.HasIndex(e => e.Code, "idx_95372841");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.IsRequired).HasColumnName("is_required");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Questions).HasColumnName("questions");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalPollsPUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_p_user");

            entity.ToTable("cc_staffeval_polls_p_user", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsPUser)
                .HasForeignKey<CcStaffevalPollsPUser>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_polls_p_user");
        });

        modelBuilder.Entity<CcStaffevalPollsPUsers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_p_users");

            entity.ToTable("cc_staffeval_polls_p_users", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_853944008");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.LastSendDate).HasColumnName("last_send_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.SendCounter).HasColumnName("send_counter");
            entity.Property(e => e.SendDate).HasColumnName("send_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalPollsResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_result");

            entity.ToTable("cc_staffeval_polls_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsResult)
                .HasForeignKey<CcStaffevalPollsResult>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_polls_result");
        });

        modelBuilder.Entity<CcStaffevalPollsResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_results");

            entity.ToTable("cc_staffeval_polls_results", "dbo");

            entity.HasIndex(e => e.StationId, "idx_238874077");

            entity.HasIndex(e => e.ModificationDate, "idx_627352509");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalPollsType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_type");

            entity.ToTable("cc_staffeval_polls_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPollsType)
                .HasForeignKey<CcStaffevalPollsType>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_polls_type");
        });

        modelBuilder.Entity<CcStaffevalPollsTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_polls_types");

            entity.ToTable("cc_staffeval_polls_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_54317183");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_position");

            entity.ToTable("cc_staffeval_position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPosition)
                .HasForeignKey<CcStaffevalPosition>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_position");
        });

        modelBuilder.Entity<CcStaffevalPositionCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_position_ca");

            entity.ToTable("cc_staffeval_position_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPositionCa)
                .HasForeignKey<CcStaffevalPositionCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_position_ca");
        });

        modelBuilder.Entity<CcStaffevalPositionCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_position_cas");

            entity.ToTable("cc_staffeval_position_cas", "dbo");

            entity.HasIndex(e => e.LastEditorId, "idx_121674327");

            entity.HasIndex(e => e.CreationDate, "idx_288734704");

            entity.HasIndex(e => e.ModificationDate, "idx_322032831");

            entity.HasIndex(e => e.Name, "idx_440886004");

            entity.HasIndex(e => e.LastEditDate, "idx_633639327");

            entity.HasIndex(e => e.CreatorId, "idx_669151674");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.LastEditDate).HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_positions");

            entity.ToTable("cc_staffeval_positions", "dbo");

            entity.HasIndex(e => e.DivisionName, "idx_12575110");

            entity.HasIndex(e => e.NameId, "idx_219653617");

            entity.HasIndex(e => e.LastEditorId, "idx_261414707");

            entity.HasIndex(e => e.CreationDate, "idx_262122421");

            entity.HasIndex(e => e.ModificationDate, "idx_428184794");

            entity.HasIndex(e => e.SubdivisionId, "idx_437703733");

            entity.HasIndex(e => e.LastEditionDate, "idx_498631860");

            entity.HasIndex(e => e.Name, "idx_641091628");

            entity.HasIndex(e => e.NameCa, "idx_667258339");

            entity.HasIndex(e => e.DivisionId, "idx_677150216");

            entity.HasIndex(e => e.StationId, "idx_691517511");

            entity.HasIndex(e => e.SubdivisionName, "idx_778831074");

            entity.HasIndex(e => e.CreatorId, "idx_843378306");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DivisionId).HasColumnName("division_id");
            entity.Property(e => e.DivisionName).HasColumnName("division_name");
            entity.Property(e => e.LastEditionDate).HasColumnName("last_edition_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NameCa).HasColumnName("name_ca");
            entity.Property(e => e.NameId).HasColumnName("name_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName).HasColumnName("subdivision_name");
        });

        modelBuilder.Entity<CcStaffevalPpdCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_ca");

            entity.ToTable("cc_staffeval_ppd_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdCa)
                .HasForeignKey<CcStaffevalPpdCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppd_ca");
        });

        modelBuilder.Entity<CcStaffevalPpdCaFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_ca_first_plan");

            entity.ToTable("cc_staffeval_ppd_ca_first_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdCaFirstPlan)
                .HasForeignKey<CcStaffevalPpdCaFirstPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppd_ca_first_plan");
        });

        modelBuilder.Entity<CcStaffevalPpdCaFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_ca_first_plans");

            entity.ToTable("cc_staffeval_ppd_ca_first_plans", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_413245491");

            entity.HasIndex(e => e.Parent, "idx_700528634");

            entity.HasIndex(e => e.Name, "idx_755151512");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalPpdCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_cas");

            entity.ToTable("cc_staffeval_ppd_cas", "dbo");

            entity.HasIndex(e => e.Name, "idx_776137245");

            entity.HasIndex(e => e.Requisites, "idx_785218463");

            entity.HasIndex(e => e.ModificationDate, "idx_931257797");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1).HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2).HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3).HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4).HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalPpdFixedCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_fixed_ca");

            entity.ToTable("cc_staffeval_ppd_fixed_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdFixedCa)
                .HasForeignKey<CcStaffevalPpdFixedCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppd_fixed_ca");
        });

        modelBuilder.Entity<CcStaffevalPpdFixedCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_fixed_cas");

            entity.ToTable("cc_staffeval_ppd_fixed_cas", "dbo");

            entity.HasIndex(e => e.Requisites, "idx_317409252");

            entity.HasIndex(e => e.ModificationDate, "idx_487326303");

            entity.HasIndex(e => e.Name, "idx_881291601");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalPpdSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_sp");

            entity.ToTable("cc_staffeval_ppd_sp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdSp)
                .HasForeignKey<CcStaffevalPpdSp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppd_sp");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_sp_first_plan");

            entity.ToTable("cc_staffeval_ppd_sp_first_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdSpFirstPlan)
                .HasForeignKey<CcStaffevalPpdSpFirstPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppd_sp_first_plan");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_sp_first_plans");

            entity.ToTable("cc_staffeval_ppd_sp_first_plans", "dbo");

            entity.HasIndex(e => e.InstructorId, "idx_419049430");

            entity.HasIndex(e => e.ModificationDate, "idx_458446216");

            entity.HasIndex(e => e.Name, "idx_744109818");

            entity.HasIndex(e => e.Parent, "idx_78619345");

            entity.HasIndex(e => e.Requisites, "idx_97360786");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFixed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_sp_fixed");

            entity.ToTable("cc_staffeval_ppd_sp_fixed", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpdSpFixed)
                .HasForeignKey<CcStaffevalPpdSpFixed>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppd_sp_fixed");
        });

        modelBuilder.Entity<CcStaffevalPpdSpFixeds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_sp_fixeds");

            entity.ToTable("cc_staffeval_ppd_sp_fixeds", "dbo");

            entity.HasIndex(e => e.StatusId, "idx_106284669");

            entity.HasIndex(e => e.DocumentProcessed, "idx_142391113");

            entity.HasIndex(e => e.Name, "idx_308554677");

            entity.HasIndex(e => e.ModificationDate, "idx_319708520");

            entity.HasIndex(e => e.Requisites, "idx_52666210");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalPpdSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppd_sps");

            entity.ToTable("cc_staffeval_ppd_sps", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_111017119");

            entity.HasIndex(e => e.Name, "idx_34498825");

            entity.HasIndex(e => e.DocumentProcessed, "idx_562514724");

            entity.HasIndex(e => e.StatusId, "idx_958832558");

            entity.HasIndex(e => e.Requisites, "idx_970588518");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1).HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2).HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3).HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4).HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalPpk>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppk");

            entity.ToTable("cc_staffeval_ppk", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpk)
                .HasForeignKey<CcStaffevalPpk>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppk");
        });

        modelBuilder.Entity<CcStaffevalPpkCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppk_ca");

            entity.ToTable("cc_staffeval_ppk_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpkCa)
                .HasForeignKey<CcStaffevalPpkCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppk_ca");
        });

        modelBuilder.Entity<CcStaffevalPpkCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppk_cas");

            entity.ToTable("cc_staffeval_ppk_cas", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_536666097");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditEnabled).HasColumnName("edit_enabled");
            entity.Property(e => e.EndYear).HasColumnName("end_year");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PositionCategory1).HasColumnName("position_category_1");
            entity.Property(e => e.PositionCategory2).HasColumnName("position_category_2");
            entity.Property(e => e.PpkLocation).HasColumnName("ppk_location");
            entity.Property(e => e.Rostehnadzor).HasColumnName("rostehnadzor");
            entity.Property(e => e.SpResponsible).HasColumnName("sp_responsible");
            entity.Property(e => e.StartYear).HasColumnName("start_year");
            entity.Property(e => e.StationsListPpk).HasColumnName("stations_list_ppk");
            entity.Property(e => e.TheoreticalHours).HasColumnName("theoretical_hours");
        });

        modelBuilder.Entity<CcStaffevalPpkSpFromCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppk_sp_from_ca");

            entity.ToTable("cc_staffeval_ppk_sp_from_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalPpkSpFromCa)
                .HasForeignKey<CcStaffevalPpkSpFromCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_ppk_sp_from_ca");
        });

        modelBuilder.Entity<CcStaffevalPpkSpFromCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppk_sp_from_cas");

            entity.ToTable("cc_staffeval_ppk_sp_from_cas", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_659606915");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.InstructionHours).HasColumnName("instruction_hours");
            entity.Property(e => e.InternshipHours).HasColumnName("internship_hours");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.OrgsRate).HasColumnName("orgs_rate");
            entity.Property(e => e.PositionName).HasColumnName("position_name");
            entity.Property(e => e.PpkCaId).HasColumnName("ppk_ca_id");
            entity.Property(e => e.PracticalHours).HasColumnName("practical_hours");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.SpList).HasColumnName("sp_list");
            entity.Property(e => e.StaffQty).HasColumnName("staff_qty");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.TrainingHours).HasColumnName("training_hours");
        });

        modelBuilder.Entity<CcStaffevalPpks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_ppks");

            entity.ToTable("cc_staffeval_ppks", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_921260689");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnketIsOverdue).HasColumnName("anket_is_overdue");
            entity.Property(e => e.AnketIsOverdueSendDate).HasColumnName("anket_is_overdue_send_date");
            entity.Property(e => e.AnketIsSend).HasColumnName("anket_is_send");
            entity.Property(e => e.AnketSendDate).HasColumnName("anket_send_date");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EndYear).HasColumnName("end_year");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FioResponsible).HasColumnName("fio_responsible");
            entity.Property(e => e.InstructionHours).HasColumnName("instruction_hours");
            entity.Property(e => e.InternshipHours).HasColumnName("internship_hours");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PositionsName).HasColumnName("positions_name");
            entity.Property(e => e.PpkCaId).HasColumnName("ppk_ca_id");
            entity.Property(e => e.PpkLocation).HasColumnName("ppk_location");
            entity.Property(e => e.PracticalHours).HasColumnName("practical_hours");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.Rostehnadzor).HasColumnName("rostehnadzor");
            entity.Property(e => e.SpForPpk).HasColumnName("sp_for_ppk");
            entity.Property(e => e.SpReponsibleSupport).HasColumnName("sp_reponsible_support");
            entity.Property(e => e.SpResponsibleDev).HasColumnName("sp_responsible_dev");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StartYear).HasColumnName("start_year");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.TheoreticalHours).HasColumnName("theoretical_hours");
            entity.Property(e => e.TrainingHours).HasColumnName("training_hours");
        });

        modelBuilder.Entity<CcStaffevalProcessName>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_process_name");

            entity.ToTable("cc_staffeval_process_name", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalProcessName)
                .HasForeignKey<CcStaffevalProcessName>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_process_name");
        });

        modelBuilder.Entity<CcStaffevalProcessNames>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_process_names");

            entity.ToTable("cc_staffeval_process_names", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_153067299");

            entity.HasIndex(e => e.Name, "idx_372308386");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalQualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_qualification");

            entity.ToTable("cc_staffeval_qualification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalQualification)
                .HasForeignKey<CcStaffevalQualification>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_qualification");
        });

        modelBuilder.Entity<CcStaffevalQualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_qualifications");

            entity.ToTable("cc_staffeval_qualifications", "dbo");

            entity.HasIndex(e => e.Instructor, "idx_105055079");

            entity.HasIndex(e => e.StationId, "idx_157291807");

            entity.HasIndex(e => e.LastEditorId, "idx_208326822");

            entity.HasIndex(e => e.Learning, "idx_401102095");

            entity.HasIndex(e => e.ResultId, "idx_427455980");

            entity.HasIndex(e => e.Position, "idx_427858581");

            entity.HasIndex(e => e.VerificationEvent, "idx_591953899");

            entity.HasIndex(e => e.Poll, "idx_69244717");

            entity.HasIndex(e => e.Requisites, "idx_744936669");

            entity.HasIndex(e => e.Name, "idx_774214838");

            entity.HasIndex(e => e.ModificationDate, "idx_998416908");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditionalTraining).HasColumnName("additional_training");
            entity.Property(e => e.Admittance).HasColumnName("admittance");
            entity.Property(e => e.AdmittanceDate).HasColumnName("admittance_date");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.ContentCompliance).HasColumnName("content_compliance");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateFinish).HasColumnName("date_finish");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DuplicationDocument).HasColumnName("duplication_document");
            entity.Property(e => e.EducationResult).HasColumnName("education_result");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.Instructor).HasColumnName("instructor");
            entity.Property(e => e.Internship).HasColumnName("internship");
            entity.Property(e => e.InternshipDocument).HasColumnName("internship_document");
            entity.Property(e => e.IppdDocument).HasColumnName("ippd_document");
            entity.Property(e => e.LastEditDate).HasColumnName("last_edit_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Learning).HasColumnName("learning");
            entity.Property(e => e.LearningAssessment).HasColumnName("learning_assessment");
            entity.Property(e => e.Location).HasColumnName("location");
            entity.Property(e => e.MainPosition).HasColumnName("main_position");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OrderOnTraining).HasColumnName("order_on_training");
            entity.Property(e => e.OrganizationQuality).HasColumnName("organization_quality");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Permission).HasColumnName("permission");
            entity.Property(e => e.Poll).HasColumnName("poll");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Ppd).HasColumnName("ppd");
            entity.Property(e => e.PpdFile).HasColumnName("ppd_file");
            entity.Property(e => e.PracticalTraining).HasColumnName("practical_training");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusQual).HasColumnName("status_qual");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Suggestions).HasColumnName("suggestions");
            entity.Property(e => e.TheoreticalTraining).HasColumnName("theoretical_training");
            entity.Property(e => e.TimePercents).HasColumnName("time_percents");
            entity.Property(e => e.TotalTime).HasColumnName("total_time");
            entity.Property(e => e.TrainigPositions).HasColumnName("trainig_positions");
            entity.Property(e => e.TsoSupply).HasColumnName("tso_supply");
            entity.Property(e => e.UmdQuality).HasColumnName("umd_quality");
            entity.Property(e => e.UmdSupply).HasColumnName("umd_supply");
            entity.Property(e => e.VerificationEvent).HasColumnName("verification_event");
        });

        modelBuilder.Entity<CcStaffevalRmdCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_ca");

            entity.ToTable("cc_staffeval_rmd_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdCa)
                .HasForeignKey<CcStaffevalRmdCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_rmd_ca");
        });

        modelBuilder.Entity<CcStaffevalRmdCaFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_ca_first_plan");

            entity.ToTable("cc_staffeval_rmd_ca_first_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdCaFirstPlan)
                .HasForeignKey<CcStaffevalRmdCaFirstPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_rmd_ca_first_plan");
        });

        modelBuilder.Entity<CcStaffevalRmdCaFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_ca_first_plans");

            entity.ToTable("cc_staffeval_rmd_ca_first_plans", "dbo");

            entity.HasIndex(e => e.Parent, "idx_252451983");

            entity.HasIndex(e => e.Name, "idx_429314983");

            entity.HasIndex(e => e.ModificationDate, "idx_580890523");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalRmdCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_cas");

            entity.ToTable("cc_staffeval_rmd_cas", "dbo");

            entity.HasIndex(e => e.Name, "idx_547615926");

            entity.HasIndex(e => e.Requisites, "idx_664589143");

            entity.HasIndex(e => e.ModificationDate, "idx_921602982");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalRmdFixedCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_fixed_ca");

            entity.ToTable("cc_staffeval_rmd_fixed_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdFixedCa)
                .HasForeignKey<CcStaffevalRmdFixedCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_rmd_fixed_ca");
        });

        modelBuilder.Entity<CcStaffevalRmdFixedCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_fixed_cas");

            entity.ToTable("cc_staffeval_rmd_fixed_cas", "dbo");

            entity.HasIndex(e => e.Name, "idx_401080984");

            entity.HasIndex(e => e.Requisites, "idx_434917267");

            entity.HasIndex(e => e.ModificationDate, "idx_443824617");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalRmdSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_sp");

            entity.ToTable("cc_staffeval_rmd_sp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdSp)
                .HasForeignKey<CcStaffevalRmdSp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_rmd_sp");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_sp_first_plan");

            entity.ToTable("cc_staffeval_rmd_sp_first_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdSpFirstPlan)
                .HasForeignKey<CcStaffevalRmdSpFirstPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_rmd_sp_first_plan");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_sp_first_plans");

            entity.ToTable("cc_staffeval_rmd_sp_first_plans", "dbo");

            entity.HasIndex(e => e.Requisites, "idx_124535716");

            entity.HasIndex(e => e.Parent, "idx_200406317");

            entity.HasIndex(e => e.Name, "idx_345645341");

            entity.HasIndex(e => e.ModificationDate, "idx_386083881");

            entity.HasIndex(e => e.InstructorId, "idx_476497928");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFixed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_sp_fixed");

            entity.ToTable("cc_staffeval_rmd_sp_fixed", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRmdSpFixed)
                .HasForeignKey<CcStaffevalRmdSpFixed>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_rmd_sp_fixed");
        });

        modelBuilder.Entity<CcStaffevalRmdSpFixeds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_sp_fixeds");

            entity.ToTable("cc_staffeval_rmd_sp_fixeds", "dbo");

            entity.HasIndex(e => e.Requisites, "idx_227150139");

            entity.HasIndex(e => e.StatusId, "idx_306266583");

            entity.HasIndex(e => e.Name, "idx_328552865");

            entity.HasIndex(e => e.ModificationDate, "idx_47617451");

            entity.HasIndex(e => e.DocumentProcessed, "idx_51720181");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalRmdSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rmd_sps");

            entity.ToTable("cc_staffeval_rmd_sps", "dbo");

            entity.HasIndex(e => e.Requisites, "idx_144324617");

            entity.HasIndex(e => e.StatusId, "idx_640605110");

            entity.HasIndex(e => e.DocumentProcessed, "idx_909036029");

            entity.HasIndex(e => e.ModificationDate, "idx_966609505");

            entity.HasIndex(e => e.Name, "idx_966832103");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1).HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2).HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3).HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4).HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_room");

            entity.ToTable("cc_staffeval_room", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalRoom)
                .HasForeignKey<CcStaffevalRoom>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_room");
        });

        modelBuilder.Entity<CcStaffevalRooms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_rooms");

            entity.ToTable("cc_staffeval_rooms", "dbo");

            entity.HasIndex(e => e.EditDate, "idx_171185352");

            entity.HasIndex(e => e.CreationDate, "idx_218381977");

            entity.HasIndex(e => e.TypeProjector, "idx_224954596");

            entity.HasIndex(e => e.AreaRoom, "idx_260545144");

            entity.HasIndex(e => e.TypeBoard, "idx_262367280");

            entity.HasIndex(e => e.AudioSpeakers, "idx_278014161");

            entity.HasIndex(e => e.NumberOfSeats, "idx_324627878");

            entity.HasIndex(e => e.NumberBuilding, "idx_403165688");

            entity.HasIndex(e => e.Screen, "idx_440369647");

            entity.HasIndex(e => e.InPlan, "idx_45268773");

            entity.HasIndex(e => e.TypePc, "idx_512635605");

            entity.HasIndex(e => e.ModificationDate, "idx_640897767");

            entity.HasIndex(e => e.StationId, "idx_643181936");

            entity.HasIndex(e => e.NameUtp, "idx_662015392");

            entity.HasIndex(e => e.TypeMonitor, "idx_691597678");

            entity.HasIndex(e => e.NumberRoom, "idx_731907859");

            entity.HasIndex(e => e.FunctionRoom, "idx_804861445");

            entity.HasIndex(e => e.TypeRoom, "idx_872249885");

            entity.HasIndex(e => e.MagnetoMarkerBoard, "idx_876441817");

            entity.HasIndex(e => e.CreatorId, "idx_900801042");

            entity.HasIndex(e => e.LastEditorId, "idx_903741290");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaRoom).HasColumnName("area_room");
            entity.Property(e => e.AudioSpeakers).HasColumnName("audio_speakers");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.FunctionRoom).HasColumnName("function_room");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.MagnetoMarkerBoard).HasColumnName("magneto_marker_board");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NameUtp).HasColumnName("name_utp");
            entity.Property(e => e.NumberBuilding).HasColumnName("number_building");
            entity.Property(e => e.NumberOfSeats).HasColumnName("number_of_seats");
            entity.Property(e => e.NumberRoom).HasColumnName("number_room");
            entity.Property(e => e.Screen).HasColumnName("screen");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.TypeBoard).HasColumnName("type_board");
            entity.Property(e => e.TypeMonitor).HasColumnName("type_monitor");
            entity.Property(e => e.TypePc).HasColumnName("type_pc");
            entity.Property(e => e.TypeProjector).HasColumnName("type_projector");
            entity.Property(e => e.TypeRoom).HasColumnName("type_room");
        });

        modelBuilder.Entity<CcStaffevalStatusList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_status_list");

            entity.ToTable("cc_staffeval_status_list", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalStatusList)
                .HasForeignKey<CcStaffevalStatusList>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_status_list");
        });

        modelBuilder.Entity<CcStaffevalStatusLists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_status_lists");

            entity.ToTable("cc_staffeval_status_lists", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_202612281");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StatusName).HasColumnName("status_name");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CcStaffevalTestPollsP>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_test_polls_p");

            entity.ToTable("cc_staffeval_test_polls_p", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTestPollsP)
                .HasForeignKey<CcStaffevalTestPollsP>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_test_polls_p");
        });

        modelBuilder.Entity<CcStaffevalTestPollsPs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_test_polls_ps");

            entity.ToTable("cc_staffeval_test_polls_ps", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_796365589");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<CcStaffevalTestPollsR>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_test_polls_r");

            entity.ToTable("cc_staffeval_test_polls_r", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTestPollsR)
                .HasForeignKey<CcStaffevalTestPollsR>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_test_polls_r");
        });

        modelBuilder.Entity<CcStaffevalTestPollsRs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_test_polls_rs");

            entity.ToTable("cc_staffeval_test_polls_rs", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_563503433");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalTestPollsU>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_test_polls_u");

            entity.ToTable("cc_staffeval_test_polls_u", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTestPollsU)
                .HasForeignKey<CcStaffevalTestPollsU>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_test_polls_u");
        });

        modelBuilder.Entity<CcStaffevalTestPollsUs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_test_polls_us");

            entity.ToTable("cc_staffeval_test_polls_us", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_134464320");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ProcedureId).HasColumnName("procedure_id");
            entity.Property(e => e.SendDate).HasColumnName("send_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<CcStaffevalTso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_tso");

            entity.ToTable("cc_staffeval_tso", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTso)
                .HasForeignKey<CcStaffevalTso>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_tso");
        });

        modelBuilder.Entity<CcStaffevalTsos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_tsos");

            entity.ToTable("cc_staffeval_tsos", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_174551866");

            entity.HasIndex(e => e.PmtInformation, "idx_179066868");

            entity.HasIndex(e => e.TypeBrandNumTso, "idx_180259377");

            entity.HasIndex(e => e.TypeTso, "idx_193489755");

            entity.HasIndex(e => e.PersonalCategory, "idx_196336119");

            entity.HasIndex(e => e.LastEditorId, "idx_223202825");

            entity.HasIndex(e => e.InstallationLocation, "idx_252757180");

            entity.HasIndex(e => e.CreationDate, "idx_283454874");

            entity.HasIndex(e => e.InPlan, "idx_3448539");

            entity.HasIndex(e => e.PurposeTso, "idx_504145725");

            entity.HasIndex(e => e.EquipmentInformation, "idx_562227609");

            entity.HasIndex(e => e.InfoTso, "idx_640939156");

            entity.HasIndex(e => e.EditDate, "idx_659137770");

            entity.HasIndex(e => e.NameTso, "idx_744774659");

            entity.HasIndex(e => e.CreatorId, "idx_81320076");

            entity.HasIndex(e => e.StationId, "idx_83822924");

            entity.HasIndex(e => e.DatePmtInformation, "idx_850797188");

            entity.HasIndex(e => e.DateEquipmentInformation, "idx_861084088");

            entity.HasIndex(e => e.CommissioningDocument, "idx_93056813");

            entity.HasIndex(e => e.RequisitesProjectTso, "idx_932965535");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CommissioningDocument).HasColumnName("commissioning_document");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.DateEquipmentInformation).HasColumnName("date_equipment_information");
            entity.Property(e => e.DatePmtInformation).HasColumnName("date_pmt_information");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.EquipmentInformation).HasColumnName("equipment_information");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InfoTso).HasColumnName("info_tso");
            entity.Property(e => e.InstallationLocation).HasColumnName("installation_location");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.NameTso).HasColumnName("name_tso");
            entity.Property(e => e.PersonalCategory).HasColumnName("personal_category");
            entity.Property(e => e.PmtInformation).HasColumnName("pmt_information");
            entity.Property(e => e.PurposeTso).HasColumnName("purpose_tso");
            entity.Property(e => e.RequisitesProjectTso).HasColumnName("requisites_project_tso");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.TypeBrandNumTso).HasColumnName("type_brand_num_tso");
            entity.Property(e => e.TypeTso).HasColumnName("type_tso");
        });

        modelBuilder.Entity<CcStaffevalTypeRoom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_type_room");

            entity.ToTable("cc_staffeval_type_room", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTypeRoom)
                .HasForeignKey<CcStaffevalTypeRoom>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_type_room");
        });

        modelBuilder.Entity<CcStaffevalTypeRooms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_type_rooms");

            entity.ToTable("cc_staffeval_type_rooms", "dbo");

            entity.HasIndex(e => e.Name, "idx_266708375");

            entity.HasIndex(e => e.ModificationDate, "idx_665253362");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalTypeTso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_type_tso");

            entity.ToTable("cc_staffeval_type_tso", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalTypeTso)
                .HasForeignKey<CcStaffevalTypeTso>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_type_tso");
        });

        modelBuilder.Entity<CcStaffevalTypeTsos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_type_tsos");

            entity.ToTable("cc_staffeval_type_tsos", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_646605604");

            entity.HasIndex(e => e.Name, "idx_992680199");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalUmmCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_ca");

            entity.ToTable("cc_staffeval_umm_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmCa)
                .HasForeignKey<CcStaffevalUmmCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_umm_ca");
        });

        modelBuilder.Entity<CcStaffevalUmmCaFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_ca_first_plan");

            entity.ToTable("cc_staffeval_umm_ca_first_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmCaFirstPlan)
                .HasForeignKey<CcStaffevalUmmCaFirstPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_umm_ca_first_plan");
        });

        modelBuilder.Entity<CcStaffevalUmmCaFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_ca_first_plans");

            entity.ToTable("cc_staffeval_umm_ca_first_plans", "dbo");

            entity.HasIndex(e => e.Name, "idx_104618699");

            entity.HasIndex(e => e.Parent, "idx_379231700");

            entity.HasIndex(e => e.ModificationDate, "idx_406285982");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalUmmCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_cas");

            entity.ToTable("cc_staffeval_umm_cas", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_117174913");

            entity.HasIndex(e => e.Requisites, "idx_548855844");

            entity.HasIndex(e => e.Name, "idx_92424645");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalUmmFixedCa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_fixed_ca");

            entity.ToTable("cc_staffeval_umm_fixed_ca", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmFixedCa)
                .HasForeignKey<CcStaffevalUmmFixedCa>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_umm_fixed_ca");
        });

        modelBuilder.Entity<CcStaffevalUmmFixedCas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_fixed_cas");

            entity.ToTable("cc_staffeval_umm_fixed_cas", "dbo");

            entity.HasIndex(e => e.Name, "idx_401037570");

            entity.HasIndex(e => e.Requisites, "idx_698160342");

            entity.HasIndex(e => e.ModificationDate, "idx_730754532");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Npp).HasColumnName("npp");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
        });

        modelBuilder.Entity<CcStaffevalUmmSp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_sp");

            entity.ToTable("cc_staffeval_umm_sp", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmSp)
                .HasForeignKey<CcStaffevalUmmSp>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_umm_sp");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFirstPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_sp_first_plan");

            entity.ToTable("cc_staffeval_umm_sp_first_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmSpFirstPlan)
                .HasForeignKey<CcStaffevalUmmSpFirstPlan>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_umm_sp_first_plan");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFirstPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_sp_first_plans");

            entity.ToTable("cc_staffeval_umm_sp_first_plans", "dbo");

            entity.HasIndex(e => e.Requisites, "idx_316924362");

            entity.HasIndex(e => e.InstructorId, "idx_319238285");

            entity.HasIndex(e => e.ModificationDate, "idx_586403704");

            entity.HasIndex(e => e.Name, "idx_915447341");

            entity.HasIndex(e => e.Parent, "idx_973906221");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.Parent).HasColumnName("parent");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFixed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_sp_fixed");

            entity.ToTable("cc_staffeval_umm_sp_fixed", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUmmSpFixed)
                .HasForeignKey<CcStaffevalUmmSpFixed>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_umm_sp_fixed");
        });

        modelBuilder.Entity<CcStaffevalUmmSpFixeds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_sp_fixeds");

            entity.ToTable("cc_staffeval_umm_sp_fixeds", "dbo");

            entity.HasIndex(e => e.DocumentProcessed, "idx_158557729");

            entity.HasIndex(e => e.ModificationDate, "idx_195158107");

            entity.HasIndex(e => e.Name, "idx_732453847");

            entity.HasIndex(e => e.StatusId, "idx_739829139");

            entity.HasIndex(e => e.Requisites, "idx_811553877");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalUmmSps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_umm_sps");

            entity.ToTable("cc_staffeval_umm_sps", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_27799137");

            entity.HasIndex(e => e.Requisites, "idx_721161203");

            entity.HasIndex(e => e.Name, "idx_843833406");

            entity.HasIndex(e => e.DocumentProcessed, "idx_895570662");

            entity.HasIndex(e => e.StatusId, "idx_976495755");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Agent1).HasColumnName("agent_1");
            entity.Property(e => e.Agent2).HasColumnName("agent_2");
            entity.Property(e => e.Agent3).HasColumnName("agent_3");
            entity.Property(e => e.Agent4).HasColumnName("agent_4");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.AreaOfActivity1).HasColumnName("area_of_activity1");
            entity.Property(e => e.AreaOfActivity2).HasColumnName("area_of_activity2");
            entity.Property(e => e.Category1).HasColumnName("category1");
            entity.Property(e => e.Category2).HasColumnName("category2");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.CreatorId).HasColumnName("creator_id");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DocumentProcessed).HasColumnName("document_processed");
            entity.Property(e => e.EditDate).HasColumnName("edit_date");
            entity.Property(e => e.ExternalUrl).HasColumnName("external_url");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.InPlan).HasColumnName("in_plan");
            entity.Property(e => e.InstructorId).HasColumnName("instructor_id");
            entity.Property(e => e.LastChangeDate).HasColumnName("last_change_date");
            entity.Property(e => e.LastEditorId).HasColumnName("last_editor_id");
            entity.Property(e => e.LastSendDate1).HasColumnName("last_send_date_1");
            entity.Property(e => e.LastSendDate2).HasColumnName("last_send_date_2");
            entity.Property(e => e.LastSendDate3).HasColumnName("last_send_date_3");
            entity.Property(e => e.LastSendDate4).HasColumnName("last_send_date_4");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerOrganization).HasColumnName("owner_organization");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PlacementOrganization).HasColumnName("placement_organization");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Requisites).HasColumnName("requisites");
            entity.Property(e => e.ResponsiblePerson).HasColumnName("responsible_person");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.StationId).HasColumnName("station_id");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.StructurDivision).HasColumnName("structur_division");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.Time).HasColumnName("time");
        });

        modelBuilder.Entity<CcStaffevalUtpDepartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_utp_department");

            entity.ToTable("cc_staffeval_utp_department", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUtpDepartment)
                .HasForeignKey<CcStaffevalUtpDepartment>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_utp_department");
        });

        modelBuilder.Entity<CcStaffevalUtpDepartments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_utp_departments");

            entity.ToTable("cc_staffeval_utp_departments", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_588758449");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
        });

        modelBuilder.Entity<CcStaffevalUtpDiv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_utp_div");

            entity.ToTable("cc_staffeval_utp_div", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUtpDiv)
                .HasForeignKey<CcStaffevalUtpDiv>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_utp_div");
        });

        modelBuilder.Entity<CcStaffevalUtpDivs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_utp_divs");

            entity.ToTable("cc_staffeval_utp_divs", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_536217529");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate).HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
            entity.Property(e => e.SubdivFact).HasColumnName("subdiv_fact");
            entity.Property(e => e.SubdivFactI).HasColumnName("subdiv_fact_i");
            entity.Property(e => e.SubdivPlan).HasColumnName("subdiv_plan");
            entity.Property(e => e.SubdivPlanI).HasColumnName("subdiv_plan_i");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
        });

        modelBuilder.Entity<CcStaffevalUtpGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_utp_group");

            entity.ToTable("cc_staffeval_utp_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcStaffevalUtpGroup)
                .HasForeignKey<CcStaffevalUtpGroup>(d => d.Id)
                .HasConstraintName("fk_objects_cc_staffeval_utp_group");
        });

        modelBuilder.Entity<CcStaffevalUtpGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_staffeval_utp_groups");

            entity.ToTable("cc_staffeval_utp_groups", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_548804828");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Fact).HasColumnName("fact");
            entity.Property(e => e.FactI).HasColumnName("fact_i");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Plan).HasColumnName("plan");
            entity.Property(e => e.PlanI).HasColumnName("plan_i");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcTemplateTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_template_theme");

            entity.ToTable("cc_template_theme", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcTemplateTheme)
                .HasForeignKey<CcTemplateTheme>(d => d.Id)
                .HasConstraintName("fk_objects_cc_template_theme");
        });

        modelBuilder.Entity<CcTemplateThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_template_themes");

            entity.ToTable("cc_template_themes", "dbo");

            entity.HasIndex(e => e.CourseId, "idx_337048828");

            entity.HasIndex(e => e.ModificationDate, "idx_355089709");

            entity.HasIndex(e => e.ThemeId, "idx_568145900");

            entity.HasIndex(e => e.TaskId, "idx_750058967");

            entity.HasIndex(e => e.TemplateId, "idx_976206774");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
        });

        modelBuilder.Entity<CcTheme>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_theme");

            entity.ToTable("cc_theme", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcTheme)
                .HasForeignKey<CcTheme>(d => d.Id)
                .HasConstraintName("fk_objects_cc_theme");
        });

        modelBuilder.Entity<CcThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_themes");

            entity.ToTable("cc_themes", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_187935755");

            entity.HasIndex(e => e.Code, "idx_248083330");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
        });

        modelBuilder.Entity<CcTrainingSubject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_training_subject");

            entity.ToTable("cc_training_subject", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcTrainingSubject)
                .HasForeignKey<CcTrainingSubject>(d => d.Id)
                .HasConstraintName("fk_objects_cc_training_subject");
        });

        modelBuilder.Entity<CcTrainingSubjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_training_subjects");

            entity.ToTable("cc_training_subjects", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_385172894");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<CcVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_version");

            entity.ToTable("cc_version", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcVersion)
                .HasForeignKey<CcVersion>(d => d.Id)
                .HasConstraintName("fk_objects_cc_version");
        });

        modelBuilder.Entity<CcVersions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_versions");

            entity.ToTable("cc_versions", "dbo");

            entity.HasIndex(e => e.Minor, "idx_136150816");

            entity.HasIndex(e => e.Major, "idx_244313513");

            entity.HasIndex(e => e.ModificationDate, "idx_338970015");

            entity.HasIndex(e => e.ObjectId, "idx_629391549");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.Major).HasColumnName("major");
            entity.Property(e => e.Minor).HasColumnName("minor");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
        });

        modelBuilder.Entity<CcWebNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_web_notification");

            entity.ToTable("cc_web_notification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created).HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Ftime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("ftime");
            entity.Property(e => e.Modified).HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CcWebNotification)
                .HasForeignKey<CcWebNotification>(d => d.Id)
                .HasConstraintName("fk_objects_cc_web_notification");
        });

        modelBuilder.Entity<CcWebNotifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cc_web_notifications");

            entity.ToTable("cc_web_notifications", "dbo");

            entity.HasIndex(e => e.IsRead, "idx_287434068");

            entity.HasIndex(e => e.ModificationDate, "idx_318616386");

            entity.HasIndex(e => e.Toasted, "idx_597136082");

            entity.HasIndex(e => e.Title, "idx_632691908");

            entity.HasIndex(e => e.PersonId, "idx_931206505");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId).HasColumnName("app_instance_id");
            entity.Property(e => e.IsRead).HasColumnName("is_read");
            entity.Property(e => e.ModificationDate).HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.Toasted).HasColumnName("toasted");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificate");

            entity.ToTable("certificate", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Certificate)
                .HasForeignKey<Certificate>(d => d.Id)
                .HasConstraintName("FK_objects_certificate");
        });

        modelBuilder.Entity<CertificateType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificate_type");

            entity.ToTable("certificate_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CertificateType)
                .HasForeignKey<CertificateType>(d => d.Id)
                .HasConstraintName("FK_objects_certificate_type");
        });

        modelBuilder.Entity<CertificateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificate_types");

            entity.ToTable("certificate_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.Forever).HasColumnName("forever");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RequiredQuantity).HasColumnName("required_quantity");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Certificates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__certificates");

            entity.ToTable("certificates", "dbo");

            entity.HasIndex(e => e.Number, "idx_certificates_7203975113318604942").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.DeliveryDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("delivery_date");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expire_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .HasMaxLength(900)
                .HasColumnName("number");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Serial)
                .HasColumnType("character varying")
                .HasColumnName("serial");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.TypeName)
                .HasColumnType("character varying")
                .HasColumnName("type_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Valid).HasColumnName("valid");
        });

        modelBuilder.Entity<CfEducationMethods>(entity =>
        {
            entity.HasKey(e => e.EducationMethodId).HasName("pk__cf_education_methods");

            entity.ToTable("cf_education_methods", "dbo");

            entity.Property(e => e.EducationMethodId)
                .ValueGeneratedNever()
                .HasColumnName("education_method_id");
            entity.Property(e => e.EditForbidden).HasColumnName("edit_forbidden");
            entity.Property(e => e.FDivision).HasColumnName("f_division");
            entity.Property(e => e.FDurationPractice).HasColumnName("f_duration_practice");
            entity.Property(e => e.FEduField).HasColumnName("f_edu_field");
            entity.Property(e => e.FEduType).HasColumnName("f_edu_type");
            entity.Property(e => e.FFileReason).HasColumnName("f_file_reason");
            entity.Property(e => e.FFinishActive).HasColumnName("f_finish_active");
            entity.Property(e => e.FReason).HasColumnName("f_reason");
            entity.Property(e => e.FReasonText).HasColumnName("f_reason_text");
            entity.Property(e => e.FStartActive).HasColumnName("f_start_active");
            entity.Property(e => e.FThemes).HasColumnName("f_themes");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsIpk).HasColumnName("is_ipk");
            entity.Property(e => e.IsNds).HasColumnName("is_nds");
            entity.Property(e => e.IsSp).HasColumnName("is_sp");
            entity.Property(e => e.MigrationId).HasColumnName("migration_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CfPkThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cf_pk_themes");

            entity.ToTable("cf_pk_themes", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('cf_pk_themes_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseTid).HasColumnName("course_tid");
            entity.Property(e => e.Duration)
                .HasDefaultValue(0)
                .HasColumnName("duration");
            entity.Property(e => e.Sel).HasColumnName("sel");
            entity.Property(e => e.Tid).HasColumnName("tid");
        });

        modelBuilder.Entity<CfRequests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__cf_requests");

            entity.ToTable("cf_requests", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.EduType).HasColumnName("edu_type");
            entity.Property(e => e.FReason).HasColumnName("f_reason");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.Individual).HasColumnName("individual");
            entity.Property(e => e.IsCentral).HasColumnName("is_central");
            entity.Property(e => e.IsEdu).HasColumnName("is_edu");
            entity.Property(e => e.IsFinished).HasColumnName("is_finished");
            entity.Property(e => e.IsOut).HasColumnName("is_out");
            entity.Property(e => e.Mvz1).HasColumnName("mvz_1");
            entity.Property(e => e.Mvz2).HasColumnName("mvz_2");
            entity.Property(e => e.NInd).HasColumnName("n_ind");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlanCost).HasColumnName("plan_cost");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.RejectReason).HasColumnName("reject_reason");
            entity.Property(e => e.SourceRequest).HasColumnName("source_request");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Subdivision).HasColumnName("subdivision");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<Change>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__change");

            entity.ToTable("change", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Change)
                .HasForeignKey<Change>(d => d.Id)
                .HasConstraintName("FK_objects_change");
        });

        modelBuilder.Entity<Changes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__changes");

            entity.ToTable("changes", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_changes_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_changes_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_changes_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
        });

        modelBuilder.Entity<ChannelProvider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__channel_provider");

            entity.ToTable("channel_provider", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChannelProvider)
                .HasForeignKey<ChannelProvider>(d => d.Id)
                .HasConstraintName("FK_objects_channel_provider");
        });

        modelBuilder.Entity<ChannelProviders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__channel_providers");

            entity.ToTable("channel_providers", "dbo");

            entity.HasIndex(e => e.Code, "idx_channel_providers_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_channel_providers_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_channel_providers_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_channel_providers_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chat");

            entity.ToTable("chat", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Chat)
                .HasForeignKey<Chat>(d => d.Id)
                .HasConstraintName("FK_objects_chat");
        });

        modelBuilder.Entity<Chatbot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot");

            entity.ToTable("chatbot", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Chatbot)
                .HasForeignKey<Chatbot>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot");
        });

        modelBuilder.Entity<ChatbotChat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_chat");

            entity.ToTable("chatbot_chat", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChatbotChat)
                .HasForeignKey<ChatbotChat>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot_chat");
        });

        modelBuilder.Entity<ChatbotChatbotTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_chatbot_types");

            entity.ToTable("chatbot_chatbot_types", "dbo");

            entity.HasIndex(e => e.BotId, "idx_chatbot_chatbot_types_16286539196193905793").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ChatbotCode, "idx_chatbot_chatbot_types_3063497067289616974").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ChatbotTypeId, "idx_chatbot_chatbot_types_5512907270222754771").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ChatbotId, "idx_chatbot_chatbot_types_942925489772365086").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BotId)
                .HasMaxLength(900)
                .HasColumnName("bot_id");
            entity.Property(e => e.ChatbotCode)
                .HasMaxLength(900)
                .HasColumnName("chatbot_code");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.ChatbotTypeId).HasColumnName("chatbot_type_id");
            entity.Property(e => e.WebhookUrl)
                .HasColumnType("character varying")
                .HasColumnName("webhook_url");
        });

        modelBuilder.Entity<ChatbotChats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_chats");

            entity.ToTable("chatbot_chats", "dbo");

            entity.HasIndex(e => e.UseEscalation, "idx_chatbot_chats_17372602393125266301").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EscalationDate, "idx_chatbot_chats_18316545307076868218").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BotId)
                .HasColumnType("character varying")
                .HasColumnName("bot_id");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.ChatbotStageId).HasColumnName("chatbot_stage_id");
            entity.Property(e => e.ChatbotTypeId).HasColumnName("chatbot_type_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.EscalationAction)
                .HasColumnType("character varying")
                .HasColumnName("escalation_action");
            entity.Property(e => e.EscalationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("escalation_date");
            entity.Property(e => e.LastMessageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_message_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ProlongationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("prolongation_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.UseEscalation).HasColumnName("use_escalation");
        });

        modelBuilder.Entity<ChatbotStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_stage");

            entity.ToTable("chatbot_stage", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChatbotStage)
                .HasForeignKey<ChatbotStage>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot_stage");
        });

        modelBuilder.Entity<ChatbotStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_stages");

            entity.ToTable("chatbot_stages", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_chatbot_stages_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActionType)
                .HasColumnType("character varying")
                .HasColumnName("action_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.KeyboardType)
                .HasColumnType("character varying")
                .HasColumnName("keyboard_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<ChatbotType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_type");

            entity.ToTable("chatbot_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ChatbotType)
                .HasForeignKey<ChatbotType>(d => d.Id)
                .HasConstraintName("FK_objects_chatbot_type");
        });

        modelBuilder.Entity<ChatbotTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbot_types");

            entity.ToTable("chatbot_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ScriptUrl)
                .HasColumnType("character varying")
                .HasColumnName("script_url");
        });

        modelBuilder.Entity<Chatbots>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chatbots");

            entity.ToTable("chatbots", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_chatbots_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CanCreateConversation).HasColumnName("can_create_conversation");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DispName)
                .HasColumnType("character varying")
                .HasColumnName("disp_name");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartChatbotStageId).HasColumnName("start_chatbot_stage_id");
            entity.Property(e => e.UsageObjectType)
                .HasColumnType("character varying")
                .HasColumnName("usage_object_type");
        });

        modelBuilder.Entity<Chats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chats");

            entity.ToTable("chats", "dbo");

            entity.HasIndex(e => e.ParticipantIds, "idx_chats_7589355231223967666").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Collaborators)
                .HasColumnType("character varying")
                .HasColumnName("collaborators");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.IsMultiplayer).HasColumnName("is_multiplayer");
            entity.Property(e => e.IsPersonal).HasColumnName("is_personal");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParticipantIds).HasColumnName("participant_ids");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CheckSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__check_schedule");

            entity.ToTable("check_schedule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CheckSchedule)
                .HasForeignKey<CheckSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_check_schedule");
        });

        modelBuilder.Entity<CheckSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__check_schedules");

            entity.ToTable("check_schedules", "dbo");

            entity.HasIndex(e => e.Code, "idx_check_schedules_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_check_schedules_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_check_schedules_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_check_schedules_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClConst>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_const");

            entity.ToTable("cl_const", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClConst)
                .HasForeignKey<ClConst>(d => d.Id)
                .HasConstraintName("FK_objects_cl_const");
        });

        modelBuilder.Entity<ClConsts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_consts");

            entity.ToTable("cl_consts", "dbo");

            entity.HasIndex(e => e.Code, "idx_cl_consts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Imprint)
                .HasColumnType("character varying[]")
                .HasColumnName("imprint");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
        });

        modelBuilder.Entity<ClCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_course");

            entity.ToTable("cl_course", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClCourse)
                .HasForeignKey<ClCourse>(d => d.Id)
                .HasConstraintName("FK_objects_cl_course");
        });

        modelBuilder.Entity<ClCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_courses");

            entity.ToTable("cl_courses", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_cl_courses_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.AuthorId, "idx_cl_courses_9971121744821412237").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.LocalizationId).HasColumnName("localization_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.Platform)
                .HasColumnType("character varying")
                .HasColumnName("platform");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<ClLocalization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_localization");

            entity.ToTable("cl_localization", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClLocalization)
                .HasForeignKey<ClLocalization>(d => d.Id)
                .HasConstraintName("FK_objects_cl_localization");
        });

        modelBuilder.Entity<ClLocalizations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_localizations");

            entity.ToTable("cl_localizations", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<ClModule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_module");

            entity.ToTable("cl_module", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClModule)
                .HasForeignKey<ClModule>(d => d.Id)
                .HasConstraintName("FK_objects_cl_module");
        });

        modelBuilder.Entity<ClModules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_modules");

            entity.ToTable("cl_modules", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.CategoryLabel)
                .HasColumnType("character varying")
                .HasColumnName("category_label");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.ClCourseId).HasColumnName("cl_course_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.IsTemplate).HasColumnName("is_template");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ResourceUrl)
                .HasColumnType("character varying")
                .HasColumnName("resource_url");
            entity.Property(e => e.SlideHeight).HasColumnName("slide_height");
            entity.Property(e => e.SlideWidth).HasColumnName("slide_width");
            entity.Property(e => e.Stamp).HasColumnName("stamp");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<ClObject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_object");

            entity.ToTable("cl_object", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClObject)
                .HasForeignKey<ClObject>(d => d.Id)
                .HasConstraintName("FK_objects_cl_object");
        });

        modelBuilder.Entity<ClObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_objects");

            entity.ToTable("cl_objects", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Group)
                .HasColumnType("character varying")
                .HasColumnName("group");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceUrl)
                .HasColumnType("character varying")
                .HasColumnName("resource_url");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClShape>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_shape");

            entity.ToTable("cl_shape", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClShape)
                .HasForeignKey<ClShape>(d => d.Id)
                .HasConstraintName("FK_objects_cl_shape");
        });

        modelBuilder.Entity<ClShapes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_shapes");

            entity.ToTable("cl_shapes", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.CategoryLabel)
                .HasColumnType("character varying")
                .HasColumnName("category_label");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.TypeName)
                .HasColumnType("character varying")
                .HasColumnName("type_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClSlide>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_slide");

            entity.ToTable("cl_slide", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClSlide)
                .HasForeignKey<ClSlide>(d => d.Id)
                .HasConstraintName("FK_objects_cl_slide");
        });

        modelBuilder.Entity<ClSlides>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_slides");

            entity.ToTable("cl_slides", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApprovalStatus).HasColumnName("approval_status");
            entity.Property(e => e.ClCourseId).HasColumnName("cl_course_id");
            entity.Property(e => e.ClModuleId).HasColumnName("cl_module_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FlagCompletion).HasColumnName("flag_completion");
            entity.Property(e => e.FlagLocked)
                .HasColumnType("character varying")
                .HasColumnName("flag_locked");
            entity.Property(e => e.GreedyPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("greedy_person_fullname");
            entity.Property(e => e.GreedyPersonId).HasColumnName("greedy_person_id");
            entity.Property(e => e.IsMaster).HasColumnName("is_master");
            entity.Property(e => e.IsSplash).HasColumnName("is_splash");
            entity.Property(e => e.MasterCode)
                .HasColumnType("character varying")
                .HasColumnName("master_code");
            entity.Property(e => e.MasterId).HasColumnName("master_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Sid).HasColumnName("sid");
            entity.Property(e => e.Stamp).HasColumnName("stamp");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ClVideoCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_video_course");

            entity.ToTable("cl_video_course", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClVideoCourse)
                .HasForeignKey<ClVideoCourse>(d => d.Id)
                .HasConstraintName("FK_objects_cl_video_course");
        });

        modelBuilder.Entity<ClVideoCourses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cl_video_courses");

            entity.ToTable("cl_video_courses", "dbo");

            entity.HasIndex(e => e.LastCompileDate, "idx_cl_video_courses_13762131740639257386").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_cl_video_courses_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_cl_video_courses_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_cl_video_courses_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AuthorsId).HasColumnName("authors_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.LastCompileDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_compile_date");
            entity.Property(e => e.MediaFileId).HasColumnName("media_file_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SimpleMediaFileId).HasColumnName("simple_media_file_id");
        });

        modelBuilder.Entity<ClassificationModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__classification_model");

            entity.ToTable("classification_model", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClassificationModel)
                .HasForeignKey<ClassificationModel>(d => d.Id)
                .HasConstraintName("FK_objects_classification_model");
        });

        modelBuilder.Entity<ClassificationModels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__classification_models");

            entity.ToTable("classification_models", "dbo");

            entity.HasIndex(e => e.Code, "idx_classification_models_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_classification_models_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CodeLibraryId).HasColumnName("code_library_id");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ProcessingCodeLibraryId).HasColumnName("processing_code_library_id");
            entity.Property(e => e.RequiredProbability).HasColumnName("required_probability");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<ClosingDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__closing_document");

            entity.ToTable("closing_document", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClosingDocument)
                .HasForeignKey<ClosingDocument>(d => d.Id)
                .HasConstraintName("FK_objects_closing_document");
        });

        modelBuilder.Entity<ClosingDocumentStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__closing_document_status");

            entity.ToTable("closing_document_status", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ClosingDocumentStatus)
                .HasForeignKey<ClosingDocumentStatus>(d => d.Id)
                .HasConstraintName("FK_objects_closing_document_status");
        });

        modelBuilder.Entity<ClosingDocumentStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__closing_document_statuss");

            entity.ToTable("closing_document_statuss", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_closing_document_statuss_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<ClosingDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__closing_documents");

            entity.ToTable("closing_documents", "dbo");

            entity.HasIndex(e => e.CurrencyTypeId, "idx_closing_documents_6006144048989286690").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConsignmentDocumentNumber)
                .HasColumnType("character varying")
                .HasColumnName("consignment_document_number");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.DocsComment)
                .HasColumnType("character varying")
                .HasColumnName("docs_comment");
            entity.Property(e => e.ExpenseCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expense_create_date");
            entity.Property(e => e.IsFormed).HasColumnName("is_formed");
            entity.Property(e => e.IsReceived).HasColumnName("is_received");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.PayStageId).HasColumnName("pay_stage_id");
            entity.Property(e => e.ReceivedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("received_date");
            entity.Property(e => e.ReceivingStatusId).HasColumnName("receiving_status_id");
            entity.Property(e => e.Recipient)
                .HasColumnType("character varying")
                .HasColumnName("recipient");
            entity.Property(e => e.SentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_date");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<CodeLibrary>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__code_library");

            entity.ToTable("code_library", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CodeLibrary)
                .HasForeignKey<CodeLibrary>(d => d.Id)
                .HasConstraintName("FK_objects_code_library");
        });

        modelBuilder.Entity<CodeLibrarys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__code_librarys");

            entity.ToTable("code_librarys", "dbo");

            entity.HasIndex(e => e.Code, "idx_code_librarys_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_code_librarys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_code_librarys_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_code_librarys_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_code_librarys_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.AssociatedApplicationsId, "idx_code_librarys_9911342267516310661").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssociatedApplicationsId).HasColumnName("associated_applications_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CodeType)
                .HasColumnType("character varying")
                .HasColumnName("code_type");
            entity.Property(e => e.CodeUrl)
                .HasColumnType("character varying")
                .HasColumnName("code_url");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Coding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__coding");

            entity.ToTable("coding", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Coding)
                .HasForeignKey<Coding>(d => d.Id)
                .HasConstraintName("FK_objects_coding");
        });

        modelBuilder.Entity<Codings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__codings");

            entity.ToTable("codings", "dbo");

            entity.HasIndex(e => e.CatalogName, "idx_codings_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_codings_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_codings_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_codings_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_codings_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.NextIndex).HasColumnName("next_index");
        });

        modelBuilder.Entity<Collaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborator");

            entity.ToTable("collaborator", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Collaborator)
                .HasForeignKey<Collaborator>(d => d.Id)
                .HasConstraintName("FK_objects_collaborator");
        });

        modelBuilder.Entity<CollaboratorSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborator_schedule");

            entity.ToTable("collaborator_schedule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CollaboratorSchedule)
                .HasForeignKey<CollaboratorSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_collaborator_schedule");
        });

        modelBuilder.Entity<CollaboratorSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborator_schedules");

            entity.ToTable("collaborator_schedules", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApprovalDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("approval_date");
            entity.Property(e => e.ApprovalPersonId).HasColumnName("approval_person_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.FinishTime)
                .HasColumnType("character varying")
                .HasColumnName("finish_time");
            entity.Property(e => e.IntervalScheduleId).HasColumnName("interval_schedule_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PresenceStateId).HasColumnName("presence_state_id");
            entity.Property(e => e.ReasonComment)
                .HasColumnType("character varying")
                .HasColumnName("reason_comment");
            entity.Property(e => e.RestCollaboratorScheduleId).HasColumnName("rest_collaborator_schedule_id");
            entity.Property(e => e.ScheduleDayId).HasColumnName("schedule_day_id");
            entity.Property(e => e.ScheduleTypeId).HasColumnName("schedule_type_id");
            entity.Property(e => e.StartTime)
                .HasColumnType("character varying")
                .HasColumnName("start_time");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<Collaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__collaborators");

            entity.ToTable("collaborators", "dbo");

            entity.HasIndex(e => e.HireDate, "idx_collaborators_12126223349400558042").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionId, "idx_collaborators_12300354286168187930").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DevelopmentPotentialId, "idx_collaborators_12691587570697570624").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Email, "idx_collaborators_13021460415823014527").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_collaborators_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Login, "idx_collaborators_13985861045110674914").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CostCenterId, "idx_collaborators_15646206976949266431").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.NextStateDate, "idx_collaborators_17225928055245773382").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_collaborators_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionParentId, "idx_collaborators_4193241845710105774").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ShortLogin, "idx_collaborators_4424880725632085395").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_collaborators_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CurrentState, "idx_collaborators_4841502246807730068").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionParentName, "idx_collaborators_5350928296079640098").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_collaborators_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgName, "idx_collaborators_6506982039003785054").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Fullname, "idx_collaborators_7219832511525380348").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EfficiencyEstimationId, "idx_collaborators_7449878280595439136").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionName, "idx_collaborators_7850265971443817575").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LowercaseLogin, "idx_collaborators_8329760863524290099").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonObjectProfileId, "idx_collaborators_9282457408440039849").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowPersonalChatRequest).HasColumnName("allow_personal_chat_request");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("birth_date");
            entity.Property(e => e.CandidateId).HasColumnName("candidate_id");
            entity.Property(e => e.CandidateStatusTypeId).HasColumnName("candidate_status_type_id");
            entity.Property(e => e.CategoryId)
                .HasColumnType("character varying[]")
                .HasColumnName("category_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ConsentKedo).HasColumnName("consent_kedo");
            entity.Property(e => e.ConsentKedoDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("consent_kedo_date");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.CurrentState)
                .HasMaxLength(900)
                .HasColumnName("current_state");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.DismissDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dismiss_date");
            entity.Property(e => e.DispBirthdate).HasColumnName("disp_birthdate");
            entity.Property(e => e.DispBirthdateYear).HasColumnName("disp_birthdate_year");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.Email)
                .HasMaxLength(900)
                .HasColumnName("email");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.Fullname)
                .HasMaxLength(900)
                .HasColumnName("fullname");
            entity.Property(e => e.GradeId).HasColumnName("grade_id");
            entity.Property(e => e.HireDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("hire_date");
            entity.Property(e => e.InRequestBlackList).HasColumnName("in_request_black_list");
            entity.Property(e => e.IsApplicationAdmin).HasColumnName("is_application_admin");
            entity.Property(e => e.IsArmAdmin).HasColumnName("is_arm_admin");
            entity.Property(e => e.IsCandidate).HasColumnName("is_candidate");
            entity.Property(e => e.IsContentAdmin).HasColumnName("is_content_admin");
            entity.Property(e => e.IsDismiss).HasColumnName("is_dismiss");
            entity.Property(e => e.IsOutstaff).HasColumnName("is_outstaff");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LevelId).HasColumnName("level_id");
            entity.Property(e => e.Login)
                .HasMaxLength(900)
                .HasColumnName("login");
            entity.Property(e => e.LowercaseLogin)
                .HasMaxLength(900)
                .HasColumnName("lowercase_login");
            entity.Property(e => e.MobilePhone)
                .HasColumnType("character varying")
                .HasColumnName("mobile_phone");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NextStateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("next_state_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgName)
                .HasMaxLength(900)
                .HasColumnName("org_name");
            entity.Property(e => e.PersonObjectProfileId).HasColumnName("person_object_profile_id");
            entity.Property(e => e.Phone)
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.PictUrl)
                .HasColumnType("character varying")
                .HasColumnName("pict_url");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.PositionDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("position_date");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .HasColumnName("position_name");
            entity.Property(e => e.PositionParentId).HasColumnName("position_parent_id");
            entity.Property(e => e.PositionParentName)
                .HasMaxLength(900)
                .HasColumnName("position_parent_name");
            entity.Property(e => e.ProviderLegalId)
                .HasColumnType("character varying")
                .HasColumnName("provider_legal_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.RoleId)
                .HasColumnType("character varying")
                .HasColumnName("role_id");
            entity.Property(e => e.Sex)
                .HasColumnType("character varying")
                .HasColumnName("sex");
            entity.Property(e => e.ShortLogin)
                .HasMaxLength(900)
                .HasColumnName("short_login");
            entity.Property(e => e.Snils)
                .HasColumnType("character varying")
                .HasColumnName("snils");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.WebBanned).HasColumnName("web_banned");
        });

        modelBuilder.Entity<CommitteeMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__committee_member");

            entity.ToTable("committee_member", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CommitteeMember)
                .HasForeignKey<CommitteeMember>(d => d.Id)
                .HasConstraintName("FK_objects_committee_member");
        });

        modelBuilder.Entity<CommitteeMembers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__committee_members");

            entity.ToTable("committee_members", "dbo");

            entity.HasIndex(e => e.Code, "idx_committee_members_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_committee_members_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonnelCommitteeId, "idx_committee_members_2672375455593243590").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_committee_members_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_committee_members_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_committee_members_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Catalog, "idx_committee_members_7497764283949398425").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BossTypeId, "idx_committee_members_9251791295560244622").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .HasColumnName("catalog");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CommitteeMemberType)
                .HasColumnType("character varying")
                .HasColumnName("committee_member_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonnelCommitteeId).HasColumnName("personnel_committee_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CommonAcademDebtStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.academ_debt_states");

            entity.ToTable("common.academ_debt_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAccessBlockTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.access_block_types");

            entity.ToTable("common.access_block_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Disp).HasColumnName("disp");
            entity.Property(e => e.FirstCatalogUrl)
                .HasColumnType("character varying")
                .HasColumnName("first_catalog_url");
            entity.Property(e => e.IconUrl)
                .HasColumnType("character varying")
                .HasColumnName("icon_url");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.LicenseCatalogs)
                .HasColumnType("character varying")
                .HasColumnName("license_catalogs");
            entity.Property(e => e.ListIndex).HasColumnName("list_index");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NeverSaved).HasColumnName("never_saved");
            entity.Property(e => e.ObjectsAccess)
                .HasColumnType("character varying")
                .HasColumnName("objects_access");
            entity.Property(e => e.Structure)
                .HasColumnType("xml")
                .HasColumnName("structure");
            entity.Property(e => e.Sys).HasColumnName("sys");
        });

        modelBuilder.Entity<CommonAccessObjectTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.access_object_types");

            entity.ToTable("common.access_object_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAccountStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.account_status_types");

            entity.ToTable("common.account_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAcquaintConfirmationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.acquaint_confirmation_types");

            entity.ToTable("common.acquaint_confirmation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAcquaintQuestionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.acquaint_question_types");

            entity.ToTable("common.acquaint_question_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Multiple).HasColumnName("multiple");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAcquaintStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.acquaint_states");

            entity.ToTable("common.acquaint_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonAcquaintTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.acquaint_types");

            entity.ToTable("common.acquaint_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonActionReportTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.action_report_types");

            entity.ToTable("common.action_report_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonActionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.action_status_types");

            entity.ToTable("common.action_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonActiveNotificationStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.active_notification_status_types");

            entity.ToTable("common.active_notification_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAggregationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.aggregation_types");

            entity.ToTable("common.aggregation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAgreementStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.agreement_status_types");

            entity.ToTable("common.agreement_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAllOptionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.all_option_types");

            entity.ToTable("common.all_option_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Caption)
                .HasColumnType("character varying")
                .HasColumnName("caption");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Title)
                .HasColumnType("character varying")
                .HasColumnName("title");
        });

        modelBuilder.Entity<CommonAnnalsItemTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.annals_item_types");

            entity.ToTable("common.annals_item_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.DataId)
                .HasColumnType("character varying")
                .HasColumnName("data_id");
            entity.Property(e => e.ItemId)
                .HasColumnType("character varying")
                .HasColumnName("item_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAnnalsStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.annals_states");

            entity.ToTable("common.annals_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonApplicationStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.application_states");

            entity.ToTable("common.application_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonApplicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.application_types");

            entity.ToTable("common.application_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseParameters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_parameters");

            entity.ToTable("common.assessment_appraise_parameters", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Statuses)
                .HasColumnType("xml")
                .HasColumnName("statuses");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseParticipants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_participants");

            entity.ToTable("common.assessment_appraise_participants", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Usable).HasColumnName("usable");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseRecommendTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_recommend_types");

            entity.ToTable("common.assessment_appraise_recommend_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_statuses");

            entity.ToTable("common.assessment_appraise_statuses", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonAssessmentAppraiseTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_appraise_types");

            entity.ToTable("common.assessment_appraise_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.General).HasColumnName("general");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentExternalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_external_types");

            entity.ToTable("common.assessment_external_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAssessmentStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.assessment_stages");

            entity.ToTable("common.assessment_stages", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Access)
                .HasColumnType("xml")
                .HasColumnName("access");
            entity.Property(e => e.IsPeriodDependent).HasColumnName("is_period_dependent");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonAvailabilityStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.availability_states");

            entity.ToTable("common.availability_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonAzureRoleSizeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.azure_role_size_types");

            entity.ToTable("common.azure_role_size_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBenefitItemStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.benefit_item_statuses");

            entity.ToTable("common.benefit_item_statuses", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBenefitStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.benefit_statuses");

            entity.ToTable("common.benefit_statuses", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBlockMessageStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.block_message_states");

            entity.ToTable("common.block_message_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBlogTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.blog_types");

            entity.ToTable("common.blog_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonBudgetStateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.budget_state_types");

            entity.ToTable("common.budget_state_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveMaterialTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_material_types");

            entity.ToTable("common.career_reserve_material_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_status_types");

            entity.ToTable("common.career_reserve_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveTasksTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_tasks_types");

            entity.ToTable("common.career_reserve_tasks_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerReserveTypeTasksTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_reserve_type_tasks_types");

            entity.ToTable("common.career_reserve_type_tasks_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCareerTransitionDirectionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.career_transition_direction_types");

            entity.ToTable("common.career_transition_direction_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCharts>(entity =>
        {
            entity.HasKey(e => e.ChartId).HasName("PK__common.charts");

            entity.ToTable("common.charts", "dbo");

            entity.Property(e => e.ChartId)
                .HasMaxLength(128)
                .HasColumnName("chart_id");
            entity.Property(e => e.ChartName)
                .HasColumnType("character varying")
                .HasColumnName("chart_name");
            entity.Property(e => e.ChartSubtypes)
                .HasColumnType("xml")
                .HasColumnName("chart_subtypes");
            entity.Property(e => e.ChartType)
                .HasColumnType("character varying")
                .HasColumnName("chart_type");
            entity.Property(e => e.FlagColorDatapoints).HasColumnName("flag_color_datapoints");
            entity.Property(e => e.FlagForeignCaption).HasColumnName("flag_foreign_caption");
            entity.Property(e => e.FlagRightAngleAxes).HasColumnName("flag_right_angle_axes");
            entity.Property(e => e.FlagShowAxis).HasColumnName("flag_show_axis");
            entity.Property(e => e.FlagShowPercent).HasColumnName("flag_show_percent");
            entity.Property(e => e.Icon)
                .HasColumnType("character varying")
                .HasColumnName("icon");
            entity.Property(e => e.Thickness).HasColumnName("thickness");
            entity.Property(e => e.Xcolor)
                .HasColumnType("character varying")
                .HasColumnName("xcolor");
            entity.Property(e => e.Xcolor2)
                .HasColumnType("character varying")
                .HasColumnName("xcolor2");
            entity.Property(e => e.XcolorLine)
                .HasColumnType("character varying")
                .HasColumnName("xcolor_line");
            entity.Property(e => e.Xoverlap).HasColumnName("xoverlap");
        });

        modelBuilder.Entity<CommonChatbotActionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.chatbot_action_types");

            entity.ToTable("common.chatbot_action_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonChatbotButtonTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.chatbot_button_types");

            entity.ToTable("common.chatbot_button_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonChatbotOutTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.chatbot_out_types");

            entity.ToTable("common.chatbot_out_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonChatbotTileTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.chatbot_tile_types");

            entity.ToTable("common.chatbot_tile_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCheckScheduleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.check_schedule_types");

            entity.ToTable("common.check_schedule_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonClApprovalStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_approval_states");

            entity.ToTable("common.cl_approval_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonClAuthorTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_author_types");

            entity.ToTable("common.cl_author_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonClObjectGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_object_groups");

            entity.ToTable("common.cl_object_groups", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonClStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cl_states");

            entity.ToTable("common.cl_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCollectStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.collect_states");

            entity.ToTable("common.collect_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCommitteeMemberStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.committee_member_status_types");

            entity.ToTable("common.committee_member_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCommitteeMemberTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.committee_member_types");

            entity.ToTable("common.committee_member_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonConfirmationExpertTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.confirmation_expert_types");

            entity.ToTable("common.confirmation_expert_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonConfirmationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.confirmation_types");

            entity.ToTable("common.confirmation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContactStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contact_status_types");

            entity.ToTable("common.contact_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonContentItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.content_items");

            entity.ToTable("common.content_items", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.AccessBlock)
                .HasColumnType("character varying")
                .HasColumnName("access_block");
            entity.Property(e => e.HtmlPage)
                .HasColumnType("character varying")
                .HasColumnName("html_page");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContestStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contest_states");

            entity.ToTable("common.contest_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContestTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contest_types");

            entity.ToTable("common.contest_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonContestWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.contest_web_templates");

            entity.ToTable("common.contest_web_templates", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonConversationFormats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.conversation_formats");

            entity.ToTable("common.conversation_formats", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonConversationMessageStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.conversation_message_states");

            entity.ToTable("common.conversation_message_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonConversationObjectTypes>(entity =>
        {
            entity.HasKey(e => e.ObjectType).HasName("PK__common.conversation_object_types");

            entity.ToTable("common.conversation_object_types", "dbo");

            entity.Property(e => e.ObjectType)
                .HasMaxLength(128)
                .HasColumnName("object_type");
            entity.Property(e => e.ExcludeChannelParticipant).HasColumnName("exclude_channel_participant");
            entity.Property(e => e.IsFixParticipants).HasColumnName("is_fix_participants");
        });

        modelBuilder.Entity<CommonConversationParticipantStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.conversation_participant_states");

            entity.ToTable("common.conversation_participant_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonConversationVisibleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.conversation_visible_types");

            entity.ToTable("common.conversation_visible_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCostTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cost_types");

            entity.ToTable("common.cost_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ShortName)
                .HasColumnType("character varying")
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<CommonCourseExpertTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_expert_types");

            entity.ToTable("common.course_expert_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCourseImportTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_import_types");

            entity.ToTable("common.course_import_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCoursePartTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_part_types");

            entity.ToTable("common.course_part_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IcoUrl)
                .HasColumnType("character varying")
                .HasColumnName("ico_url");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCourseTestStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.course_test_states");

            entity.ToTable("common.course_test_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCovenantStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.covenant_status_types");

            entity.ToTable("common.covenant_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCreateTaskTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.create_task_types");

            entity.ToTable("common.create_task_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCurriculumTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.curriculum_types");

            entity.ToTable("common.curriculum_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonCwtTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.cwt_types");

            entity.ToTable("common.cwt_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.day_types");

            entity.ToTable("common.day_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDeliveryTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.delivery_types");

            entity.ToTable("common.delivery_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDesignVscodeAccessTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.design_vscode_access_types");

            entity.ToTable("common.design_vscode_access_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDesignVscodeSaveTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.design_vscode_save_types");

            entity.ToTable("common.design_vscode_save_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDischargeDbTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.discharge_db_types");

            entity.ToTable("common.discharge_db_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonDischargeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.discharge_types");

            entity.ToTable("common.discharge_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IsImport).HasColumnName("is_import");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.SourceName)
                .HasColumnType("character varying")
                .HasColumnName("source_name");
        });

        modelBuilder.Entity<CommonDocumentSentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.document_sent_types");

            entity.ToTable("common.document_sent_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEditTaskTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.edit_task_types");

            entity.ToTable("common.edit_task_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEducTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.educ_types");

            entity.ToTable("common.educ_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEducationLearningStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.education_learning_states");

            entity.ToTable("common.education_learning_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.LongDescriptor)
                .HasColumnType("character varying")
                .HasColumnName("long_descriptor");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .HasColumnType("character varying")
                .HasColumnName("short_descriptor");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEducationMethodStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.education_method_states");

            entity.ToTable("common.education_method_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEducationMethodTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.education_method_types");

            entity.ToTable("common.education_method_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEmploymentKinds>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.employment_kinds");

            entity.ToTable("common.employment_kinds", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEmploymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.employment_types");

            entity.ToTable("common.employment_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEncodingTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.encoding_types");

            entity.ToTable("common.encoding_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEstaffEventStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.estaff_event_status_types");

            entity.ToTable("common.estaff_event_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEvalCodeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.eval_code_types");

            entity.ToTable("common.eval_code_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEvalTextTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.eval_text_types");

            entity.ToTable("common.eval_text_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEvalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.eval_types");

            entity.ToTable("common.eval_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEventFileVisibilityTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_file_visibility_types");

            entity.ToTable("common.event_file_visibility_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonEventResultStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_result_status_types");

            entity.ToTable("common.event_result_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEventStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_status_types");

            entity.ToTable("common.event_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonEventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.event_types");

            entity.ToTable("common.event_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonExchangeObjectTypes>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.exchange_object_types");

            entity.ToTable("common.exchange_object_types", "dbo");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.DispName)
                .HasColumnType("character varying")
                .HasColumnName("disp_name");
            entity.Property(e => e.FormType).HasColumnName("form_type");
            entity.Property(e => e.FormUrl)
                .HasColumnType("character varying")
                .HasColumnName("form_url");
            entity.Property(e => e.FtIndex).HasColumnName("ft_index");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.IsHier).HasColumnName("is_hier");
            entity.Property(e => e.MaxRecordsNum).HasColumnName("max_records_num");
            entity.Property(e => e.Title)
                .HasColumnType("character varying")
                .HasColumnName("title");
            entity.Property(e => e.WebConst)
                .HasColumnType("character varying")
                .HasColumnName("web_const");
            entity.Property(e => e.WebTemplate)
                .HasColumnType("character varying")
                .HasColumnName("web_template");
            entity.Property(e => e.WebTitle)
                .HasColumnType("character varying")
                .HasColumnName("web_title");
        });

        modelBuilder.Entity<CommonExpendedEducTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.expended_educ_types");

            entity.ToTable("common.expended_educ_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonExpertEvalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.expert_eval_types");

            entity.ToTable("common.expert_eval_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonFieldNameTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.field_name_types");

            entity.ToTable("common.field_name_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.field_types");

            entity.ToTable("common.field_types", "dbo");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonFilterTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.filter_types");

            entity.ToTable("common.filter_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonForumPersonInfoTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.forum_person_info_types");

            entity.ToTable("common.forum_person_info_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonForumSmileTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.forum_smile_types");

            entity.ToTable("common.forum_smile_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
        });

        modelBuilder.Entity<CommonGoodInstanceStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.good_instance_status_types");

            entity.ToTable("common.good_instance_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonGoodStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.good_states");

            entity.ToTable("common.good_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonGradingOptionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.grading_option_types");

            entity.ToTable("common.grading_option_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.OptionId)
                .HasColumnType("character varying")
                .HasColumnName("option_id");
            entity.Property(e => e.QtiTag)
                .HasColumnType("character varying")
                .HasColumnName("qti_tag");
        });

        modelBuilder.Entity<CommonGraphTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.graph_types");

            entity.ToTable("common.graph_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonIndicatorTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.indicator_types");

            entity.ToTable("common.indicator_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonInteractionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.interaction_types");

            entity.ToTable("common.interaction_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonItemStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.item_status_types");

            entity.ToTable("common.item_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonItemTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.item_types");

            entity.ToTable("common.item_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonJobTransferTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.job_transfer_types");

            entity.ToTable("common.job_transfer_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonJoinModeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.join_mode_types");

            entity.ToTable("common.join_mode_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKeyPositionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.key_position_status_types");

            entity.ToTable("common.key_position_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKeyboardTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.keyboard_types");

            entity.ToTable("common.keyboard_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKnowledgeAcquaintStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.knowledge_acquaint_states");

            entity.ToTable("common.knowledge_acquaint_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKnowledgeAcquaintTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.knowledge_acquaint_types");

            entity.ToTable("common.knowledge_acquaint_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKnowledgePartsObjects>(entity =>
        {
            entity.HasKey(e => e.KnowledgePartsObjectId).HasName("PK__common.knowledge_parts_objects");

            entity.ToTable("common.knowledge_parts_objects", "dbo");

            entity.Property(e => e.KnowledgePartsObjectId)
                .HasMaxLength(128)
                .HasColumnName("knowledge_parts_object_id");
            entity.Property(e => e.FormUrl)
                .HasColumnType("character varying")
                .HasColumnName("form_url");
            entity.Property(e => e.IsFunctional).HasColumnName("is_functional");
        });

        modelBuilder.Entity<CommonKpiCalcTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.kpi_calc_types");

            entity.ToTable("common.kpi_calc_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKpiStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.kpi_states");

            entity.ToTable("common.kpi_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonKpiTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.kpi_types");

            entity.ToTable("common.kpi_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLanguageLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.language_levels");

            entity.ToTable("common.language_levels", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLanguages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.languages");

            entity.ToTable("common.languages", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLayerTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.layer_types");

            entity.ToTable("common.layer_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningCatalogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_catalogs");

            entity.ToTable("common.learning_catalogs", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningDynamicsCategoryTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_dynamics_category_types");

            entity.ToTable("common.learning_dynamics_category_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningRecordStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_record_statuss");

            entity.ToTable("common.learning_record_statuss", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IconUrl)
                .HasColumnType("character varying")
                .HasColumnName("icon_url");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLearningStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_states");

            entity.ToTable("common.learning_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.LongDescriptor)
                .HasColumnType("character varying")
                .HasColumnName("long_descriptor");
            entity.Property(e => e.LpeColor)
                .HasColumnType("character varying")
                .HasColumnName("lpe_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .HasColumnType("character varying")
                .HasColumnName("short_descriptor");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonLearningStatisticsCategoryTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_statistics_category_types");

            entity.ToTable("common.learning_statistics_category_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<CommonLearningTaskStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.learning_task_status_types");

            entity.ToTable("common.learning_task_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLectorTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.lector_types");

            entity.ToTable("common.lector_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLessonStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.lesson_states");

            entity.ToTable("common.lesson_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLibrarySectionWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.library_section_web_templates");

            entity.ToTable("common.library_section_web_templates", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLibraryStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.library_states");

            entity.ToTable("common.library_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonLinkingViews>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.linking_views");

            entity.ToTable("common.linking_views", "dbo");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.CatalogName)
                .HasColumnType("character varying")
                .HasColumnName("catalog_name");
            entity.Property(e => e.DispName)
                .HasColumnType("character varying")
                .HasColumnName("disp_name");
            entity.Property(e => e.Title)
                .HasColumnType("character varying")
                .HasColumnName("title");
            entity.Property(e => e.ViewUrl)
                .HasColumnType("character varying")
                .HasColumnName("view_url");
        });

        modelBuilder.Entity<CommonMaterialFormatTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.material_format_types");

            entity.ToTable("common.material_format_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonMaterialLocations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.material_locations");

            entity.ToTable("common.material_locations", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonMessageStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.message_states");

            entity.ToTable("common.message_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonMessageTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.message_types");

            entity.ToTable("common.message_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonMonths>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.months");

            entity.ToTable("common.months", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Days).HasColumnName("days");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NameGenitive)
                .HasColumnType("character varying")
                .HasColumnName("name_genitive");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.Quarter).HasColumnName("quarter");
        });

        modelBuilder.Entity<CommonNodeTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.node_types");

            entity.ToTable("common.node_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonObjectParamBaseObjectTypes>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("PK__common.object_param_base_object_types");

            entity.ToTable("common.object_param_base_object_types", "dbo");

            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.Title)
                .HasColumnType("character varying")
                .HasColumnName("title");
        });

        modelBuilder.Entity<CommonObjectResourceStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.object_resource_states");

            entity.ToTable("common.object_resource_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonObjectflowConditionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objectflow_condition_types");

            entity.ToTable("common.objectflow_condition_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IsPrimary).HasColumnName("is_primary");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonObjectflowOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objectflow_operation_types");

            entity.ToTable("common.objectflow_operation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonObjectiveStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objective_status_types");

            entity.ToTable("common.objective_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .HasColumnType("character varying")
                .HasColumnName("short_descriptor");
        });

        modelBuilder.Entity<CommonObjectiveSuccessStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.objective_success_status_types");

            entity.ToTable("common.objective_success_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ShortDescriptor)
                .HasColumnType("character varying")
                .HasColumnName("short_descriptor");
        });

        modelBuilder.Entity<CommonOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.operation_types");

            entity.ToTable("common.operation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OperationCatalog)
                .HasColumnType("character varying")
                .HasColumnName("operation_catalog");
            entity.Property(e => e.Type).HasColumnName("type");
        });

        modelBuilder.Entity<CommonOracleDbTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.oracle_db_types");

            entity.ToTable("common.oracle_db_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOrderStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.order_status_types");

            entity.ToTable("common.order_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOrderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.order_types");

            entity.ToTable("common.order_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOutTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.out_types");

            entity.ToTable("common.out_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOutstaffContractTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.outstaff_contract_types");

            entity.ToTable("common.outstaff_contract_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonOutstaffOrderExecutionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.outstaff_order_execution_status_types");

            entity.ToTable("common.outstaff_order_execution_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPackageStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.package_status_types");

            entity.ToTable("common.package_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPackageTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.package_types");

            entity.ToTable("common.package_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonParticipantStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.participant_states");

            entity.ToTable("common.participant_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPassportTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.passport_types");

            entity.ToTable("common.passport_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPaymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.payment_types");

            entity.ToTable("common.payment_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IsCanReceived).HasColumnName("is_can_received");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPerfomConditionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.perfom_condition_types");

            entity.ToTable("common.perfom_condition_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPeriodCalcTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.period_calc_types");

            entity.ToTable("common.period_calc_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPeriodicityTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.periodicity_types");

            entity.ToTable("common.periodicity_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPerioditys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.perioditys");

            entity.ToTable("common.perioditys", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<CommonPersonnelCommitteeStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_committee_status_types");

            entity.ToTable("common.personnel_committee_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonPersonnelDocumentStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_document_states");

            entity.ToTable("common.personnel_document_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPersonnelReserveStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_reserve_status_types");

            entity.ToTable("common.personnel_reserve_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPersonnelReserveTaskStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.personnel_reserve_task_status_types");

            entity.ToTable("common.personnel_reserve_task_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerDisplayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_display_types");

            entity.ToTable("common.player_display_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerLanguages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_languages");

            entity.ToTable("common.player_languages", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_positions");

            entity.ToTable("common.player_positions", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerRubricDisplayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_rubric_display_types");

            entity.ToTable("common.player_rubric_display_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerSendTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_send_types");

            entity.ToTable("common.player_send_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPlayerTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.player_types");

            entity.ToTable("common.player_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.ArchiveName)
                .HasColumnType("character varying")
                .HasColumnName("archive_name");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPollItemTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.poll_item_types");

            entity.ToTable("common.poll_item_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPollTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.poll_types");

            entity.ToTable("common.poll_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IsTable).HasColumnName("is_table");
            entity.Property(e => e.Multiple).HasColumnName("multiple");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPortalTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.portal_types");

            entity.ToTable("common.portal_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPositionAssignmentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.position_assignment_types");

            entity.ToTable("common.position_assignment_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPositionCommonStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.position_common_statuss");

            entity.ToTable("common.position_common_statuss", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPositionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.position_types");

            entity.ToTable("common.position_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.ModName)
                .HasColumnType("character varying")
                .HasColumnName("mod_name");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPossibleStorages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.possible_storages");

            entity.ToTable("common.possible_storages", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonPrintFormTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.print_form_types");

            entity.ToTable("common.print_form_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.ContentType)
                .HasColumnType("character varying")
                .HasColumnName("content_type");
            entity.Property(e => e.Extension)
                .HasColumnType("character varying")
                .HasColumnName("extension");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProcessingMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.processing_methods");

            entity.ToTable("common.processing_methods", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProctorStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.proctor_states");

            entity.ToTable("common.proctor_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProctoringObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.proctoring_objects");

            entity.ToTable("common.proctoring_objects", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IconUrl)
                .HasColumnType("character varying")
                .HasColumnName("icon_url");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProctoringSessionStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.proctoring_session_states");

            entity.ToTable("common.proctoring_session_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProfessionalAreas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.professional_areas");

            entity.ToTable("common.professional_areas", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProgDisciplStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.prog_discipl_states");

            entity.ToTable("common.prog_discipl_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProgressTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.progress_types");

            entity.ToTable("common.progress_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProhibitionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.prohibition_types");

            entity.ToTable("common.prohibition_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonProjectStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.project_status_types");

            entity.ToTable("common.project_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonQaFixtureTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_fixture_types");

            entity.ToTable("common.qa_fixture_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQaTestAssertTemplateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_test_assert_template_types");

            entity.ToTable("common.qa_test_assert_template_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQaTestAssertTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_test_assert_types");

            entity.ToTable("common.qa_test_assert_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQaTestResultCompletionStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_test_result_completion_states");

            entity.ToTable("common.qa_test_result_completion_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQaTestResultStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_test_result_states");

            entity.ToTable("common.qa_test_result_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQaTestStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_test_states");

            entity.ToTable("common.qa_test_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQaTestTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qa_test_types");

            entity.ToTable("common.qa_test_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQualificationAssignmentStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qualification_assignment_states");

            entity.ToTable("common.qualification_assignment_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonQualificationStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.qualification_statuss");

            entity.ToTable("common.qualification_statuss", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonReactionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.reaction_types");

            entity.ToTable("common.reaction_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRecipientTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.recipient_types");

            entity.ToTable("common.recipient_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.FuncMan).HasColumnName("func_man");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRecruitmentPlanStateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.recruitment_plan_state_types");

            entity.ToTable("common.recruitment_plan_state_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRegistrTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.registr_types");

            entity.ToTable("common.registr_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonRequestStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.request_status_types");

            entity.ToTable("common.request_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonResourceTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.resource_types");

            entity.ToTable("common.resource_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Ext)
                .HasColumnType("character varying")
                .HasColumnName("ext");
            entity.Property(e => e.IsMedia).HasColumnName("is_media");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UseCache).HasColumnName("use_cache");
        });

        modelBuilder.Entity<CommonResponseStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.response_status_types");

            entity.ToTable("common.response_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonResultFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.result_field_types");

            entity.ToTable("common.result_field_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSchedulerTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.scheduler_types");

            entity.ToTable("common.scheduler_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSentenceOptionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.sentence_option_types");

            entity.ToTable("common.sentence_option_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonServerAgentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.server_agent_types");

            entity.ToTable("common.server_agent_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonServerRunModes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.server_run_modes");

            entity.ToTable("common.server_run_modes", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonServerSettings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.server_settings");

            entity.ToTable("common.server_settings", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.DefaultValue)
                .HasColumnType("character varying")
                .HasColumnName("default_value");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PassiveInModes)
                .HasColumnType("character varying")
                .HasColumnName("passive_in_modes");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserName)
                .HasColumnType("character varying")
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<CommonServiceProviderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.service_provider_types");

            entity.ToTable("common.service_provider_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WithDate).HasColumnName("with_date");
        });

        modelBuilder.Entity<CommonSignatureTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.signature_types");

            entity.ToTable("common.signature_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSocialAvatarPriorityTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.social_avatar_priority_types");

            entity.ToTable("common.social_avatar_priority_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSpxmlTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.spxml_types");

            entity.ToTable("common.spxml_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStatementComponentPropertys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.statement_component_propertys");

            entity.ToTable("common.statement_component_propertys", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStatusInKnowledgeMapTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.status_in_knowledge_map_types");

            entity.ToTable("common.status_in_knowledge_map_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudDocTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_doc_types");

            entity.ToTable("common.stud_doc_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudGroupStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_group_states");

            entity.ToTable("common.stud_group_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_types");

            entity.ToTable("common.stud_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudWorkStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.stud_work_states");

            entity.ToTable("common.stud_work_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonStudentStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.student_states");

            entity.ToTable("common.student_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSubmissionStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.submission_states");

            entity.ToTable("common.submission_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSubstitutionStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.substitution_status_types");

            entity.ToTable("common.substitution_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSuccessorStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.successor_status_types");

            entity.ToTable("common.successor_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSupplementaryQuestionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.supplementary_question_types");

            entity.ToTable("common.supplementary_question_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonSystemEventOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.system_event_operation_types");

            entity.ToTable("common.system_event_operation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTariffRateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.tariff_rate_types");

            entity.ToTable("common.tariff_rate_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTaskStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.task_statuses");

            entity.ToTable("common.task_statuses", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonTemplateCacheTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.template_cache_types");

            entity.ToTable("common.template_cache_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTemplateFieldTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.template_field_types");

            entity.ToTable("common.template_field_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.FieldType)
                .HasColumnType("character varying")
                .HasColumnName("field_type");
            entity.Property(e => e.HasEntries).HasColumnName("has_entries");
            entity.Property(e => e.Icon)
                .HasColumnType("character varying")
                .HasColumnName("icon");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTestProjectTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.test_project_types");

            entity.ToTable("common.test_project_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTimezones>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.timezones");

            entity.ToTable("common.timezones", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Tm).HasColumnName("tm");
        });

        modelBuilder.Entity<CommonTraningOrderStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.traning_order_states");

            entity.ToTable("common.traning_order_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTriggerTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.trigger_types");

            entity.ToTable("common.trigger_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTutorStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.tutor_status_types");

            entity.ToTable("common.tutor_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTypeMarks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.type_marks");

            entity.ToTable("common.type_marks", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonTypicalDevelopmentProgramStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.typical_development_program_statuss");

            entity.ToTable("common.typical_development_program_statuss", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonUploadTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.upload_types");

            entity.ToTable("common.upload_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonUsageObjectTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.usage_object_types");

            entity.ToTable("common.usage_object_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonVacancyResponseStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.vacancy_response_status_types");

            entity.ToTable("common.vacancy_response_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonVclassLearningCatalogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.vclass_learning_catalogs");

            entity.ToTable("common.vclass_learning_catalogs", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonVendorStatusTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.vendor_status_types");

            entity.ToTable("common.vendor_status_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonVideoFormats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.video_formats");

            entity.ToTable("common.video_formats", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Width).HasColumnName("width");
        });

        modelBuilder.Entity<CommonViewTaskTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.view_task_types");

            entity.ToTable("common.view_task_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonViewingStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.viewing_states");

            entity.ToTable("common.viewing_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.BkColor)
                .HasColumnType("character varying")
                .HasColumnName("bk_color");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TextColor)
                .HasColumnType("character varying")
                .HasColumnName("text_color");
        });

        modelBuilder.Entity<CommonViolationStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.violation_states");

            entity.ToTable("common.violation_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonViolationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.violation_types");

            entity.ToTable("common.violation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.IconUrl)
                .HasColumnType("character varying")
                .HasColumnName("icon_url");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWebFilterTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.web_filter_types");

            entity.ToTable("common.web_filter_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWebPersonStateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.web_person_state_types");

            entity.ToTable("common.web_person_state_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWebTemplateTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.web_template_types");

            entity.ToTable("common.web_template_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Mode)
                .HasColumnType("character varying")
                .HasColumnName("mode");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.Wvars)
                .HasColumnType("xml")
                .HasColumnName("wvars");
            entity.Property(e => e.WvarsSelector)
                .HasColumnType("character varying")
                .HasColumnName("wvars_selector");
        });

        modelBuilder.Entity<CommonWebsoftApps>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.websoft_apps");

            entity.ToTable("common.websoft_apps", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWeekDayTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.week_day_types");

            entity.ToTable("common.week_day_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ShortName)
                .HasColumnType("character varying")
                .HasColumnName("short_name");
        });

        modelBuilder.Entity<CommonWeekDays>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.week_days");

            entity.ToTable("common.week_days", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWeekTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.week_types");

            entity.ToTable("common.week_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWikiBaseStatuses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.wiki_base_statuses");

            entity.ToTable("common.wiki_base_statuses", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWikiBaseTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.wiki_base_types");

            entity.ToTable("common.wiki_base_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWikiCommunicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.wiki_communication_types");

            entity.ToTable("common.wiki_communication_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWillingnessTravelTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.willingness_travel_types");

            entity.ToTable("common.willingness_travel_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWorkTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.work_types");

            entity.ToTable("common.work_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWorkflowOperationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.workflow_operation_types");

            entity.ToTable("common.workflow_operation_types", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWorkingConditionStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.working_condition_states");

            entity.ToTable("common.working_condition_states", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonWorkspaceThemes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.workspace_themes");

            entity.ToTable("common.workspace_themes", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CommonXamlInterpreters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__common.xaml_interpreters");

            entity.ToTable("common.xaml_interpreters", "dbo");

            entity.Property(e => e.Id)
                .HasMaxLength(128)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
        });

        modelBuilder.Entity<Competence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence");

            entity.ToTable("competence", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Competence)
                .HasForeignKey<Competence>(d => d.Id)
                .HasConstraintName("FK_objects_competence");
        });

        modelBuilder.Entity<CompetenceBlock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_block");

            entity.ToTable("competence_block", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompetenceBlock)
                .HasForeignKey<CompetenceBlock>(d => d.Id)
                .HasConstraintName("FK_objects_competence_block");
        });

        modelBuilder.Entity<CompetenceBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_blocks");

            entity.ToTable("competence_blocks", "dbo");

            entity.HasIndex(e => e.ParentObjectId, "idx_competence_blocks_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_competence_blocks_3160473046961936078");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CompetenceProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profile");

            entity.ToTable("competence_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompetenceProfile)
                .HasForeignKey<CompetenceProfile>(d => d.Id)
                .HasConstraintName("FK_objects_competence_profile");
        });

        modelBuilder.Entity<CompetenceProfileFamily>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profile_family");

            entity.ToTable("competence_profile_family", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompetenceProfileFamily)
                .HasForeignKey<CompetenceProfileFamily>(d => d.Id)
                .HasConstraintName("FK_objects_competence_profile_family");
        });

        modelBuilder.Entity<CompetenceProfileFamilys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profile_familys");

            entity.ToTable("competence_profile_familys", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfiles)
                .HasColumnType("character varying")
                .HasColumnName("competence_profiles");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<CompetenceProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competence_profiles");

            entity.ToTable("competence_profiles", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_competence_profiles_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Competences>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__competences");

            entity.ToTable("competences", "dbo");

            entity.HasIndex(e => e.CompetenceBlockId, "idx_competences_11542014822029879231").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentId, "idx_competences_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_competences_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompetenceBlockId).HasColumnName("competence_block_id");
            entity.Property(e => e.Exercises)
                .HasColumnType("character varying")
                .HasColumnName("exercises");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ComponentPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__component_package");

            entity.ToTable("component_package", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ComponentPackage)
                .HasForeignKey<ComponentPackage>(d => d.Id)
                .HasConstraintName("FK_objects_component_package");
        });

        modelBuilder.Entity<ComponentPackages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__component_packages");

            entity.ToTable("component_packages", "dbo");

            entity.HasIndex(e => e.Code, "idx_component_packages_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsStd, "idx_component_packages_15428234602117094714").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_component_packages_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_component_packages_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DownloadPackageFileId, "idx_component_packages_5802826112187713237").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_component_packages_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ComponentModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("component_modification_date");
            entity.Property(e => e.DownloadDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("download_date");
            entity.Property(e => e.DownloadPackageFileId).HasColumnName("download_package_file_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<CompoundProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__compound_program");

            entity.ToTable("compound_program", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompoundProgram)
                .HasForeignKey<CompoundProgram>(d => d.Id)
                .HasConstraintName("FK_objects_compound_program");
        });

        modelBuilder.Entity<CompoundProgramEducationMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__compound_program_education_methods");

            entity.ToTable("compound_program_education_methods", "dbo");

            entity.HasIndex(e => e.EducationMethodId, "idx_compound_program_education_methods_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CompoundProgramId, "idx_compound_program_education_methods_9583171766200932367").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationMethodName)
                .HasColumnType("character varying")
                .HasColumnName("education_method_name");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectCode)
                .HasColumnType("character varying")
                .HasColumnName("object_code");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.ParentProgpamId).HasColumnName("parent_progpam_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<CompoundPrograms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__compound_programs");

            entity.ToTable("compound_programs", "dbo");

            entity.HasIndex(e => e.LectorsId, "idx_compound_programs_12371757806236328612").HasMethod("gin");

            entity.HasIndex(e => e.Name, "idx_compound_programs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectsId, "idx_compound_programs_4924052259333516046").HasMethod("gin");

            entity.HasIndex(e => e.RoleId, "idx_compound_programs_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowSelfAssignment).HasColumnName("allow_self_assignment");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.LectorsId).HasColumnName("lectors_id");
            entity.Property(e => e.MinPersonNum).HasColumnName("min_person_num");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectsId).HasColumnName("objects_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Connection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__connection");

            entity.ToTable("connection", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Connection)
                .HasForeignKey<Connection>(d => d.Id)
                .HasConstraintName("FK_objects_connection");
        });

        modelBuilder.Entity<Connections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__connections");

            entity.ToTable("connections", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_connections_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DeleteDate, "idx_connections_8647456959344893169").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.DeleteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("delete_date");
            entity.Property(e => e.HostPath)
                .HasColumnType("character varying")
                .HasColumnName("host_path");
            entity.Property(e => e.LearningXml)
                .HasColumnType("character varying")
                .HasColumnName("learning_xml");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PartCode)
                .HasColumnType("character varying")
                .HasColumnName("part_code");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.TerminateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("terminate_date");
            entity.Property(e => e.Unauthorized).HasColumnName("unauthorized");
            entity.Property(e => e.UserCode)
                .HasColumnType("character varying")
                .HasColumnName("user_code");
            entity.Property(e => e.UserFullname)
                .HasColumnType("character varying")
                .HasColumnName("user_fullname");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact");

            entity.ToTable("contact", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Contact)
                .HasForeignKey<Contact>(d => d.Id)
                .HasConstraintName("FK_objects_contact");
        });

        modelBuilder.Entity<ContactResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_result");

            entity.ToTable("contact_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContactResult)
                .HasForeignKey<ContactResult>(d => d.Id)
                .HasConstraintName("FK_objects_contact_result");
        });

        modelBuilder.Entity<ContactResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_results");

            entity.ToTable("contact_results", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ContactType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_type");

            entity.ToTable("contact_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContactType)
                .HasForeignKey<ContactType>(d => d.Id)
                .HasConstraintName("FK_objects_contact_type");
        });

        modelBuilder.Entity<ContactTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contact_types");

            entity.ToTable("contact_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Contacts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contacts");

            entity.ToTable("contacts", "dbo");

            entity.HasIndex(e => e.ContactPersonId, "idx_contacts_11933564311807358861").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContactOrgId, "idx_contacts_12341938026832712259").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContactPositionName, "idx_contacts_14857964631625915878").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContactOrgName, "idx_contacts_17103622329623747937").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContactPersonFullname, "idx_contacts_3518079720675543939").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_contacts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.InitiatorPersonFullname, "idx_contacts_7804278939943827065").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.InitiatorPersonId, "idx_contacts_8116940456830746930").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContactDate, "idx_contacts_8319400591502916122").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ContactDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("contact_date");
            entity.Property(e => e.ContactOrgId).HasColumnName("contact_org_id");
            entity.Property(e => e.ContactOrgName)
                .HasMaxLength(900)
                .HasColumnName("contact_org_name");
            entity.Property(e => e.ContactPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("contact_person_fullname");
            entity.Property(e => e.ContactPersonId).HasColumnName("contact_person_id");
            entity.Property(e => e.ContactPositionName)
                .HasMaxLength(900)
                .HasColumnName("contact_position_name");
            entity.Property(e => e.InitiatorPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("initiator_person_fullname");
            entity.Property(e => e.InitiatorPersonId).HasColumnName("initiator_person_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PreviousContactId).HasColumnName("previous_contact_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Contest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contest");

            entity.ToTable("contest", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Contest)
                .HasForeignKey<Contest>(d => d.Id)
                .HasConstraintName("FK_objects_contest");
        });

        modelBuilder.Entity<ContestMarks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contest_marks");

            entity.ToTable("contest_marks", "dbo");

            entity.HasIndex(e => e.ContestId, "idx_contest_marks_15984213156295314219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParticipantId, "idx_contest_marks_3418811688024842521").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_contest_marks_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_contest_marks_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContestId).HasColumnName("contest_id");
            entity.Property(e => e.ContestName)
                .HasColumnType("character varying")
                .HasColumnName("contest_name");
            entity.Property(e => e.GeneralMark)
                .HasColumnType("character varying")
                .HasColumnName("general_mark");
            entity.Property(e => e.JudgeId).HasColumnName("judge_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ParticipantId).HasColumnName("participant_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.Value)
                .HasColumnType("character varying")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Contests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contests");

            entity.ToTable("contests", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EstimationId)
                .HasColumnType("character varying")
                .HasColumnName("estimation_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract");

            entity.ToTable("contract", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Contract)
                .HasForeignKey<Contract>(d => d.Id)
                .HasConstraintName("FK_objects_contract");
        });

        modelBuilder.Entity<ContractState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract_state");

            entity.ToTable("contract_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContractState)
                .HasForeignKey<ContractState>(d => d.Id)
                .HasConstraintName("FK_objects_contract_state");
        });

        modelBuilder.Entity<ContractStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract_states");

            entity.ToTable("contract_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<ContractType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract_type");

            entity.ToTable("contract_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ContractType)
                .HasForeignKey<ContractType>(d => d.Id)
                .HasConstraintName("FK_objects_contract_type");
        });

        modelBuilder.Entity<ContractTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contract_types");

            entity.ToTable("contract_types", "dbo");

            entity.HasIndex(e => e.Name, "idx_contract_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CurrentNumber)
                .HasColumnType("character varying")
                .HasColumnName("current_number");
            entity.Property(e => e.DefaultFlag).HasColumnName("default_flag");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Prefix)
                .HasColumnType("character varying")
                .HasColumnName("prefix");
            entity.Property(e => e.Suffix)
                .HasColumnType("character varying")
                .HasColumnName("suffix");
        });

        modelBuilder.Entity<Contracts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__contracts");

            entity.ToTable("contracts", "dbo");

            entity.HasIndex(e => e.Code, "idx_contracts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_contracts_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_contracts_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContractTypeId, "idx_contracts_5886835499556141769").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_contracts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.FilesCount).HasColumnName("files_count");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Conversation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__conversation");

            entity.ToTable("conversation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Conversation)
                .HasForeignKey<Conversation>(d => d.Id)
                .HasConstraintName("FK_objects_conversation");
        });

        modelBuilder.Entity<ConversationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__conversation_type");

            entity.ToTable("conversation_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ConversationType)
                .HasForeignKey<ConversationType>(d => d.Id)
                .HasConstraintName("FK_objects_conversation_type");
        });

        modelBuilder.Entity<ConversationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__conversation_types");

            entity.ToTable("conversation_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CanCall).HasColumnName("can_call");
            entity.Property(e => e.CanChangeParticipant).HasColumnName("can_change_participant");
            entity.Property(e => e.CanShowAdditionalInfo).HasColumnName("can_show_additional_info");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OpenAdditionalInfo).HasColumnName("open_additional_info");
            entity.Property(e => e.ProhibitWrite).HasColumnName("prohibit_write");
            entity.Property(e => e.UseAdditionalInfoScript).HasColumnName("use_additional_info_script");
            entity.Property(e => e.UseOpenScript).HasColumnName("use_open_script");
            entity.Property(e => e.VisibleTypeId)
                .HasColumnType("character varying")
                .HasColumnName("visible_type_id");
        });

        modelBuilder.Entity<Conversations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__conversations");

            entity.ToTable("conversations", "dbo");

            entity.HasIndex(e => e.ParticipantsId, "idx_conversations_12108299353249711760").HasMethod("gin");

            entity.HasIndex(e => e.IsPublic, "idx_conversations_15797205877077662592").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActiveObjectId, "idx_conversations_5542468464643754900").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveObjectId).HasColumnName("active_object_id");
            entity.Property(e => e.ActiveObjectName)
                .HasColumnType("character varying")
                .HasColumnName("active_object_name");
            entity.Property(e => e.ActiveObjectType)
                .HasColumnType("character varying")
                .HasColumnName("active_object_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CanCall).HasColumnName("can_call");
            entity.Property(e => e.CanChangeParticipant).HasColumnName("can_change_participant");
            entity.Property(e => e.CanShowAdditionalInfo).HasColumnName("can_show_additional_info");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConversationTypeId).HasColumnName("conversation_type_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomStateId)
                .HasColumnType("character varying")
                .HasColumnName("custom_state_id");
            entity.Property(e => e.FormatId)
                .HasColumnType("character varying")
                .HasColumnName("format_id");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.ListCss)
                .HasColumnType("character varying")
                .HasColumnName("list_css");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Objects).HasColumnName("objects");
            entity.Property(e => e.ParticipantsId).HasColumnName("participants_id");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PositionPriority).HasColumnName("position_priority");
            entity.Property(e => e.ProhibitWrite).HasColumnName("prohibit_write");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<CostCenter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cost_center");

            entity.ToTable("cost_center", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CostCenter)
                .HasForeignKey<CostCenter>(d => d.Id)
                .HasConstraintName("FK_objects_cost_center");
        });

        modelBuilder.Entity<CostCenters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__cost_centers");

            entity.ToTable("cost_centers", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_cost_centers_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_cost_centers_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_cost_centers_3150617849731021391");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course");

            entity.ToTable("course", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Course)
                .HasForeignKey<Course>(d => d.Id)
                .HasConstraintName("FK_objects_course");
        });

        modelBuilder.Entity<CourseModule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_module");

            entity.ToTable("course_module", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CourseModule)
                .HasForeignKey<CourseModule>(d => d.Id)
                .HasConstraintName("FK_objects_course_module");
        });

        modelBuilder.Entity<CourseModules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_modules");

            entity.ToTable("course_modules", "dbo");

            entity.HasIndex(e => e.Eid, "idx_course_modules_3574333424429551041").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_course_modules_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.ActivationCount).HasColumnName("activation_count");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.Eid)
                .HasMaxLength(900)
                .HasColumnName("eid");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LaunchCount).HasColumnName("launch_count");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<CourseParts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__course_parts");

            entity.ToTable("course_parts", "dbo");

            entity.HasIndex(e => e.Code, "idx_course_parts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PartType, "idx_course_parts_2835869091308933237").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_course_parts_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseId, "idx_course_parts_6140445976813544658").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseModuleId).HasColumnName("course_module_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ParentPartCode)
                .HasColumnType("character varying")
                .HasColumnName("parent_part_code");
            entity.Property(e => e.PartCode)
                .HasColumnType("character varying")
                .HasColumnName("part_code");
            entity.Property(e => e.PartName)
                .HasColumnType("character varying")
                .HasColumnName("part_name");
            entity.Property(e => e.PartType)
                .HasMaxLength(900)
                .HasColumnName("part_type");
        });

        modelBuilder.Entity<Courses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__courses");

            entity.ToTable("courses", "dbo");

            entity.HasIndex(e => e.Code, "idx_courses_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_courses_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_courses_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_courses_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_courses_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowDispResponse).HasColumnName("allow_disp_response");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BaseUrl)
                .HasColumnType("character varying")
                .HasColumnName("base_url");
            entity.Property(e => e.ClCourseId).HasColumnName("cl_course_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.DefaultResponseTypeId).HasColumnName("default_response_type_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.MandatoryFillResponse).HasColumnName("mandatory_fill_response");
            entity.Property(e => e.MasteryScore).HasColumnName("mastery_score");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.PwtDisp).HasColumnName("pwt_disp");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.ViewType)
                .HasColumnType("character varying")
                .HasColumnName("view_type");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
            entity.Property(e => e.YourselfStart).HasColumnName("yourself_start");
        });

        modelBuilder.Entity<Covenant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__covenant");

            entity.ToTable("covenant", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Covenant)
                .HasForeignKey<Covenant>(d => d.Id)
                .HasConstraintName("FK_objects_covenant");
        });

        modelBuilder.Entity<Covenants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__covenants");

            entity.ToTable("covenants", "dbo");

            entity.HasIndex(e => e.CloseDate, "idx_covenants_12407610443708243086").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Date, "idx_covenants_13327119919005540841").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_covenants_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationMethodId, "idx_covenants_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_covenants_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_covenants_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_covenants_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CloseDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("close_date");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PeriodWork).HasColumnName("period_work");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ProcDeduct).HasColumnName("proc_deduct");
            entity.Property(e => e.ProcPayBank).HasColumnName("proc_pay_bank");
            entity.Property(e => e.ProcPayCollab).HasColumnName("proc_pay_collab");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Credential>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__credential");

            entity.ToTable("credential", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Credential)
                .HasForeignKey<Credential>(d => d.Id)
                .HasConstraintName("FK_objects_credential");
        });

        modelBuilder.Entity<Credentials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__credentials");

            entity.ToTable("credentials", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<CustomAdminTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_admin_template");

            entity.ToTable("custom_admin_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomAdminTemplate)
                .HasForeignKey<CustomAdminTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_custom_admin_template");
        });

        modelBuilder.Entity<CustomAdminTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_admin_templates");

            entity.ToTable("custom_admin_templates", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_custom_admin_templates_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FormName)
                .HasColumnType("character varying")
                .HasColumnName("form_name");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<CustomChatbotTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_chatbot_template");

            entity.ToTable("custom_chatbot_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomChatbotTemplate)
                .HasForeignKey<CustomChatbotTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_custom_chatbot_template");
        });

        modelBuilder.Entity<CustomChatbotTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_chatbot_templates");

            entity.ToTable("custom_chatbot_templates", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_custom_chatbot_templates_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OutType)
                .HasColumnType("character varying")
                .HasColumnName("out_type");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
        });

        modelBuilder.Entity<CustomReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_report");

            entity.ToTable("custom_report", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomReport)
                .HasForeignKey<CustomReport>(d => d.Id)
                .HasConstraintName("FK_objects_custom_report");
        });

        modelBuilder.Entity<CustomReports>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_reports");

            entity.ToTable("custom_reports", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_custom_reports_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Connect2Object, "idx_custom_reports_6594626254437275016").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Block)
                .HasColumnType("character varying")
                .HasColumnName("block");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Connect2Object)
                .HasMaxLength(900)
                .HasColumnName("connect_2_object");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectNameType)
                .HasColumnType("character varying")
                .HasColumnName("object_name_type");
            entity.Property(e => e.Subscription).HasColumnName("subscription");
        });

        modelBuilder.Entity<CustomWebTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_template");

            entity.ToTable("custom_web_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomWebTemplate)
                .HasForeignKey<CustomWebTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_custom_web_template");
        });

        modelBuilder.Entity<CustomWebTemplateGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_template_group");

            entity.ToTable("custom_web_template_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomWebTemplateGroup)
                .HasForeignKey<CustomWebTemplateGroup>(d => d.Id)
                .HasConstraintName("FK_objects_custom_web_template_group");
        });

        modelBuilder.Entity<CustomWebTemplateGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_template_groups");

            entity.ToTable("custom_web_template_groups", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_custom_web_template_groups_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_custom_web_template_groups_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_custom_web_template_groups_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<CustomWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__custom_web_templates");

            entity.ToTable("custom_web_templates", "dbo");

            entity.HasIndex(e => e.Code, "idx_custom_web_templates_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_custom_web_templates_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_custom_web_templates_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CwtType)
                .HasColumnType("character varying")
                .HasColumnName("cwt_type");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.Mode)
                .HasColumnType("character varying")
                .HasColumnName("mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.OutType)
                .HasColumnType("character varying")
                .HasColumnName("out_type");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Template)
                .HasColumnType("character varying")
                .HasColumnName("template");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<DevelopmentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_method");

            entity.ToTable("development_method", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DevelopmentMethod)
                .HasForeignKey<DevelopmentMethod>(d => d.Id)
                .HasConstraintName("FK_objects_development_method");
        });

        modelBuilder.Entity<DevelopmentMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_methods");

            entity.ToTable("development_methods", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DevelopmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_plan");

            entity.ToTable("development_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DevelopmentPlan)
                .HasForeignKey<DevelopmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_development_plan");
        });

        modelBuilder.Entity<DevelopmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_plans");

            entity.ToTable("development_plans", "dbo");

            entity.HasIndex(e => e.DepartmentId, "idx_development_plans_14827633953248932632").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpertPersonId, "idx_development_plans_15179806528777423025").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_development_plans_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_development_plans_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpertPersonFullname, "idx_development_plans_5890983671244772754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_development_plans_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsCustomExperts, "idx_development_plans_8768740737131510458").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentPlanId, "idx_development_plans_9338857772878921297").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CustomExpertsArray, "idx_development_plans_9862283384034150577").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AppraiseDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("appraise_date");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentAppraiseType)
                .HasColumnType("character varying")
                .HasColumnName("assessment_appraise_type");
            entity.Property(e => e.AssessmentPlanId).HasColumnName("assessment_plan_id");
            entity.Property(e => e.CareerReserveId).HasColumnName("career_reserve_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CustomExperts)
                .HasColumnType("character varying")
                .HasColumnName("custom_experts");
            entity.Property(e => e.CustomExpertsArray).HasColumnName("custom_experts_array");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .HasColumnType("character varying")
                .HasColumnName("department_name");
            entity.Property(e => e.ExpertPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionId).HasColumnName("expert_person_position_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.ExpertPersonPositionParentId).HasColumnName("expert_person_position_parent_id");
            entity.Property(e => e.FlagAppraiseDepartment).HasColumnName("flag_appraise_department");
            entity.Property(e => e.FlagIsProcessed).HasColumnName("flag_is_processed");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.IsCustomExperts).HasColumnName("is_custom_experts");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsFinal).HasColumnName("is_final");
            entity.Property(e => e.IsReady).HasColumnName("is_ready");
            entity.Property(e => e.IsWorkflowInit).HasColumnName("is_workflow_init");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonPositionParentId).HasColumnName("person_position_parent_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowState)
                .HasColumnType("character varying")
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateLastDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("workflow_state_last_date");
            entity.Property(e => e.WorkflowStateName)
                .HasColumnType("character varying")
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<DevelopmentPotential>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_potential");

            entity.ToTable("development_potential", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DevelopmentPotential)
                .HasForeignKey<DevelopmentPotential>(d => d.Id)
                .HasConstraintName("FK_objects_development_potential");
        });

        modelBuilder.Entity<DevelopmentPotentials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__development_potentials");

            entity.ToTable("development_potentials", "dbo");

            entity.HasIndex(e => e.Code, "idx_development_potentials_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsStd, "idx_development_potentials_15428234602117094714").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_development_potentials_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_development_potentials_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_development_potentials_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DeviceReg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__device_reg");

            entity.ToTable("device_reg", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DeviceReg)
                .HasForeignKey<DeviceReg>(d => d.Id)
                .HasConstraintName("FK_objects_device_reg");
        });

        modelBuilder.Entity<DeviceRegs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__device_regs");

            entity.ToTable("device_regs", "dbo");

            entity.HasIndex(e => e.Tokens, "idx_device_regs_462600688949218642").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DeviceId)
                .HasColumnType("character varying")
                .HasColumnName("device_id");
            entity.Property(e => e.LastAccessDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_access_date");
            entity.Property(e => e.MobileAppConfigId).HasColumnName("mobile_app_config_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Tokens).HasColumnName("tokens");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DigitalSignature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__digital_signature");

            entity.ToTable("digital_signature", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DigitalSignature)
                .HasForeignKey<DigitalSignature>(d => d.Id)
                .HasConstraintName("FK_objects_digital_signature");
        });

        modelBuilder.Entity<DigitalSignatures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__digital_signatures");

            entity.ToTable("digital_signatures", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_digital_signatures_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_digital_signatures_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_digital_signatures_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsSigned, "idx_digital_signatures_17030594517256562197").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_digital_signatures_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CustomWebTemplateId, "idx_digital_signatures_18000201295386929898").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_digital_signatures_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_digital_signatures_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_digital_signatures_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_digital_signatures_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_digital_signatures_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_digital_signatures_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SignDate, "idx_digital_signatures_693455389702271479").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.IsSigned).HasColumnName("is_signed");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.SignDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sign_date");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Dimension>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dimension");

            entity.ToTable("dimension", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Dimension)
                .HasForeignKey<Dimension>(d => d.Id)
                .HasConstraintName("FK_objects_dimension");
        });

        modelBuilder.Entity<Dimensions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dimensions");

            entity.ToTable("dimensions", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<Discharge>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__discharge");

            entity.ToTable("discharge", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Discharge)
                .HasForeignKey<Discharge>(d => d.Id)
                .HasConstraintName("FK_objects_discharge");
        });

        modelBuilder.Entity<Discharges>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__discharges");

            entity.ToTable("discharges", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<DnAcademDebt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_debt");

            entity.ToTable("dn_academ_debt", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnAcademDebt)
                .HasForeignKey<DnAcademDebt>(d => d.Id)
                .HasConstraintName("FK_objects_dn_academ_debt");
        });

        modelBuilder.Entity<DnAcademDebts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_debts");

            entity.ToTable("dn_academ_debts", "dbo");

            entity.HasIndex(e => e.ChairId, "idx_dn_academ_debts_1005992190650841063").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_dn_academ_debts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FacultyId, "idx_dn_academ_debts_18384339555295416187").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_academ_debts_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_academ_debts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ContrFormId).HasColumnName("contr_form_id");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LatestDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("latest_date");
            entity.Property(e => e.LiquidDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("liquid_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.StudGroupId).HasColumnName("stud_group_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnAcademYear>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_year");

            entity.ToTable("dn_academ_year", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnAcademYear)
                .HasForeignKey<DnAcademYear>(d => d.Id)
                .HasConstraintName("FK_objects_dn_academ_year");
        });

        modelBuilder.Entity<DnAcademYears>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_academ_years");

            entity.ToTable("dn_academ_years", "dbo");

            entity.HasIndex(e => e.EndYear, "idx_dn_academ_years_14278471404828746242").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartYear, "idx_dn_academ_years_14773117617640816878").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_academ_years_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_academ_years_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AmountWeekAutumnalTerm, "idx_dn_academ_years_6394274407737233824").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_academ_years_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AmountWeekSpringTerm, "idx_dn_academ_years_8036205071707981334").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AmountWeekAutumnalTerm).HasColumnName("amount_week_autumnal_term");
            entity.Property(e => e.AmountWeekSpringTerm).HasColumnName("amount_week_spring_term");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EndYear)
                .HasMaxLength(900)
                .HasColumnName("end_year");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.StartYear)
                .HasMaxLength(900)
                .HasColumnName("start_year");
            entity.Property(e => e.StrYears)
                .HasColumnType("character varying")
                .HasColumnName("str_years");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnAuditorium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_auditorium");

            entity.ToTable("dn_auditorium", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnAuditorium)
                .HasForeignKey<DnAuditorium>(d => d.Id)
                .HasConstraintName("FK_objects_dn_auditorium");
        });

        modelBuilder.Entity<DnAuditoriums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_auditoriums");

            entity.ToTable("dn_auditoriums", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_auditoriums_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_dn_auditoriums_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_auditoriums_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_auditoriums_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.NumberPlaces, "idx_dn_auditoriums_8816364178338859514").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NumberPlaces)
                .HasMaxLength(900)
                .HasColumnName("number_places");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnBlockDiscipline>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_block_discipline");

            entity.ToTable("dn_block_discipline", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnBlockDiscipline)
                .HasForeignKey<DnBlockDiscipline>(d => d.Id)
                .HasConstraintName("FK_objects_dn_block_discipline");
        });

        modelBuilder.Entity<DnBlockDisciplines>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_block_disciplines");

            entity.ToTable("dn_block_disciplines", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_block_disciplines_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_block_disciplines_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_block_disciplines_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_block_disciplines_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnControlEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_event");

            entity.ToTable("dn_control_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnControlEvent)
                .HasForeignKey<DnControlEvent>(d => d.Id)
                .HasConstraintName("FK_objects_dn_control_event");
        });

        modelBuilder.Entity<DnControlEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_events");

            entity.ToTable("dn_control_events", "dbo");

            entity.HasIndex(e => e.ChairId, "idx_dn_control_events_1005992190650841063").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_dn_control_events_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FacultyId, "idx_dn_control_events_18384339555295416187").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_control_events_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_control_events_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ControlFormId).HasColumnName("control_form_id");
            entity.Property(e => e.DateEvent)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_event");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.LessonId).HasColumnName("lesson_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.StudGroupId).HasColumnName("stud_group_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnControlForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_form");

            entity.ToTable("dn_control_form", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnControlForm)
                .HasForeignKey<DnControlForm>(d => d.Id)
                .HasConstraintName("FK_objects_dn_control_form");
        });

        modelBuilder.Entity<DnControlForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_control_forms");

            entity.ToTable("dn_control_forms", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnDisciplBlocks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_discipl_blocks");

            entity.ToTable("dn_discipl_blocks", "dbo");

            entity.HasIndex(e => e.DisciplId, "idx_dn_discipl_blocks_2203560375570847626").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BlockId, "idx_dn_discipl_blocks_7419240646712634121").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BlockId).HasColumnName("block_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<DnDiscipline>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_discipline");

            entity.ToTable("dn_discipline", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnDiscipline)
                .HasForeignKey<DnDiscipline>(d => d.Id)
                .HasConstraintName("FK_objects_dn_discipline");
        });

        modelBuilder.Entity<DnDisciplines>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_disciplines");

            entity.ToTable("dn_disciplines", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_disciplines_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DisciplBlockId, "idx_dn_disciplines_1691732645784637223").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_disciplines_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_disciplines_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_disciplines_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DisciplBlockId).HasColumnName("discipl_block_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnEduCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_edu_condition");

            entity.ToTable("dn_edu_condition", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnEduCondition)
                .HasForeignKey<DnEduCondition>(d => d.Id)
                .HasConstraintName("FK_objects_dn_edu_condition");
        });

        modelBuilder.Entity<DnEduConditions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_edu_conditions");

            entity.ToTable("dn_edu_conditions", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnEducatEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_event");

            entity.ToTable("dn_educat_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnEducatEvent)
                .HasForeignKey<DnEducatEvent>(d => d.Id)
                .HasConstraintName("FK_objects_dn_educat_event");
        });

        modelBuilder.Entity<DnEducatEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_events");

            entity.ToTable("dn_educat_events", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnEducatForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_form");

            entity.ToTable("dn_educat_form", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnEducatForm)
                .HasForeignKey<DnEducatForm>(d => d.Id)
                .HasConstraintName("FK_objects_dn_educat_form");
        });

        modelBuilder.Entity<DnEducatForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_educat_forms");

            entity.ToTable("dn_educat_forms", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnGroupStudents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_group_students");

            entity.ToTable("dn_group_students", "dbo");

            entity.HasIndex(e => e.StudentId, "idx_dn_group_students_903835071996234325").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .HasColumnType("character varying")
                .HasColumnName("address");
            entity.Property(e => e.BirthDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("birth_date");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.Email)
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EmailConf).HasColumnName("email_conf");
            entity.Property(e => e.EmailConfCode)
                .HasColumnType("character varying")
                .HasColumnName("email_conf_code");
            entity.Property(e => e.EmailConfDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("email_conf_date");
            entity.Property(e => e.Firstname)
                .HasColumnType("character varying")
                .HasColumnName("firstname");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Lastname)
                .HasColumnType("character varying")
                .HasColumnName("lastname");
            entity.Property(e => e.Login)
                .HasColumnType("character varying")
                .HasColumnName("login");
            entity.Property(e => e.MainGroupId).HasColumnName("main_group_id");
            entity.Property(e => e.Middlename)
                .HasColumnType("character varying")
                .HasColumnName("middlename");
            entity.Property(e => e.MobilePhone)
                .HasColumnType("character varying")
                .HasColumnName("mobile_phone");
            entity.Property(e => e.MobilePhoneConf).HasColumnName("mobile_phone_conf");
            entity.Property(e => e.MobilePhoneConfCode)
                .HasColumnType("character varying")
                .HasColumnName("mobile_phone_conf_code");
            entity.Property(e => e.MobilePhoneConfDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("mobile_phone_conf_date");
            entity.Property(e => e.Password)
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Phone)
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.Sex)
                .HasColumnType("character varying")
                .HasColumnName("sex");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.SystemEmail)
                .HasColumnType("character varying")
                .HasColumnName("system_email");
        });

        modelBuilder.Entity<DnIndEducatPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_ind_educat_plan");

            entity.ToTable("dn_ind_educat_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnIndEducatPlan)
                .HasForeignKey<DnIndEducatPlan>(d => d.Id)
                .HasConstraintName("FK_objects_dn_ind_educat_plan");
        });

        modelBuilder.Entity<DnIndEducatPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_ind_educat_plans");

            entity.ToTable("dn_ind_educat_plans", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_ind_educat_plans_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_ind_educat_plans_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_ind_educat_plans_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ControlFormId).HasColumnName("control_form_id");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.IsCourseWork)
                .HasColumnType("character varying")
                .HasColumnName("is_course_work");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProgDisciplId).HasColumnName("prog_discipl_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.ThemeCourseWork)
                .HasColumnType("character varying")
                .HasColumnName("theme_course_work");
        });

        modelBuilder.Entity<DnLesson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_lesson");

            entity.ToTable("dn_lesson", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnLesson)
                .HasForeignKey<DnLesson>(d => d.Id)
                .HasConstraintName("FK_objects_dn_lesson");
        });

        modelBuilder.Entity<DnLessons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_lessons");

            entity.ToTable("dn_lessons", "dbo");

            entity.HasIndex(e => e.ChairId, "idx_dn_lessons_1005992190650841063").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_dn_lessons_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DisciplineId, "idx_dn_lessons_16242031477712483646").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FacultyId, "idx_dn_lessons_18384339555295416187").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_lessons_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_lessons_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuditoriumId).HasColumnName("auditorium_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.EducatEventFormId).HasColumnName("educat_event_form_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.LessonDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("lesson_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnProgDiscAppend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_prog_disc_append");

            entity.ToTable("dn_prog_disc_append", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnProgDiscAppend)
                .HasForeignKey<DnProgDiscAppend>(d => d.Id)
                .HasConstraintName("FK_objects_dn_prog_disc_append");
        });

        modelBuilder.Entity<DnProgDiscAppends>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_prog_disc_appends");

            entity.ToTable("dn_prog_disc_appends", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_prog_disc_appends_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_prog_disc_appends_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_prog_disc_appends_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_prog_disc_appends_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EducatFormId)
                .HasColumnType("character varying")
                .HasColumnName("educat_form_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ProgramDisciplineId).HasColumnName("program_discipline_id");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnProgramDiscipl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_program_discipl");

            entity.ToTable("dn_program_discipl", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnProgramDiscipl)
                .HasForeignKey<DnProgramDiscipl>(d => d.Id)
                .HasConstraintName("FK_objects_dn_program_discipl");
        });

        modelBuilder.Entity<DnProgramDiscipls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_program_discipls");

            entity.ToTable("dn_program_discipls", "dbo");

            entity.HasIndex(e => e.AllLaboriousnIndep, "idx_dn_program_discipls_11635562161193576267").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AllLaboriousnAudit, "idx_dn_program_discipls_12899080229988102461").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_dn_program_discipls_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ControlForm, "idx_dn_program_discipls_1461423343704428972").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DisciplineId, "idx_dn_program_discipls_16242031477712483646").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_program_discipls_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_program_discipls_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_program_discipls_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AcademYearId, "idx_dn_program_discipls_732535088174152938").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AllLaboriousnAudit).HasColumnName("all_laboriousn_audit");
            entity.Property(e => e.AllLaboriousnIndep).HasColumnName("all_laboriousn_indep");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ControlForm).HasColumnName("control_form");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.EducatFormId).HasColumnName("educat_form_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnRegister>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_register");

            entity.ToTable("dn_register", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnRegister)
                .HasForeignKey<DnRegister>(d => d.Id)
                .HasConstraintName("FK_objects_dn_register");
        });

        modelBuilder.Entity<DnRegisterStudents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_register_students");

            entity.ToTable("dn_register_students", "dbo");

            entity.HasIndex(e => e.RegisterId, "idx_dn_register_students_5274126509715647496").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StudentId, "idx_dn_register_students_903835071996234325").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ContrFormId).HasColumnName("contr_form_id");
            entity.Property(e => e.DateEvent)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_event");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.RegisterId).HasColumnName("register_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
        });

        modelBuilder.Entity<DnRegisters>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_registers");

            entity.ToTable("dn_registers", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_registers_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_registers_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ContrFormId).HasColumnName("contr_form_id");
            entity.Property(e => e.ControlEventId).HasColumnName("control_event_id");
            entity.Property(e => e.DateEvent)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_event");
            entity.Property(e => e.DisciplId).HasColumnName("discipl_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_schedule");

            entity.ToTable("dn_schedule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSchedule)
                .HasForeignKey<DnSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_dn_schedule");
        });

        modelBuilder.Entity<DnSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_schedules");

            entity.ToTable("dn_schedules", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_schedules_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_schedules_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_schedules_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Chair).HasColumnName("chair");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Faculty).HasColumnName("faculty");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.TermId).HasColumnName("term_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnSpecial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_special");

            entity.ToTable("dn_special", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSpecial)
                .HasForeignKey<DnSpecial>(d => d.Id)
                .HasConstraintName("FK_objects_dn_special");
        });

        modelBuilder.Entity<DnSpecialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_specialization");

            entity.ToTable("dn_specialization", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSpecialization)
                .HasForeignKey<DnSpecialization>(d => d.Id)
                .HasConstraintName("FK_objects_dn_specialization");
        });

        modelBuilder.Entity<DnSpecializations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_specializations");

            entity.ToTable("dn_specializations", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_specializations_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_specializations_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.SpecialityId).HasColumnName("speciality_id");
        });

        modelBuilder.Entity<DnSpecials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_specials");

            entity.ToTable("dn_specials", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_specials_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_specials_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FacultId).HasColumnName("facult_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<DnStream>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stream");

            entity.ToTable("dn_stream", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStream)
                .HasForeignKey<DnStream>(d => d.Id)
                .HasConstraintName("FK_objects_dn_stream");
        });

        modelBuilder.Entity<DnStreams>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_streams");

            entity.ToTable("dn_streams", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_streams_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_streams_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_streams_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_streams_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnStudCentrtestResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_centrtest_result");

            entity.ToTable("dn_stud_centrtest_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStudCentrtestResult)
                .HasForeignKey<DnStudCentrtestResult>(d => d.Id)
                .HasConstraintName("FK_objects_dn_stud_centrtest_result");
        });

        modelBuilder.Entity<DnStudCentrtestResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_centrtest_results");

            entity.ToTable("dn_stud_centrtest_results", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_dn_stud_centrtest_results_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ResultDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("result_date");
            entity.Property(e => e.StudentFullname)
                .HasColumnType("character varying")
                .HasColumnName("student_fullname");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.Subject)
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnStudGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_group");

            entity.ToTable("dn_stud_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStudGroup)
                .HasForeignKey<DnStudGroup>(d => d.Id)
                .HasConstraintName("FK_objects_dn_stud_group");
        });

        modelBuilder.Entity<DnStudGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_stud_groups");

            entity.ToTable("dn_stud_groups", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_stud_groups_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_stud_groups_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_stud_groups_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_stud_groups_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Faculty).HasColumnName("faculty");
            entity.Property(e => e.GroupSize).HasColumnName("group_size");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.StreamId).HasColumnName("stream_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnStudent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_student");

            entity.ToTable("dn_student", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnStudent)
                .HasForeignKey<DnStudent>(d => d.Id)
                .HasConstraintName("FK_objects_dn_student");
        });

        modelBuilder.Entity<DnStudents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_students");

            entity.ToTable("dn_students", "dbo");

            entity.HasIndex(e => e.Email, "idx_dn_students_13021460415823014527").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdressFactLive)
                .HasColumnType("character varying")
                .HasColumnName("adress_fact_live");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EduConditionId)
                .HasColumnType("character varying")
                .HasColumnName("edu_condition_id");
            entity.Property(e => e.EducatFormId)
                .HasColumnType("character varying")
                .HasColumnName("educat_form_id");
            entity.Property(e => e.EducatGroups)
                .HasColumnType("character varying")
                .HasColumnName("educat_groups");
            entity.Property(e => e.EducatInstitution)
                .HasColumnType("character varying")
                .HasColumnName("educat_institution");
            entity.Property(e => e.Email)
                .HasMaxLength(900)
                .HasColumnName("email");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.FileName)
                .HasColumnType("character varying")
                .HasColumnName("file_name");
            entity.Property(e => e.IsExcellent).HasColumnName("is_excellent");
            entity.Property(e => e.MainGroupId).HasColumnName("main_group_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Phone)
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.Region)
                .HasColumnType("character varying")
                .HasColumnName("region");
            entity.Property(e => e.ScientAdviserId).HasColumnName("scient_adviser_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.StudDtId)
                .HasColumnType("character varying")
                .HasColumnName("stud_dt_id");
            entity.Property(e => e.Subject)
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnSubjectPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_subject_plan");

            entity.ToTable("dn_subject_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnSubjectPlan)
                .HasForeignKey<DnSubjectPlan>(d => d.Id)
                .HasConstraintName("FK_objects_dn_subject_plan");
        });

        modelBuilder.Entity<DnSubjectPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_subject_plans");

            entity.ToTable("dn_subject_plans", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EducatEventId).HasColumnName("educat_event_id");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ProgDiscAppendId).HasColumnName("prog_disc_append_id");
            entity.Property(e => e.ProgramDisciplineId).HasColumnName("program_discipline_id");
            entity.Property(e => e.Subject)
                .HasColumnType("character varying")
                .HasColumnName("subject");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnTerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_term");

            entity.ToTable("dn_term", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnTerm)
                .HasForeignKey<DnTerm>(d => d.Id)
                .HasConstraintName("FK_objects_dn_term");
        });

        modelBuilder.Entity<DnTerms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_terms");

            entity.ToTable("dn_terms", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.StrTerm)
                .HasColumnType("character varying")
                .HasColumnName("str_term");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnTrainMethodComplex>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_train_method_complex");

            entity.ToTable("dn_train_method_complex", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnTrainMethodComplex)
                .HasForeignKey<DnTrainMethodComplex>(d => d.Id)
                .HasConstraintName("FK_objects_dn_train_method_complex");
        });

        modelBuilder.Entity<DnTrainMethodComplexs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_train_method_complexs");

            entity.ToTable("dn_train_method_complexs", "dbo");

            entity.HasIndex(e => e.ProgramDisciplineName, "idx_dn_train_method_complexs_1063771878819362841").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LectorId, "idx_dn_train_method_complexs_13041527685410513130").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_dn_train_method_complexs_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DisciplineId, "idx_dn_train_method_complexs_16242031477712483646").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_dn_train_method_complexs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_train_method_complexs_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_train_method_complexs_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ProgramDisciplineId, "idx_dn_train_method_complexs_8022349014427868733").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DisciplineId).HasColumnName("discipline_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ProgramDisciplineId).HasColumnName("program_discipline_id");
            entity.Property(e => e.ProgramDisciplineName)
                .HasMaxLength(900)
                .HasColumnName("program_discipline_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DnWorkCurriculum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_work_curriculum");

            entity.ToTable("dn_work_curriculum", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DnWorkCurriculum)
                .HasForeignKey<DnWorkCurriculum>(d => d.Id)
                .HasConstraintName("FK_objects_dn_work_curriculum");
        });

        modelBuilder.Entity<DnWorkCurriculums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__dn_work_curriculums");

            entity.ToTable("dn_work_curriculums", "dbo");

            entity.HasIndex(e => e.Code, "idx_dn_work_curriculums_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_dn_work_curriculums_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_dn_work_curriculums_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcademYearId).HasColumnName("academ_year_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChairId).HasColumnName("chair_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EducatFormId).HasColumnName("educat_form_id");
            entity.Property(e => e.FacultyId).HasColumnName("faculty_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.SpecialId).HasColumnName("special_id");
            entity.Property(e => e.SpecializationId).HasColumnName("specialization_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<DocType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__doc_type");

            entity.ToTable("doc_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DocType)
                .HasForeignKey<DocType>(d => d.Id)
                .HasConstraintName("FK_objects_doc_type");
        });

        modelBuilder.Entity<DocTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__doc_types");

            entity.ToTable("doc_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_doc_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_doc_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_doc_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CustomAdminTemplateId).HasColumnName("custom_admin_template_id");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.DispName)
                .HasColumnType("character varying")
                .HasColumnName("disp_name");
            entity.Property(e => e.IsCraveForReboot).HasColumnName("is_crave_for_reboot");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document");

            entity.ToTable("document", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Document)
                .HasForeignKey<Document>(d => d.Id)
                .HasConstraintName("FK_objects_document");
        });

        modelBuilder.Entity<DocumentCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document_collaborators");

            entity.ToTable("document_collaborators", "dbo");

            entity.HasIndex(e => e.ParentObjectId, "idx_document_collaborators_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SiteId, "idx_document_collaborators_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DocumentId, "idx_document_collaborators_5164967155976800037").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_document_collaborators_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CanCreate).HasColumnName("can_create");
            entity.Property(e => e.CanDelete).HasColumnName("can_delete");
            entity.Property(e => e.CanEdit).HasColumnName("can_edit");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.ParentObjectName)
                .HasColumnType("character varying")
                .HasColumnName("parent_object_name");
            entity.Property(e => e.ParentObjectType)
                .HasColumnType("character varying")
                .HasColumnName("parent_object_type");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
        });

        modelBuilder.Entity<DocumentCommentEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document_comment_entry");

            entity.ToTable("document_comment_entry", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DocumentCommentEntry)
                .HasForeignKey<DocumentCommentEntry>(d => d.Id)
                .HasConstraintName("FK_objects_document_comment_entry");
        });

        modelBuilder.Entity<DocumentCommentEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__document_comment_entrys");

            entity.ToTable("document_comment_entrys", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_document_comment_entrys_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UserId, "idx_document_comment_entrys_2453072305403643195").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_document_comment_entrys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_document_comment_entrys_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentDocumentEntryId, "idx_document_comment_entrys_6644152429197220106").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PortalDocId, "idx_document_comment_entrys_9924016971952118411").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentDocumentEntryId, e.Id }, "idxh_document_comment_entrys_16672419090115420256");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorInfo)
                .HasColumnType("character varying")
                .HasColumnName("author_info");
            entity.Property(e => e.ChildNum).HasColumnName("child_num");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Deleted).HasColumnName("deleted");
            entity.Property(e => e.How2show)
                .HasColumnType("character varying")
                .HasColumnName("how2show");
            entity.Property(e => e.LastCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentDocumentEntryId).HasColumnName("parent_document_entry_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PortalDocId).HasColumnName("portal_doc_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<Documents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__documents");

            entity.ToTable("documents", "dbo");

            entity.HasIndex(e => e.Code, "idx_documents_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentDocumentId, "idx_documents_16970856361771005424").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_documents_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SiteId, "idx_documents_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_documents_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_documents_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_documents_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Position, "idx_documents_7157370815309160847").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentDocumentId, e.Id }, "idxh_documents_3495967062039676104");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessExists).HasColumnName("access_exists");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogListDesc)
                .HasColumnType("character varying")
                .HasColumnName("catalog_list_desc");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CustomTemplateType).HasColumnName("custom_template_type");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.Invariable).HasColumnName("invariable");
            entity.Property(e => e.IsLink).HasColumnName("is_link");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("kp_end_date");
            entity.Property(e => e.KpStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("kp_start_date");
            entity.Property(e => e.LinkHref)
                .HasColumnType("character varying")
                .HasColumnName("link_href");
            entity.Property(e => e.LinkTarget)
                .HasColumnType("character varying")
                .HasColumnName("link_target");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ParentDocumentId).HasColumnName("parent_document_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.ParentObjectName)
                .HasColumnType("character varying")
                .HasColumnName("parent_object_name");
            entity.Property(e => e.ParentObjectType)
                .HasColumnType("character varying")
                .HasColumnName("parent_object_type");
            entity.Property(e => e.PermitSubscription).HasColumnName("permit_subscription");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .HasColumnType("character varying")
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Template)
                .HasColumnType("character varying")
                .HasColumnName("template");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<DownloadPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__download_package");

            entity.ToTable("download_package", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DownloadPackage)
                .HasForeignKey<DownloadPackage>(d => d.Id)
                .HasConstraintName("FK_objects_download_package");
        });

        modelBuilder.Entity<DownloadPackages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__download_packages");

            entity.ToTable("download_packages", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.ExchangeServerId).HasColumnName("exchange_server_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PackageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("package_date");
            entity.Property(e => e.PackageId)
                .HasColumnType("character varying")
                .HasColumnName("package_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<EducationForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_form");

            entity.ToTable("education_form", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationForm)
                .HasForeignKey<EducationForm>(d => d.Id)
                .HasConstraintName("FK_objects_education_form");
        });

        modelBuilder.Entity<EducationForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_forms");

            entity.ToTable("education_forms", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_method");

            entity.ToTable("education_method", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationMethod)
                .HasForeignKey<EducationMethod>(d => d.Id)
                .HasConstraintName("FK_objects_education_method");
        });

        modelBuilder.Entity<EducationMethodLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_method_lectors");

            entity.ToTable("education_method_lectors", "dbo");

            entity.HasIndex(e => e.LectorId, "idx_education_method_lectors_13041527685410513130").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationMethodId, "idx_education_method_lectors_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_education_method_lectors_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<EducationMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_methods");

            entity.ToTable("education_methods", "dbo");

            entity.HasIndex(e => e.Code, "idx_education_methods_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_education_methods_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_education_methods_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_education_methods_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_education_methods_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostNds).HasColumnName("cost_nds");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EventForm)
                .HasColumnType("character varying")
                .HasColumnName("event_form");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<EducationMode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_mode");

            entity.ToTable("education_mode", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationMode)
                .HasForeignKey<EducationMode>(d => d.Id)
                .HasConstraintName("FK_objects_education_mode");
        });

        modelBuilder.Entity<EducationModes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_modes");

            entity.ToTable("education_modes", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_org");

            entity.ToTable("education_org", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationOrg)
                .HasForeignKey<EducationOrg>(d => d.Id)
                .HasConstraintName("FK_objects_education_org");
        });

        modelBuilder.Entity<EducationOrgLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_org_lectors");

            entity.ToTable("education_org_lectors", "dbo");

            entity.HasIndex(e => e.LectorId, "idx_education_org_lectors_13041527685410513130").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_education_org_lectors_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_education_org_lectors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_education_org_lectors_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsProviderCourses, "idx_education_org_lectors_8403859875433310141").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DispName)
                .HasColumnType("character varying")
                .HasColumnName("disp_name");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.IsProviderCourses).HasColumnName("is_provider_courses");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<EducationOrgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_orgs");

            entity.ToTable("education_orgs", "dbo");

            entity.HasIndex(e => e.Name, "idx_education_orgs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DispName, "idx_education_orgs_3870709901753078958").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_education_orgs_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.IsProviderCourses, "idx_education_orgs_8403859875433310141").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ContactMain)
                .HasColumnType("character varying")
                .HasColumnName("contact_main");
            entity.Property(e => e.DispName)
                .HasMaxLength(900)
                .HasColumnName("disp_name");
            entity.Property(e => e.Email)
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasColumnType("character varying")
                .HasColumnName("fax");
            entity.Property(e => e.IsProviderCourses).HasColumnName("is_provider_courses");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ProviderCourseTypeId).HasColumnName("provider_course_type_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.TelephoneMobile)
                .HasColumnType("character varying")
                .HasColumnName("telephone_mobile");
            entity.Property(e => e.TelephoneWork)
                .HasColumnType("character varying")
                .HasColumnName("telephone_work");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_plan");

            entity.ToTable("education_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationPlan)
                .HasForeignKey<EducationPlan>(d => d.Id)
                .HasConstraintName("FK_objects_education_plan");
        });

        modelBuilder.Entity<EducationPlanCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_plan_collaborators");

            entity.ToTable("education_plan_collaborators", "dbo");

            entity.HasIndex(e => e.EducationMethodId, "idx_education_plan_collaborators_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationPlanId, "idx_education_plan_collaborators_4473033409711827227").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_education_plan_collaborators_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DevelopmentPlanId, "idx_education_plan_collaborators_9169546952326355340").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DevelopmentPlanId).HasColumnName("development_plan_id");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectCode)
                .HasColumnType("character varying")
                .HasColumnName("object_code");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("object_start_date");
            entity.Property(e => e.ParentProgpamId).HasColumnName("parent_progpam_id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPosition)
                .HasColumnType("character varying")
                .HasColumnName("person_position");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PlanDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_date");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.ResultObjectCode)
                .HasColumnType("character varying")
                .HasColumnName("result_object_code");
            entity.Property(e => e.ResultObjectFinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("result_object_finish_date");
            entity.Property(e => e.ResultObjectId).HasColumnName("result_object_id");
            entity.Property(e => e.ResultObjectName)
                .HasColumnType("character varying")
                .HasColumnName("result_object_name");
            entity.Property(e => e.ResultObjectStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("result_object_start_date");
            entity.Property(e => e.ResultType)
                .HasColumnType("character varying")
                .HasColumnName("result_type");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<EducationPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_plans");

            entity.ToTable("education_plans", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_education_plans_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_education_plans_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_education_plans_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_education_plans_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_education_plans_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CompoundProgramId, "idx_education_plans_9583171766200932367").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DevelopmentPlanId).HasColumnName("development_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FactFinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("fact_finish_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LastActivityDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_activity_date");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PlanDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_date");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UpdateStatusAndActivity).HasColumnName("update_status_and_activity");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_program");

            entity.ToTable("education_program", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationProgram)
                .HasForeignKey<EducationProgram>(d => d.Id)
                .HasConstraintName("FK_objects_education_program");
        });

        modelBuilder.Entity<EducationProgramEducationMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_program_education_methods");

            entity.ToTable("education_program_education_methods", "dbo");

            entity.HasIndex(e => e.EducationMethodId, "idx_education_program_education_methods_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationProgramId, "idx_education_program_education_methods_8768633558994202816").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationMethodName)
                .HasColumnType("character varying")
                .HasColumnName("education_method_name");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<EducationPrograms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_programs");

            entity.ToTable("education_programs", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_education_programs_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EducationMethodsId).HasColumnName("education_methods_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EducationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_type");

            entity.ToTable("education_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EducationType)
                .HasForeignKey<EducationType>(d => d.Id)
                .HasConstraintName("FK_objects_education_type");
        });

        modelBuilder.Entity<EducationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__education_types");

            entity.ToTable("education_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_education_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_education_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EfficiencyEstimation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__efficiency_estimation");

            entity.ToTable("efficiency_estimation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EfficiencyEstimation)
                .HasForeignKey<EfficiencyEstimation>(d => d.Id)
                .HasConstraintName("FK_objects_efficiency_estimation");
        });

        modelBuilder.Entity<EfficiencyEstimations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__efficiency_estimations");

            entity.ToTable("efficiency_estimations", "dbo");

            entity.HasIndex(e => e.Code, "idx_efficiency_estimations_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsStd, "idx_efficiency_estimations_15428234602117094714").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_efficiency_estimations_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_efficiency_estimations_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_efficiency_estimations_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EfficiencyGrade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__efficiency_grade");

            entity.ToTable("efficiency_grade", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EfficiencyGrade)
                .HasForeignKey<EfficiencyGrade>(d => d.Id)
                .HasConstraintName("FK_objects_efficiency_grade");
        });

        modelBuilder.Entity<EfficiencyGrades>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__efficiency_grades");

            entity.ToTable("efficiency_grades", "dbo");

            entity.HasIndex(e => e.SuccessorId, "idx_efficiency_grades_10748794002060237350").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_efficiency_grades_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonnelReserveId, "idx_efficiency_grades_17856881109671369851").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_efficiency_grades_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_efficiency_grades_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_efficiency_grades_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessorId, "idx_efficiency_grades_6200837959125073660").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_efficiency_grades_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EfficiencyEstimationId, "idx_efficiency_grades_7449878280595439136").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("assessment_date");
            entity.Property(e => e.AssessmentSource)
                .HasColumnType("character varying")
                .HasColumnName("assessment_source");
            entity.Property(e => e.AssessorId).HasColumnName("assessor_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonnelReserveId).HasColumnName("personnel_reserve_id");
            entity.Property(e => e.SuccessorId).HasColumnName("successor_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EstaffEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_event");

            entity.ToTable("estaff_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EstaffEvent)
                .HasForeignKey<EstaffEvent>(d => d.Id)
                .HasConstraintName("FK_objects_estaff_event");
        });

        modelBuilder.Entity<EstaffEventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_event_type");

            entity.ToTable("estaff_event_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EstaffEventType)
                .HasForeignKey<EstaffEventType>(d => d.Id)
                .HasConstraintName("FK_objects_estaff_event_type");
        });

        modelBuilder.Entity<EstaffEventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_event_types");

            entity.ToTable("estaff_event_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_estaff_event_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_estaff_event_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_estaff_event_types_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_estaff_event_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EventTypeEstaffId)
                .HasColumnType("character varying")
                .HasColumnName("event_type_estaff_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PositionCommons)
                .HasColumnType("character varying")
                .HasColumnName("position_commons");
            entity.Property(e => e.RecruitmentSystemId).HasColumnName("recruitment_system_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EstaffEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__estaff_events");

            entity.ToTable("estaff_events", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_estaff_events_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_estaff_events_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CodeEvent)
                .HasColumnType("character varying")
                .HasColumnName("code_event");
            entity.Property(e => e.EstaffEventEid).HasColumnName("estaff_event_eid");
            entity.Property(e => e.EstaffEventTypeId).HasColumnName("estaff_event_type_id");
            entity.Property(e => e.EstaffEventTypeName)
                .HasColumnType("character varying")
                .HasColumnName("estaff_event_type_name");
            entity.Property(e => e.EventName)
                .HasColumnType("character varying")
                .HasColumnName("event_name");
            entity.Property(e => e.EventStatusId)
                .HasColumnType("character varying")
                .HasColumnName("event_status_id");
            entity.Property(e => e.LinkedObjectUrl)
                .HasColumnType("character varying")
                .HasColumnName("linked_object_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Objects)
                .HasColumnType("character varying")
                .HasColumnName("objects");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyCode)
                .HasColumnType("character varying")
                .HasColumnName("vacancy_code");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .HasColumnType("character varying")
                .HasColumnName("vacancy_name");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event");

            entity.ToTable("event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Event)
                .HasForeignKey<Event>(d => d.Id)
                .HasConstraintName("FK_objects_event");
        });

        modelBuilder.Entity<EventAssessmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_assessment_plan");

            entity.ToTable("event_assessment_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventAssessmentPlan)
                .HasForeignKey<EventAssessmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_event_assessment_plan");
        });

        modelBuilder.Entity<EventAssessmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_assessment_plans");

            entity.ToTable("event_assessment_plans", "dbo");

            entity.HasIndex(e => e.EventId, "idx_event_assessment_plans_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_event_assessment_plans_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentType)
                .HasColumnType("character varying")
                .HasColumnName("assessment_type");
            entity.Property(e => e.AssessmentTypeId)
                .HasColumnType("character varying")
                .HasColumnName("assessment_type_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DateStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpertPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<EventCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_collaborators");

            entity.ToTable("event_collaborators", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_event_collaborators_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_event_collaborators_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_event_collaborators_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_collaborators_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_event_collaborators_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_event_collaborators_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_event_collaborators_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationMethodId, "idx_event_collaborators_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CollaboratorId, "idx_event_collaborators_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_event_collaborators_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_event_collaborators_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_collaborators_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrganizationalForm, "idx_event_collaborators_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_event_collaborators_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_event_collaborators_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.DurationFact).HasColumnName("duration_fact");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPreparation).HasColumnName("is_preparation");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_groups");

            entity.ToTable("event_groups", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_event_groups_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_event_groups_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_event_groups_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_groups_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_event_groups_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_event_groups_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_event_groups_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_event_groups_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_event_groups_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_groups_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_event_groups_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrganizationalForm, "idx_event_groups_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_event_groups_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_event_groups_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_lectors");

            entity.ToTable("event_lectors", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_event_lectors_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_event_lectors_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_event_lectors_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LectorId, "idx_event_lectors_13041527685410513130").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_lectors_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_event_lectors_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_event_lectors_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_event_lectors_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_event_lectors_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_event_lectors_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_event_lectors_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_lectors_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_event_lectors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrganizationalForm, "idx_event_lectors_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_event_lectors_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_event_lectors_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsPreparation).HasColumnName("is_preparation");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.LectorFullname)
                .HasColumnType("character varying")
                .HasColumnName("lector_fullname");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventObjectResources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_object_resources");

            entity.ToTable("event_object_resources", "dbo");

            entity.HasIndex(e => e.StartDate, "idx_event_object_resources_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectResourceId, "idx_event_object_resources_15821187232525034022").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_event_object_resources_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_object_resources_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectResourceId).HasColumnName("object_resource_id");
            entity.Property(e => e.ObjectResourceName)
                .HasColumnType("character varying")
                .HasColumnName("object_resource_name");
            entity.Property(e => e.ObjectResourceType)
                .HasColumnType("character varying")
                .HasColumnName("object_resource_type");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<EventPhases>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_phases");

            entity.ToTable("event_phases", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_event_phases_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LectorId, "idx_event_phases_13041527685410513130").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_phases_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectResourceId, "idx_event_phases_15821187232525034022").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_event_phases_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_phases_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectResourceId).HasColumnName("object_resource_id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<EventResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_result");

            entity.ToTable("event_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventResult)
                .HasForeignKey<EventResult>(d => d.Id)
                .HasConstraintName("FK_objects_event_result");
        });

        modelBuilder.Entity<EventResultType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_result_type");

            entity.ToTable("event_result_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventResultType)
                .HasForeignKey<EventResultType>(d => d.Id)
                .HasConstraintName("FK_objects_event_result_type");
        });

        modelBuilder.Entity<EventResultTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_result_types");

            entity.ToTable("event_result_types", "dbo");

            entity.HasIndex(e => e.Name, "idx_event_result_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_event_result_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<EventResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_results");

            entity.ToTable("event_results", "dbo");

            entity.HasIndex(e => e.EventResultTypeId, "idx_event_results_14718903307839086340").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CostCenterId, "idx_event_results_15646206976949266431").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectResourceId, "idx_event_results_15821187232525034022").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_event_results_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventStartDate, "idx_event_results_17430304685613396942").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_results_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_event_results_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_event_results_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_event_results_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventName, "idx_event_results_675872731354680815").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpenseSum, "idx_event_results_9079564707565721960").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RequestId, "idx_event_results_9242324761380620215").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CertificateId).HasColumnName("certificate_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasMaxLength(900)
                .HasColumnName("event_name");
            entity.Property(e => e.EventResultTypeId).HasColumnName("event_result_type_id");
            entity.Property(e => e.EventStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("event_start_date");
            entity.Property(e => e.ExpenseSum).HasColumnName("expense_sum");
            entity.Property(e => e.Guest).HasColumnName("guest");
            entity.Property(e => e.IsAssist).HasColumnName("is_assist");
            entity.Property(e => e.IsBanned).HasColumnName("is_banned");
            entity.Property(e => e.IsConfirm).HasColumnName("is_confirm");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.LastSendingDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_sending_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NotParticipate).HasColumnName("not_participate");
            entity.Property(e => e.NotPay).HasColumnName("not_pay");
            entity.Property(e => e.ObjectResourceId).HasColumnName("object_resource_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<EventRoomCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_room_collaborators");

            entity.ToTable("event_room_collaborators", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_event_room_collaborators_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_event_room_collaborators_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_event_room_collaborators_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_room_collaborators_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_event_room_collaborators_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_event_room_collaborators_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_event_room_collaborators_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationMethodId, "idx_event_room_collaborators_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CollaboratorId, "idx_event_room_collaborators_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_event_room_collaborators_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_event_room_collaborators_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_room_collaborators_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrganizationalForm, "idx_event_room_collaborators_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_event_room_collaborators_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_event_room_collaborators_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.DurationFact).HasColumnName("duration_fact");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPreparation).HasColumnName("is_preparation");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventRoomLectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_room_lectors");

            entity.ToTable("event_room_lectors", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_event_room_lectors_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_event_room_lectors_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_event_room_lectors_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LectorId, "idx_event_room_lectors_13041527685410513130").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_room_lectors_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_event_room_lectors_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_event_room_lectors_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_event_room_lectors_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_event_room_lectors_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_event_room_lectors_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_event_room_lectors_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_event_room_lectors_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_event_room_lectors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrganizationalForm, "idx_event_room_lectors_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_event_room_lectors_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_event_room_lectors_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.Hours).HasColumnName("hours");
            entity.Property(e => e.IsCollaborator).HasColumnName("is_collaborator");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsPreparation).HasColumnName("is_preparation");
            entity.Property(e => e.IsTutor).HasColumnName("is_tutor");
            entity.Property(e => e.LectorFullname)
                .HasColumnType("character varying")
                .HasColumnName("lector_fullname");
            entity.Property(e => e.LectorId).HasColumnName("lector_id");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
        });

        modelBuilder.Entity<EventRooms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_rooms");

            entity.ToTable("event_rooms", "dbo");

            entity.HasIndex(e => e.CourseFinished, "idx_event_rooms_10678881604042926665").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseBegan, "idx_event_rooms_10974458323867450992").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FinishDate, "idx_event_rooms_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestFinished, "idx_event_rooms_11896865395881667500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_event_rooms_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_event_rooms_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateCompoundProgramId, "idx_event_rooms_13258650415584923250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_event_rooms_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_event_rooms_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_event_rooms_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_event_rooms_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_event_rooms_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestStarted, "idx_event_rooms_15299808181059920119").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationMethodId, "idx_event_rooms_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TrainingPlanId, "idx_event_rooms_15697259362464149846").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_event_rooms_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestBegan, "idx_event_rooms_16505415128833714586").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_event_rooms_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_event_rooms_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentEventId, "idx_event_rooms_2055967734745080388").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupEducGroupId, "idx_event_rooms_2966658107031477862").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_event_rooms_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_event_rooms_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestProcess, "idx_event_rooms_442924084137947299").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseId, "idx_event_rooms_6140445976813544658").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_event_rooms_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_event_rooms_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.OrganizationalForm, "idx_event_rooms_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_event_rooms_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_event_rooms_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationProgramId, "idx_event_rooms_8768633558994202816").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CompoundProgramId, "idx_event_rooms_9583171766200932367").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseStarted, "idx_event_rooms_9600174824468567472").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseProcess, "idx_event_rooms_9824124253609742998").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.CourseBegan).HasColumnName("course_began");
            entity.Property(e => e.CourseFinished).HasColumnName("course_finished");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseProcess).HasColumnName("course_process");
            entity.Property(e => e.CourseStarted).HasColumnName("course_started");
            entity.Property(e => e.CreateCompoundProgramId).HasColumnName("create_compound_program_id");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.DistributeCostType)
                .HasColumnType("character varying")
                .HasColumnName("distribute_cost_type");
            entity.Property(e => e.DurationDaysFact).HasColumnName("duration_days_fact");
            entity.Property(e => e.DurationFact).HasColumnName("duration_fact");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.EventForm)
                .HasColumnType("character varying")
                .HasColumnName("event_form");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupEducGroupId)
                .HasMaxLength(900)
                .HasColumnName("group_educ_group_id");
            entity.Property(e => e.GroupFormed).HasColumnName("group_formed");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.MandatoryFillResponse).HasColumnName("mandatory_fill_response");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.ParentEventId).HasColumnName("parent_event_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.RecordExists).HasColumnName("record_exists");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SendPersonsTypes)
                .HasColumnType("character varying")
                .HasColumnName("send_persons_types");
            entity.Property(e => e.SendType)
                .HasColumnType("character varying")
                .HasColumnName("send_type");
            entity.Property(e => e.ShowRecord).HasColumnName("show_record");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.TestBegan).HasColumnName("test_began");
            entity.Property(e => e.TestFinished).HasColumnName("test_finished");
            entity.Property(e => e.TestProcess).HasColumnName("test_process");
            entity.Property(e => e.TestStarted).HasColumnName("test_started");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TrainingPlanId).HasColumnName("training_plan_id");
            entity.Property(e => e.TutorMain)
                .HasColumnType("character varying")
                .HasColumnName("tutor_main");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
            entity.Property(e => e.UseVclass).HasColumnName("use_vclass");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VclassHost)
                .HasColumnType("character varying")
                .HasColumnName("vclass_host");
            entity.Property(e => e.VclassSettingId).HasColumnName("vclass_setting_id");
            entity.Property(e => e.WebinarSystemId).HasColumnName("webinar_system_id");
        });

        modelBuilder.Entity<EventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_type");

            entity.ToTable("event_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EventType)
                .HasForeignKey<EventType>(d => d.Id)
                .HasConstraintName("FK_objects_event_type");
        });

        modelBuilder.Entity<EventTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__event_types");

            entity.ToTable("event_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AutoStart).HasColumnName("auto_start");
            entity.Property(e => e.CanUseCamera).HasColumnName("can_use_camera");
            entity.Property(e => e.CanUseMicrophone).HasColumnName("can_use_microphone");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Online).HasColumnName("online");
            entity.Property(e => e.SimplCustomWebTemplateId).HasColumnName("simpl_custom_web_template_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Events>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__events");

            entity.ToTable("events", "dbo");

            entity.HasIndex(e => e.CourseFinished, "idx_events_10678881604042926665").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseBegan, "idx_events_10974458323867450992").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FinishDate, "idx_events_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestFinished, "idx_events_11896865395881667500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UnnamedPersonNum, "idx_events_12218886835767654551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TotalCost, "idx_events_12580963394859364226").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateCompoundProgramId, "idx_events_13258650415584923250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_events_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_events_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_events_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgName, "idx_events_14213117329145327498").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TypeId, "idx_events_14942622176113235817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestStarted, "idx_events_15299808181059920119").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationMethodId, "idx_events_15517183636538674697").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TrainingPlanId, "idx_events_15697259362464149846").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_events_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestBegan, "idx_events_16505415128833714586").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PlaceId, "idx_events_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationOrgId, "idx_events_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentEventId, "idx_events_2055967734745080388").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupEducGroupId, "idx_events_2966658107031477862").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_events_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_events_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestProcess, "idx_events_442924084137947299").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseId, "idx_events_6140445976813544658").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_events_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_events_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.OrganizationalForm, "idx_events_7795441263002106654").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_events_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonNum, "idx_events_8070565702427637239").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationProgramId, "idx_events_8768633558994202816").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.NotificationReminderDate, "idx_events_9174668608477086027").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CompoundProgramId, "idx_events_9583171766200932367").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseStarted, "idx_events_9600174824468567472").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseProcess, "idx_events_9824124253609742998").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CompoundProgramId).HasColumnName("compound_program_id");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.CourseBegan).HasColumnName("course_began");
            entity.Property(e => e.CourseFinished).HasColumnName("course_finished");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseProcess).HasColumnName("course_process");
            entity.Property(e => e.CourseStarted).HasColumnName("course_started");
            entity.Property(e => e.CreateCompoundProgramId).HasColumnName("create_compound_program_id");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.DefaultResponseTypeId).HasColumnName("default_response_type_id");
            entity.Property(e => e.DistributeCostType)
                .HasColumnType("character varying")
                .HasColumnName("distribute_cost_type");
            entity.Property(e => e.DurationDaysFact).HasColumnName("duration_days_fact");
            entity.Property(e => e.DurationFact).HasColumnName("duration_fact");
            entity.Property(e => e.EducationMethodId).HasColumnName("education_method_id");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EducationOrgName)
                .HasMaxLength(900)
                .HasColumnName("education_org_name");
            entity.Property(e => e.EducationProgramId).HasColumnName("education_program_id");
            entity.Property(e => e.EventForm)
                .HasColumnType("character varying")
                .HasColumnName("event_form");
            entity.Property(e => e.EventTypeId).HasColumnName("event_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.GroupEducGroupId)
                .HasMaxLength(900)
                .HasColumnName("group_educ_group_id");
            entity.Property(e => e.GroupFormed).HasColumnName("group_formed");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.MandatoryFillResponse).HasColumnName("mandatory_fill_response");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.NotificationReminderDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("notification_reminder_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrganizationalForm)
                .HasMaxLength(900)
                .HasColumnName("organizational_form");
            entity.Property(e => e.ParentEventId).HasColumnName("parent_event_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.RecordExists).HasColumnName("record_exists");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SendPersonsTypes)
                .HasColumnType("character varying")
                .HasColumnName("send_persons_types");
            entity.Property(e => e.SendType)
                .HasColumnType("character varying")
                .HasColumnName("send_type");
            entity.Property(e => e.ShowRecord).HasColumnName("show_record");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.TestBegan).HasColumnName("test_began");
            entity.Property(e => e.TestFinished).HasColumnName("test_finished");
            entity.Property(e => e.TestProcess).HasColumnName("test_process");
            entity.Property(e => e.TestStarted).HasColumnName("test_started");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.TrainingPlanId).HasColumnName("training_plan_id");
            entity.Property(e => e.TutorMain)
                .HasColumnType("character varying")
                .HasColumnName("tutor_main");
            entity.Property(e => e.TypeId)
                .HasMaxLength(900)
                .HasColumnName("type_id");
            entity.Property(e => e.UnnamedPersonNum).HasColumnName("unnamed_person_num");
            entity.Property(e => e.UseVclass).HasColumnName("use_vclass");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VclassHost)
                .HasColumnType("character varying")
                .HasColumnName("vclass_host");
            entity.Property(e => e.VclassSettingId).HasColumnName("vclass_setting_id");
            entity.Property(e => e.WebinarSystemId).HasColumnName("webinar_system_id");
        });

        modelBuilder.Entity<ExchangeServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exchange_server");

            entity.ToTable("exchange_server", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExchangeServer)
                .HasForeignKey<ExchangeServer>(d => d.Id)
                .HasConstraintName("FK_objects_exchange_server");
        });

        modelBuilder.Entity<ExchangeServers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exchange_servers");

            entity.ToTable("exchange_servers", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_exchange_servers_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.LastDownloadDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_download_date");
            entity.Property(e => e.LastUploadDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_upload_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.ServerVersion)
                .HasColumnType("character varying")
                .HasColumnName("server_version");
        });

        modelBuilder.Entity<ExclusionReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exclusion_reason");

            entity.ToTable("exclusion_reason", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExclusionReason)
                .HasForeignKey<ExclusionReason>(d => d.Id)
                .HasConstraintName("FK_objects_exclusion_reason");
        });

        modelBuilder.Entity<ExclusionReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exclusion_reasons");

            entity.ToTable("exclusion_reasons", "dbo");

            entity.HasIndex(e => e.Code, "idx_exclusion_reasons_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_exclusion_reasons_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_exclusion_reasons_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_exclusion_reasons_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Exercise>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exercise");

            entity.ToTable("exercise", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Exercise)
                .HasForeignKey<Exercise>(d => d.Id)
                .HasConstraintName("FK_objects_exercise");
        });

        modelBuilder.Entity<Exercises>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__exercises");

            entity.ToTable("exercises", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_exercises_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Expense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expense");

            entity.ToTable("expense", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Expense)
                .HasForeignKey<Expense>(d => d.Id)
                .HasConstraintName("FK_objects_expense");
        });

        modelBuilder.Entity<ExpenseItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expense_item");

            entity.ToTable("expense_item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExpenseItem)
                .HasForeignKey<ExpenseItem>(d => d.Id)
                .HasConstraintName("FK_objects_expense_item");
        });

        modelBuilder.Entity<ExpenseItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expense_items");

            entity.ToTable("expense_items", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_expense_items_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_expense_items_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_expense_items_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_expense_items_746465302101864017");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Expenses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expenses");

            entity.ToTable("expenses", "dbo");

            entity.HasIndex(e => e.CurrencyTypeId, "idx_expenses_6006144048989286690").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BadDebt).HasColumnName("bad_debt");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.ConsignmentDocumentNumber)
                .HasColumnType("character varying")
                .HasColumnName("consignment_document_number");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.DocsComment)
                .HasColumnType("character varying")
                .HasColumnName("docs_comment");
            entity.Property(e => e.ExpenseCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expense_create_date");
            entity.Property(e => e.IsFormed).HasColumnName("is_formed");
            entity.Property(e => e.IsPaid).HasColumnName("is_paid");
            entity.Property(e => e.IsReceived).HasColumnName("is_received");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.PayStageId).HasColumnName("pay_stage_id");
            entity.Property(e => e.PaymentFactDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("payment_fact_date");
            entity.Property(e => e.PaymentPlanDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("payment_plan_date");
            entity.Property(e => e.ReceivedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("received_date");
            entity.Property(e => e.Recipient)
                .HasColumnType("character varying")
                .HasColumnName("recipient");
            entity.Property(e => e.SentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_date");
        });

        modelBuilder.Entity<Expert>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expert");

            entity.ToTable("expert", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Expert)
                .HasForeignKey<Expert>(d => d.Id)
                .HasConstraintName("FK_objects_expert");
        });

        modelBuilder.Entity<ExpertQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expert_question");

            entity.ToTable("expert_question", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExpertQuestion)
                .HasForeignKey<ExpertQuestion>(d => d.Id)
                .HasConstraintName("FK_objects_expert_question");
        });

        modelBuilder.Entity<ExpertQuestions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__expert_questions");

            entity.ToTable("expert_questions", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_expert_questions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpertId, "idx_expert_questions_6729651078579966624").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnswerDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("answer_date");
            entity.Property(e => e.AnswerFileId).HasColumnName("answer_file_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.IsDisclosed).HasColumnName("is_disclosed");
            entity.Property(e => e.IsFaq).HasColumnName("is_faq");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NormativeDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("normative_date");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Question)
                .HasColumnType("character varying")
                .HasColumnName("question");
            entity.Property(e => e.QuestionFileId).HasColumnName("question_file_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Experts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__experts");

            entity.ToTable("experts", "dbo");

            entity.HasIndex(e => e.Name, "idx_experts_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnswerExpireTime).HasColumnName("answer_expire_time");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.SubExpertId).HasColumnName("sub_expert_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ExternalSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__external_system");

            entity.ToTable("external_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ExternalSystem)
                .HasForeignKey<ExternalSystem>(d => d.Id)
                .HasConstraintName("FK_objects_external_system");
        });

        modelBuilder.Entity<ExternalSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__external_systems");

            entity.ToTable("external_systems", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AnonymousUserId).HasColumnName("anonymous_user_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<FactPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__fact_payment");

            entity.ToTable("fact_payment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FactPayment)
                .HasForeignKey<FactPayment>(d => d.Id)
                .HasConstraintName("FK_objects_fact_payment");
        });

        modelBuilder.Entity<FactPayments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__fact_payments");

            entity.ToTable("fact_payments", "dbo");

            entity.HasIndex(e => e.Date, "idx_fact_payments_13327119919005540841").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_fact_payments_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_fact_payments_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AgentLegal)
                .HasColumnType("character varying")
                .HasColumnName("agent_legal");
            entity.Property(e => e.AgentLegalName)
                .HasColumnType("character varying")
                .HasColumnName("agent_legal_name");
            entity.Property(e => e.AgentOrgId).HasColumnName("agent_org_id");
            entity.Property(e => e.ClientLegal)
                .HasColumnType("character varying")
                .HasColumnName("client_legal");
            entity.Property(e => e.ClientLegalName)
                .HasColumnType("character varying")
                .HasColumnName("client_legal_name");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.CostCurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("cost_currency_type_id");
            entity.Property(e => e.CostValue).HasColumnName("cost_value");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ExpenseId).HasColumnName("expense_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ProviderLegal)
                .HasColumnType("character varying")
                .HasColumnName("provider_legal");
            entity.Property(e => e.ProviderLegalName)
                .HasColumnType("character varying")
                .HasColumnName("provider_legal_name");
        });

        modelBuilder.Entity<FfSppk>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ff_sppk");

            entity.ToTable("ff_sppk", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ff_sppk_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Division).HasColumnName("division");
            entity.Property(e => e.DurAdditional).HasColumnName("dur_additional");
            entity.Property(e => e.DurDouble).HasColumnName("dur_double");
            entity.Property(e => e.DurEquip).HasColumnName("dur_equip");
            entity.Property(e => e.DurPractice).HasColumnName("dur_practice");
            entity.Property(e => e.DurStaging).HasColumnName("dur_staging");
            entity.Property(e => e.DurTheory).HasColumnName("dur_theory");
            entity.Property(e => e.DurTotal).HasColumnName("dur_total");
            entity.Property(e => e.EduTypeId).HasColumnName("edu_type_id");
            entity.Property(e => e.IsNorm).HasColumnName("is_norm");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NormUncheck).HasColumnName("norm_uncheck");
            entity.Property(e => e.ResponsePerson).HasColumnName("response_person");
            entity.Property(e => e.ResponsePosition).HasColumnName("response_position");
            entity.Property(e => e.Station).HasColumnName("station");
        });

        modelBuilder.Entity<FfSppkDates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ff_sppk_dates");

            entity.ToTable("ff_sppk_dates", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ff_sppk_dates_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.FfSppkId).HasColumnName("ff_sppk_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.PersonsCnt).HasColumnName("persons_cnt");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.StartDate).HasColumnName("start_date");

            entity.HasOne(d => d.FfSppk).WithMany(p => p.FfSppkDates)
                .HasForeignKey(d => d.FfSppkId)
                .HasConstraintName("fk_ff_sppk_dates_ff_sppk");
        });

        modelBuilder.Entity<FfSppkPersons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk__ff_sppk_persons");

            entity.ToTable("ff_sppk_persons", "dbo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('ff_sppk_persons_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.DurAdditional).HasColumnName("dur_additional");
            entity.Property(e => e.DurDouble).HasColumnName("dur_double");
            entity.Property(e => e.DurEquip).HasColumnName("dur_equip");
            entity.Property(e => e.DurPractice).HasColumnName("dur_practice");
            entity.Property(e => e.DurStaging).HasColumnName("dur_staging");
            entity.Property(e => e.DurTheory).HasColumnName("dur_theory");
            entity.Property(e => e.DurTotal).HasColumnName("dur_total");
            entity.Property(e => e.FfSppkDatesId).HasColumnName("ff_sppk_dates_id");
            entity.Property(e => e.IsFinished).HasColumnName("is_finished");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResponsePerson).HasColumnName("response_person");
            entity.Property(e => e.ResponsePosition).HasColumnName("response_position");

            entity.HasOne(d => d.FfSppkDates).WithMany(p => p.FfSppkPersons)
                .HasForeignKey(d => d.FfSppkDatesId)
                .HasConstraintName("fk_ff_sppk_persons_ff_sppk_dates");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.InverseIdNavigation)
                .HasForeignKey<FfSppkPersons>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ff_sppk_persons_ff_sppk_persons");
        });

        modelBuilder.Entity<FileSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__file_source");

            entity.ToTable("file_source", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FileSource)
                .HasForeignKey<FileSource>(d => d.Id)
                .HasConstraintName("FK_objects_file_source");
        });

        modelBuilder.Entity<FileSources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__file_sources");

            entity.ToTable("file_sources", "dbo");

            entity.HasIndex(e => e.Code, "idx_file_sources_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.SearchAvailable).HasColumnName("search_available");
            entity.Property(e => e.SelectionAvailable).HasColumnName("selection_available");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<Formula>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__formula");

            entity.ToTable("formula", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Formula)
                .HasForeignKey<Formula>(d => d.Id)
                .HasConstraintName("FK_objects_formula");
        });

        modelBuilder.Entity<Formulas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__formulas");

            entity.ToTable("formulas", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Dependencies)
                .HasColumnType("character varying")
                .HasColumnName("dependencies");
            entity.Property(e => e.FormulaEvalStr)
                .HasColumnType("character varying")
                .HasColumnName("formula_eval_str");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<Forum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum");

            entity.ToTable("forum", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Forum)
                .HasForeignKey<Forum>(d => d.Id)
                .HasConstraintName("FK_objects_forum");
        });

        modelBuilder.Entity<ForumEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_entry");

            entity.ToTable("forum_entry", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ForumEntry)
                .HasForeignKey<ForumEntry>(d => d.Id)
                .HasConstraintName("FK_objects_forum_entry");
        });

        modelBuilder.Entity<ForumEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_entrys");

            entity.ToTable("forum_entrys", "dbo");

            entity.HasIndex(e => e.ForumId, "idx_forum_entrys_11988020552051397905").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentForumEntryId, "idx_forum_entrys_13813372682826413680").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_forum_entrys_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UserId, "idx_forum_entrys_2453072305403643195").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_forum_entrys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_forum_entrys_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MainForumEntryId, "idx_forum_entrys_7527983074424146688").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentForumEntryId, e.Id }, "idxh_forum_entrys_6266697527732245855");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorInfo)
                .HasColumnType("character varying")
                .HasColumnName("author_info");
            entity.Property(e => e.ChildNum).HasColumnName("child_num");
            entity.Property(e => e.Closed).HasColumnName("closed");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.How2show)
                .HasColumnType("character varying")
                .HasColumnName("how2show");
            entity.Property(e => e.IsModerApproved).HasColumnName("is_moder_approved");
            entity.Property(e => e.LastCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_create_date");
            entity.Property(e => e.MainForumEntryId).HasColumnName("main_forum_entry_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentForumEntryId).HasColumnName("parent_forum_entry_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.Pinned).HasColumnName("pinned");
            entity.Property(e => e.RemoteIp)
                .HasColumnType("character varying")
                .HasColumnName("remote_ip");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<ForumThemeReadByCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_theme_read_by_collaborator");

            entity.ToTable("forum_theme_read_by_collaborator", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ForumThemeReadByCollaborator)
                .HasForeignKey<ForumThemeReadByCollaborator>(d => d.Id)
                .HasConstraintName("FK_objects_forum_theme_read_by_collaborator");
        });

        modelBuilder.Entity<ForumThemeReadByCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forum_theme_read_by_collaborators");

            entity.ToTable("forum_theme_read_by_collaborators", "dbo");

            entity.HasIndex(e => e.ForumThemeId, "idx_forum_theme_read_by_collaborators_11296638218249640131").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ForumId, "idx_forum_theme_read_by_collaborators_11988020552051397905").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_forum_theme_read_by_collaborators_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.ForumThemeId).HasColumnName("forum_theme_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<Forums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__forums");

            entity.ToTable("forums", "dbo");

            entity.HasIndex(e => e.NeedModerApproval, "idx_forums_10183886387517456816").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_forums_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_forums_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_forums_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseId, "idx_forums_6140445976813544658").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_forums_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowAnonymousMessage).HasColumnName("allow_anonymous_message");
            entity.Property(e => e.AllowCreateClosedTheme).HasColumnName("allow_create_closed_theme");
            entity.Property(e => e.AllowUserDelete).HasColumnName("allow_user_delete");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Closed).HasColumnName("closed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.DispUserStatus).HasColumnName("disp_user_status");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.NeedModerApproval).HasColumnName("need_moder_approval");
            entity.Property(e => e.PermitSubscription).HasColumnName("permit_subscription");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<FtLastIndex>(entity =>
        {
            entity.HasKey(e => e.Form).HasName("PK_(ft_last_index1)");

            entity.ToTable("(ft_last_index)", "dbo");

            entity.Property(e => e.Form)
                .HasMaxLength(128)
                .HasColumnName("form");
            entity.Property(e => e.LastFtIndexDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_ft_index_date");
        });

        modelBuilder.Entity<FuncManagers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__func_managers");

            entity.ToTable("func_managers", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_func_managers_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_func_managers_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StaffObjectType, "idx_func_managers_16569830749208839767").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_func_managers_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_func_managers_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_func_managers_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Catalog, "idx_func_managers_7497764283949398425").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StaffObjectName, "idx_func_managers_7752548229444173252").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StaffObjectId, "idx_func_managers_8131523258746593160").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BossTypeId, "idx_func_managers_9251791295560244622").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .HasColumnName("catalog");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.IsFinished).HasColumnName("is_finished");
            entity.Property(e => e.IsNative).HasColumnName("is_native");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.StaffObjectId).HasColumnName("staff_object_id");
            entity.Property(e => e.StaffObjectName)
                .HasMaxLength(900)
                .HasColumnName("staff_object_name");
            entity.Property(e => e.StaffObjectType)
                .HasMaxLength(900)
                .HasColumnName("staff_object_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.SubordinatePositionId).HasColumnName("subordinate_position_id");
        });

        modelBuilder.Entity<Good>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good");

            entity.ToTable("good", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Good)
                .HasForeignKey<Good>(d => d.Id)
                .HasConstraintName("FK_objects_good");
        });

        modelBuilder.Entity<GoodInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_instance");

            entity.ToTable("good_instance", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.GoodInstance)
                .HasForeignKey<GoodInstance>(d => d.Id)
                .HasConstraintName("FK_objects_good_instance");
        });

        modelBuilder.Entity<GoodInstances>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_instances");

            entity.ToTable("good_instances", "dbo");

            entity.HasIndex(e => e.Code, "idx_good_instances_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PaidDate, "idx_good_instances_1399943653664221089").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ReservedDate, "idx_good_instances_3150702204477133194").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_good_instances_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_good_instances_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_good_instances_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.GoodId).HasColumnName("good_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paid_date");
            entity.Property(e => e.ReservedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("reserved_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<GoodType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_type");

            entity.ToTable("good_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.GoodType)
                .HasForeignKey<GoodType>(d => d.Id)
                .HasConstraintName("FK_objects_good_type");
        });

        modelBuilder.Entity<GoodTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__good_types");

            entity.ToTable("good_types", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_good_types_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_good_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_good_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_good_types_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_good_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.RequestTypeId).HasColumnName("request_type_id");
        });

        modelBuilder.Entity<Goods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__goods");

            entity.ToTable("goods", "dbo");

            entity.HasIndex(e => e.Code, "idx_goods_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_goods_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_goods_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsCantChose, "idx_goods_4494139382226440780").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_goods_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_goods_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_goods_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusShopCost).HasColumnName("bonus_shop_cost");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CostDesc)
                .HasColumnType("character varying")
                .HasColumnName("cost_desc");
            entity.Property(e => e.DeliveryType)
                .HasColumnType("character varying")
                .HasColumnName("delivery_type");
            entity.Property(e => e.GoodTypeId).HasColumnName("good_type_id");
            entity.Property(e => e.IsCantChose).HasColumnName("is_cant_chose");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<Grade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__grade");

            entity.ToTable("grade", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Grade)
                .HasForeignKey<Grade>(d => d.Id)
                .HasConstraintName("FK_objects_grade");
        });

        modelBuilder.Entity<Grades>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__grades");

            entity.ToTable("grades", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__group");

            entity.ToTable("group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Group)
                .HasForeignKey<Group>(d => d.Id)
                .HasConstraintName("FK_objects_group");
        });

        modelBuilder.Entity<GroupCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__group_collaborators");

            entity.ToTable("group_collaborators", "dbo");

            entity.HasIndex(e => e.Code, "idx_group_collaborators_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CollaboratorId, "idx_group_collaborators_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_group_collaborators_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_group_collaborators_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowSocialPost).HasColumnName("allow_social_post");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorFullname)
                .HasColumnType("character varying")
                .HasColumnName("collaborator_fullname");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.IsHidden).HasColumnName("is_hidden");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.TutorFullname)
                .HasColumnType("character varying")
                .HasColumnName("tutor_fullname");
            entity.Property(e => e.TutorId).HasColumnName("tutor_id");
        });

        modelBuilder.Entity<Groups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__groups");

            entity.ToTable("groups", "dbo");

            entity.HasIndex(e => e.Code, "idx_groups_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TagId, "idx_groups_1837432429677149980").HasMethod("gin");

            entity.HasIndex(e => e.Name, "idx_groups_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_groups_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_groups_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowSocialPost).HasColumnName("allow_social_post");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ForumId).HasColumnName("forum_id");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.IsEduc).HasColumnName("is_educ");
            entity.Property(e => e.IsHidden).HasColumnName("is_hidden");
            entity.Property(e => e.JoinMode)
                .HasColumnType("character varying")
                .HasColumnName("join_mode");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<Host>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__host");

            entity.ToTable("host", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Host)
                .HasForeignKey<Host>(d => d.Id)
                .HasConstraintName("FK_objects_host");
        });

        modelBuilder.Entity<Hosts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__hosts");

            entity.ToTable("hosts", "dbo");

            entity.HasIndex(e => e.Host, "idx_hosts_13217977790347708798").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SiteId, "idx_hosts_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowLdsAuth).HasColumnName("allow_lds_auth");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Host)
                .HasMaxLength(900)
                .HasColumnName("host");
            entity.Property(e => e.Hostname)
                .HasColumnType("character varying")
                .HasColumnName("hostname");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Port).HasColumnName("port");
            entity.Property(e => e.PortalAuthType)
                .HasColumnType("character varying")
                .HasColumnName("portal_auth_type");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
        });

        modelBuilder.Entity<IndProgPassLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ind_prog_pass_log", "dbo");

            entity.Property(e => e.CheckedDate).HasColumnName("checked_date");
            entity.Property(e => e.IsChecked)
                .HasDefaultValue(false)
                .HasColumnName("is_checked");
            entity.Property(e => e.IsPass)
                .HasDefaultValue(false)
                .HasColumnName("is_pass");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.UpdateDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("update_date");
            entity.Property(e => e.UpdateUser).HasColumnName("update_user");
        });

        modelBuilder.Entity<Indicator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__indicator");

            entity.ToTable("indicator", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Indicator)
                .HasForeignKey<Indicator>(d => d.Id)
                .HasConstraintName("FK_objects_indicator");
        });

        modelBuilder.Entity<Indicators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__indicators");

            entity.ToTable("indicators", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_indicators_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.CompetenceId, "idx_indicators_9130850239285963895").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompetenceId).HasColumnName("competence_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<IntervalSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__interval_schedule");

            entity.ToTable("interval_schedule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.IntervalSchedule)
                .HasForeignKey<IntervalSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_interval_schedule");
        });

        modelBuilder.Entity<IntervalSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__interval_schedules");

            entity.ToTable("interval_schedules", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_interval_schedules_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_interval_schedules_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_interval_schedules_15310678443979824546").HasMethod("gin");

            entity.HasIndex(e => e.CreateDate, "idx_interval_schedules_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ChangeFinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("change_finish_date");
            entity.Property(e => e.ChangeStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("change_start_date");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PresenceStateId).HasColumnName("presence_state_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
            entity.Property(e => e.WorkflowType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_type");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__invoice");

            entity.ToTable("invoice", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Invoice)
                .HasForeignKey<Invoice>(d => d.Id)
                .HasConstraintName("FK_objects_invoice");
        });

        modelBuilder.Entity<Invoices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__invoices");

            entity.ToTable("invoices", "dbo");

            entity.HasIndex(e => e.Date, "idx_invoices_13327119919005540841").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_invoices_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_invoices_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_invoices_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.IsPaid).HasColumnName("is_paid");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__item");

            entity.ToTable("item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Item)
                .HasForeignKey<Item>(d => d.Id)
                .HasConstraintName("FK_objects_item");
        });

        modelBuilder.Entity<Items>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__items");

            entity.ToTable("items", "dbo");

            entity.HasIndex(e => e.Name, "idx_items_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_items_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Title, "idx_items_9903940765029670819").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.QuestionPoints).HasColumnName("question_points");
            entity.Property(e => e.QuestionText)
                .HasColumnType("character varying")
                .HasColumnName("question_text");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Title)
                .HasMaxLength(900)
                .HasColumnName("title");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KeyPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_position");

            entity.ToTable("key_position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KeyPosition)
                .HasForeignKey<KeyPosition>(d => d.Id)
                .HasConstraintName("FK_objects_key_position");
        });

        modelBuilder.Entity<KeyPositionThreat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_position_threat");

            entity.ToTable("key_position_threat", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KeyPositionThreat)
                .HasForeignKey<KeyPositionThreat>(d => d.Id)
                .HasConstraintName("FK_objects_key_position_threat");
        });

        modelBuilder.Entity<KeyPositionThreats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_position_threats");

            entity.ToTable("key_position_threats", "dbo");

            entity.HasIndex(e => e.Code, "idx_key_position_threats_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_key_position_threats_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_key_position_threats_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_key_position_threats_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Color)
                .HasColumnType("character varying")
                .HasColumnName("color");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KeyPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__key_positions");

            entity.ToTable("key_positions", "dbo");

            entity.HasIndex(e => e.RiskPerspectiveId, "idx_key_positions_10796075571625345883").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionId, "idx_key_positions_12300354286168187930").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_key_positions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsOpen, "idx_key_positions_1498902626528996465").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_key_positions_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_key_positions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_key_positions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonCode, "idx_key_positions_4974061587674638279").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_key_positions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CareerReserveTypeId, "idx_key_positions_6446321095670185680").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_key_positions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_key_positions_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_key_positions_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.KeyPositionThreatId, "idx_key_positions_7577101047707060280").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionName, "idx_key_positions_7850265971443817575").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_key_positions_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsOpen).HasColumnName("is_open");
            entity.Property(e => e.KeyPositionThreatId).HasColumnName("key_position_threat_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonCode)
                .HasMaxLength(900)
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .HasColumnName("position_name");
            entity.Property(e => e.RiskLevels)
                .HasColumnType("character varying")
                .HasColumnName("risk_levels");
            entity.Property(e => e.RiskPerspectiveId).HasColumnName("risk_perspective_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<KnowledgeAcquaint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_acquaint");

            entity.ToTable("knowledge_acquaint", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgeAcquaint)
                .HasForeignKey<KnowledgeAcquaint>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_acquaint");
        });

        modelBuilder.Entity<KnowledgeAcquaints>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_acquaints");

            entity.ToTable("knowledge_acquaints", "dbo");

            entity.HasIndex(e => e.SecObjectId, "idx_knowledge_acquaints_11502215003213000299").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SecObjectName, "idx_knowledge_acquaints_14159847825832139547").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConfirmationBossTypeId).HasColumnName("confirmation_boss_type_id");
            entity.Property(e => e.ConfirmationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("confirmation_date");
            entity.Property(e => e.ConfirmationExpertType)
                .HasColumnType("character varying")
                .HasColumnName("confirmation_expert_type");
            entity.Property(e => e.ConfirmationType)
                .HasColumnType("character varying")
                .HasColumnName("confirmation_type");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.KnowledgePartId).HasColumnName("knowledge_part_id");
            entity.Property(e => e.KnowledgePartName)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_part_name");
            entity.Property(e => e.LevelId)
                .HasColumnType("character varying")
                .HasColumnName("level_id");
            entity.Property(e => e.LevelIndex).HasColumnName("level_index");
            entity.Property(e => e.LevelName)
                .HasColumnType("character varying")
                .HasColumnName("level_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ProjectParticipantId).HasColumnName("project_participant_id");
            entity.Property(e => e.SecObjectId).HasColumnName("sec_object_id");
            entity.Property(e => e.SecObjectName)
                .HasMaxLength(900)
                .HasColumnName("sec_object_name");
            entity.Property(e => e.SecObjectType)
                .HasColumnType("character varying")
                .HasColumnName("sec_object_type");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<KnowledgeClassifier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_classifier");

            entity.ToTable("knowledge_classifier", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgeClassifier)
                .HasForeignKey<KnowledgeClassifier>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_classifier");
        });

        modelBuilder.Entity<KnowledgeClassifiers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_classifiers");

            entity.ToTable("knowledge_classifiers", "dbo");

            entity.HasIndex(e => e.Code, "idx_knowledge_classifiers_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_knowledge_classifiers_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<KnowledgeObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_objects");

            entity.ToTable("knowledge_objects", "dbo");

            entity.HasIndex(e => e.KnowledgePartId, "idx_knowledge_objects_12230365795411762777").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_knowledge_objects_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.KnowledgePartLevelId, "idx_knowledge_objects_3339496624073455264").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_knowledge_objects_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Catalog, "idx_knowledge_objects_7497764283949398425").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcquaintTime).HasColumnName("acquaint_time");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .HasColumnName("catalog");
            entity.Property(e => e.CurrentLevelId)
                .HasColumnType("character varying")
                .HasColumnName("current_level_id");
            entity.Property(e => e.CurrentLevelIndex).HasColumnName("current_level_index");
            entity.Property(e => e.CurrentLevelName)
                .HasColumnType("character varying")
                .HasColumnName("current_level_name");
            entity.Property(e => e.DocCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("doc_create_date");
            entity.Property(e => e.KnowledgePartId).HasColumnName("knowledge_part_id");
            entity.Property(e => e.KnowledgePartLevelId).HasColumnName("knowledge_part_level_id");
            entity.Property(e => e.KnowledgePartName)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_part_name");
            entity.Property(e => e.ObjectEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("object_end_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("object_start_date");
            entity.Property(e => e.ObjectStatus)
                .HasColumnType("character varying")
                .HasColumnName("object_status");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.TargetLevelId)
                .HasColumnType("character varying")
                .HasColumnName("target_level_id");
            entity.Property(e => e.TargetLevelIndex).HasColumnName("target_level_index");
            entity.Property(e => e.TargetLevelName)
                .HasColumnType("character varying")
                .HasColumnName("target_level_name");
        });

        modelBuilder.Entity<KnowledgePart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part");

            entity.ToTable("knowledge_part", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgePart)
                .HasForeignKey<KnowledgePart>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_part");
        });

        modelBuilder.Entity<KnowledgePartLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_level");

            entity.ToTable("knowledge_part_level", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgePartLevel)
                .HasForeignKey<KnowledgePartLevel>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_part_level");
        });

        modelBuilder.Entity<KnowledgePartLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_levels");

            entity.ToTable("knowledge_part_levels", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_knowledge_part_levels_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_knowledge_part_levels_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<KnowledgePartType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_type");

            entity.ToTable("knowledge_part_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgePartType)
                .HasForeignKey<KnowledgePartType>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_part_type");
        });

        modelBuilder.Entity<KnowledgePartTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_part_types");

            entity.ToTable("knowledge_part_types", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_knowledge_part_types_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_knowledge_part_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<KnowledgeParts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_parts");

            entity.ToTable("knowledge_parts", "dbo");

            entity.HasIndex(e => e.Code, "idx_knowledge_parts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.KnowledgeClassifierId, "idx_knowledge_parts_15808724808404422624").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_knowledge_parts_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_knowledge_parts_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_knowledge_parts_13131358366429713202");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.ConfirmationType)
                .HasColumnType("character varying")
                .HasColumnName("confirmation_type");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ExpertiseLevelIndex).HasColumnName("expertise_level_index");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeClassifierId).HasColumnName("knowledge_classifier_id");
            entity.Property(e => e.KnowledgePartTypeId).HasColumnName("knowledge_part_type_id");
            entity.Property(e => e.KnowledgeParts1)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .HasColumnType("character varying")
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<KnowledgeProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_profile");

            entity.ToTable("knowledge_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KnowledgeProfile)
                .HasForeignKey<KnowledgeProfile>(d => d.Id)
                .HasConstraintName("FK_objects_knowledge_profile");
        });

        modelBuilder.Entity<KnowledgeProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledge_profiles");

            entity.ToTable("knowledge_profiles", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<Knowledges>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__knowledges");

            entity.ToTable("knowledges", "dbo");

            entity.HasIndex(e => e.Type, "idx_knowledges_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_knowledges_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_knowledges_5293688598042000227");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.HasExperts).HasColumnName("has_experts");
            entity.Property(e => e.KnowledgeClassifierId).HasColumnName("knowledge_classifier_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentCatalog)
                .HasColumnType("character varying")
                .HasColumnName("parent_catalog");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Kpi>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi");

            entity.ToTable("kpi", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Kpi)
                .HasForeignKey<Kpi>(d => d.Id)
                .HasConstraintName("FK_objects_kpi");
        });

        modelBuilder.Entity<KpiGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_group");

            entity.ToTable("kpi_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KpiGroup)
                .HasForeignKey<KpiGroup>(d => d.Id)
                .HasConstraintName("FK_objects_kpi_group");
        });

        modelBuilder.Entity<KpiGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_groups");

            entity.ToTable("kpi_groups", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<KpiManagers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_managers");

            entity.ToTable("kpi_managers", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_kpi_managers_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ManagerType, "idx_kpi_managers_15036594214444723627").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ManagerId, "idx_kpi_managers_16038295480383307456").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_kpi_managers_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BossTypeId, "idx_kpi_managers_9251791295560244622").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.IsOwner).HasColumnName("is_owner");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.ManagerName)
                .HasColumnType("character varying")
                .HasColumnName("manager_name");
            entity.Property(e => e.ManagerType)
                .HasMaxLength(900)
                .HasColumnName("manager_type");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
        });

        modelBuilder.Entity<KpiPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_plan");

            entity.ToTable("kpi_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KpiPlan)
                .HasForeignKey<KpiPlan>(d => d.Id)
                .HasConstraintName("FK_objects_kpi_plan");
        });

        modelBuilder.Entity<KpiPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_plans");

            entity.ToTable("kpi_plans", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_kpi_plans_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_kpi_plans_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_kpi_plans_15310678443979824546").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Challenge)
                .HasColumnType("character varying")
                .HasColumnName("challenge");
            entity.Property(e => e.ChallengeText)
                .HasColumnType("character varying")
                .HasColumnName("challenge_text");
            entity.Property(e => e.ChallengeValue).HasColumnName("challenge_value");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.KpiId).HasColumnName("kpi_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectCatalog)
                .HasColumnType("character varying")
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.Plan)
                .HasColumnType("character varying")
                .HasColumnName("plan");
            entity.Property(e => e.PlanText)
                .HasColumnType("character varying")
                .HasColumnName("plan_text");
            entity.Property(e => e.PlanValue).HasColumnName("plan_value");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Threshold)
                .HasColumnType("character varying")
                .HasColumnName("threshold");
            entity.Property(e => e.ThresholdText)
                .HasColumnType("character varying")
                .HasColumnName("threshold_text");
            entity.Property(e => e.ThresholdValue).HasColumnName("threshold_value");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<KpiProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_profile");

            entity.ToTable("kpi_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KpiProfile)
                .HasForeignKey<KpiProfile>(d => d.Id)
                .HasConstraintName("FK_objects_kpi_profile");
        });

        modelBuilder.Entity<KpiProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_profiles");

            entity.ToTable("kpi_profiles", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_kpi_profiles_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_kpi_profiles_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_kpi_profiles_15310678443979824546").HasMethod("gin");

            entity.HasIndex(e => e.WorkflowMainPersonId, "idx_kpi_profiles_2876725375229571153").HasMethod("gin");

            entity.HasIndex(e => e.ParentKpiProfileId, "idx_kpi_profiles_496948470581209500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CompetenceProfileFamilyId, "idx_kpi_profiles_6749121501875089807").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_kpi_profiles_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => new { e.ParentKpiProfileId, e.Id }, "idxh_kpi_profiles_12702226733710952301");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileFamilyId).HasColumnName("competence_profile_family_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiId).HasColumnName("kpi_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentKpiProfileId).HasColumnName("parent_kpi_profile_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMainPersonId).HasColumnName("workflow_main_person_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<KpiValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_value");

            entity.ToTable("kpi_value", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.KpiValue)
                .HasForeignKey<KpiValue>(d => d.Id)
                .HasConstraintName("FK_objects_kpi_value");
        });

        modelBuilder.Entity<KpiValues>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpi_values");

            entity.ToTable("kpi_values", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_kpi_values_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_kpi_values_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_kpi_values_15310678443979824546").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.Fact).HasColumnName("fact");
            entity.Property(e => e.FactText)
                .HasColumnType("character varying")
                .HasColumnName("fact_text");
            entity.Property(e => e.FactValue).HasColumnName("fact_value");
            entity.Property(e => e.KpiId).HasColumnName("kpi_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectCatalog)
                .HasColumnType("character varying")
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<Kpis>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__kpis");

            entity.ToTable("kpis", "dbo");

            entity.HasIndex(e => e.KpiGroupId, "idx_kpis_16526394294030754869").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_kpis_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_kpis_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_kpis_13815751122475469324");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.FormulaId).HasColumnName("formula_id");
            entity.Property(e => e.IsKpi).HasColumnName("is_kpi");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiGroupId).HasColumnName("kpi_group_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OwnersIds)
                .HasColumnType("character varying")
                .HasColumnName("owners_ids");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.RangeMax).HasColumnName("range_max");
            entity.Property(e => e.RangeMin).HasColumnName("range_min");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.ScaleId).HasColumnName("scale_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Learning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning");

            entity.ToTable("learning", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Learning)
                .HasForeignKey<Learning>(d => d.Id)
                .HasConstraintName("FK_objects_learning");
        });

        modelBuilder.Entity<LearningPart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_part");

            entity.ToTable("learning_part", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningPart)
                .HasForeignKey<LearningPart>(d => d.Id)
                .HasConstraintName("FK_objects_learning_part");
        });

        modelBuilder.Entity<LearningParts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_parts");

            entity.ToTable("learning_parts", "dbo");

            entity.HasIndex(e => e.LearningId, "idx_learning_parts_1236129866984562634").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_learning_parts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.LearningId).HasColumnName("learning_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<LearningRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_record");

            entity.ToTable("learning_record", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningRecord)
                .HasForeignKey<LearningRecord>(d => d.Id)
                .HasConstraintName("FK_objects_learning_record");
        });

        modelBuilder.Entity<LearningRecords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_records");

            entity.ToTable("learning_records", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_learning_records_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActiveSessionFinishDate, "idx_learning_records_17058205433461383796").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_learning_records_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_learning_records_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_learning_records_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_learning_records_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveSessionFinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("active_session_finish_date");
            entity.Property(e => e.ActiveSessionId)
                .HasColumnType("character varying")
                .HasColumnName("active_session_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ArchiveProctorsId).HasColumnName("archive_proctors_id");
            entity.Property(e => e.CheckFotoStateId)
                .HasColumnType("character varying")
                .HasColumnName("check_foto_state_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DownloadMaterials).HasColumnName("download_materials");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsFinishRecord).HasColumnName("is_finish_record");
            entity.Property(e => e.IsPreferProctor).HasColumnName("is_prefer_proctor");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.NumFailedCheckedFoto).HasColumnName("num_failed_checked_foto");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ProctoringObjectId).HasColumnName("proctoring_object_id");
            entity.Property(e => e.ProctoringObjectName)
                .HasColumnType("character varying")
                .HasColumnName("proctoring_object_name");
            entity.Property(e => e.ProctoringObjectType)
                .HasColumnType("character varying")
                .HasColumnName("proctoring_object_type");
            entity.Property(e => e.ProctoringSystemId).HasColumnName("proctoring_system_id");
            entity.Property(e => e.ProctorsId).HasColumnName("proctors_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LearningStorage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_storage");

            entity.ToTable("learning_storage", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningStorage)
                .HasForeignKey<LearningStorage>(d => d.Id)
                .HasConstraintName("FK_objects_learning_storage");
        });

        modelBuilder.Entity<LearningStorages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_storages");

            entity.ToTable("learning_storages", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UseExtendedAnalytics).HasColumnName("use_extended_analytics");
        });

        modelBuilder.Entity<LearningTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_task");

            entity.ToTable("learning_task", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningTask)
                .HasForeignKey<LearningTask>(d => d.Id)
                .HasConstraintName("FK_objects_learning_task");
        });

        modelBuilder.Entity<LearningTaskResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_task_result");

            entity.ToTable("learning_task_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LearningTaskResult)
                .HasForeignKey<LearningTaskResult>(d => d.Id)
                .HasConstraintName("FK_objects_learning_task_result");
        });

        modelBuilder.Entity<LearningTaskResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_task_results");

            entity.ToTable("learning_task_results", "dbo");

            entity.HasIndex(e => e.ActiveLearningId, "idx_learning_task_results_10244212967401042657").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_learning_task_results_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_learning_task_results_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationPlanId, "idx_learning_task_results_4473033409711827227").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_learning_task_results_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_learning_task_results_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatusId, "idx_learning_task_results_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.Expired).HasColumnName("expired");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.FinishExecutionDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_execution_date");
            entity.Property(e => e.LearningTaskId).HasColumnName("learning_task_id");
            entity.Property(e => e.LearningTaskName)
                .HasColumnType("character varying")
                .HasColumnName("learning_task_name");
            entity.Property(e => e.Mark).HasColumnName("mark");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PlanEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_end_date");
            entity.Property(e => e.PlanStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("plan_start_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartExecutionDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_execution_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LearningTasks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learning_tasks");

            entity.ToTable("learning_tasks", "dbo");

            entity.HasIndex(e => e.Code, "idx_learning_tasks_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_learning_tasks_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_learning_tasks_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ExpertsId).HasColumnName("experts_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UseInEvent).HasColumnName("use_in_event");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.YourselfStart).HasColumnName("yourself_start");
        });

        modelBuilder.Entity<Learnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__learnings");

            entity.ToTable("learnings", "dbo");

            entity.HasIndex(e => e.ActiveLearningId, "idx_learnings_10244212967401042657").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Score, "idx_learnings_1274816053449134588").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseName, "idx_learnings_13156693899515752705").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_learnings_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartUsageDate, "idx_learnings_14685550398137120485").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartLearningDate, "idx_learnings_15507069630625229787").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MaxEndDate, "idx_learnings_15811904719283636476").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_learnings_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonCurrentState, "idx_learnings_18249609201350823935").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LastUsageDate, "idx_learnings_2805863787306454597").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EducationPlanId, "idx_learnings_4473033409711827227").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_learnings_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_learnings_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CourseId, "idx_learnings_6140445976813544658").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_learnings_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_learnings_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_learnings_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventName, "idx_learnings_675872731354680815").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveLearningId).HasColumnName("active_learning_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CourseId).HasColumnName("course_id");
            entity.Property(e => e.CourseName)
                .HasMaxLength(900)
                .HasColumnName("course_name");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasMaxLength(900)
                .HasColumnName("event_name");
            entity.Property(e => e.EventStartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("event_start_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsSelfEnrolled).HasColumnName("is_self_enrolled");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("max_end_date");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.TextResult)
                .HasColumnType("character varying")
                .HasColumnName("text_result");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Lector>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__lector");

            entity.ToTable("lector", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Lector)
                .HasForeignKey<Lector>(d => d.Id)
                .HasConstraintName("FK_objects_lector");
        });

        modelBuilder.Entity<Lectors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__lectors");

            entity.ToTable("lectors", "dbo");

            entity.HasIndex(e => e.LectorFullname, "idx_lectors_10345492827639349727").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonSubdivisionName, "idx_lectors_12386749697825300543").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonPositionName, "idx_lectors_15882167075370757597").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_lectors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_lectors_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_lectors_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowPublication).HasColumnName("allow_publication");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Email)
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.IsDismiss).HasColumnName("is_dismiss");
            entity.Property(e => e.LectorFullname)
                .HasMaxLength(900)
                .HasColumnName("lector_fullname");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasMaxLength(900)
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasMaxLength(900)
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Level>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__level");

            entity.ToTable("level", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Level)
                .HasForeignKey<Level>(d => d.Id)
                .HasConstraintName("FK_objects_level");
        });

        modelBuilder.Entity<Levels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__levels");

            entity.ToTable("levels", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_levels_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_levels_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.MaxValue).HasColumnName("max_value");
            entity.Property(e => e.MinValue).HasColumnName("min_value");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PrevLevelId).HasColumnName("prev_level_id");
        });

        modelBuilder.Entity<LibraryMaterial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material");

            entity.ToTable("library_material", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterial)
                .HasForeignKey<LibraryMaterial>(d => d.Id)
                .HasConstraintName("FK_objects_library_material");
        });

        modelBuilder.Entity<LibraryMaterialComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_comment");

            entity.ToTable("library_material_comment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialComment)
                .HasForeignKey<LibraryMaterialComment>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_comment");
        });

        modelBuilder.Entity<LibraryMaterialComments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_comments");

            entity.ToTable("library_material_comments", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialFormat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_format");

            entity.ToTable("library_material_format", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialFormat)
                .HasForeignKey<LibraryMaterialFormat>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_format");
        });

        modelBuilder.Entity<LibraryMaterialFormats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_formats");

            entity.ToTable("library_material_formats", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FormatTypeId)
                .HasColumnType("character varying")
                .HasColumnName("format_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_item");

            entity.ToTable("library_material_item", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialItem)
                .HasForeignKey<LibraryMaterialItem>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_item");
        });

        modelBuilder.Entity<LibraryMaterialItems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_items");

            entity.ToTable("library_material_items", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_library_material_items_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MaterialId, "idx_library_material_items_2616372263322085142").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_library_material_items_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_library_material_items_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.FormatId).HasColumnName("format_id");
            entity.Property(e => e.IssueDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("issue_date");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.ReturnPlanDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("return_plan_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_objects");

            entity.ToTable("library_material_objects", "dbo");

            entity.HasIndex(e => e.LibraryMaterialId, "idx_library_material_objects_6361693793043123446").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.LibraryMaterialId).HasColumnName("library_material_id");
            entity.Property(e => e.LibraryMaterialName)
                .HasColumnType("character varying")
                .HasColumnName("library_material_name");
            entity.Property(e => e.ObjectCatalog)
                .HasColumnType("character varying")
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
        });

        modelBuilder.Entity<LibraryMaterialSourceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_source_type");

            entity.ToTable("library_material_source_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialSourceType)
                .HasForeignKey<LibraryMaterialSourceType>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_source_type");
        });

        modelBuilder.Entity<LibraryMaterialSourceTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_source_types");

            entity.ToTable("library_material_source_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Filenamemask)
                .HasColumnType("character varying")
                .HasColumnName("filenamemask");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LibraryPlayerId).HasColumnName("library_player_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<LibraryMaterialType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_type");

            entity.ToTable("library_material_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialType)
                .HasForeignKey<LibraryMaterialType>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_type");
        });

        modelBuilder.Entity<LibraryMaterialTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_types");

            entity.ToTable("library_material_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterialViewing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_viewing");

            entity.ToTable("library_material_viewing", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryMaterialViewing)
                .HasForeignKey<LibraryMaterialViewing>(d => d.Id)
                .HasConstraintName("FK_objects_library_material_viewing");
        });

        modelBuilder.Entity<LibraryMaterialViewings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_material_viewings");

            entity.ToTable("library_material_viewings", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_library_material_viewings_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_library_material_viewings_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_library_material_viewings_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_library_material_viewings_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.FinishViewingDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_viewing_date");
            entity.Property(e => e.LastViewingDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_viewing_date");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.MaterialName)
                .HasColumnType("character varying")
                .HasColumnName("material_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartViewingDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_viewing_date");
            entity.Property(e => e.StateId)
                .HasMaxLength(900)
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibraryMaterials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_materials");

            entity.ToTable("library_materials", "dbo");

            entity.HasIndex(e => e.Code, "idx_library_materials_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_library_materials_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowDownload).HasColumnName("allow_download");
            entity.Property(e => e.AllowSelfViewing).HasColumnName("allow_self_viewing");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Author)
                .HasColumnType("character varying")
                .HasColumnName("author");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.ExternalId)
                .HasColumnType("character varying")
                .HasColumnName("external_id");
            entity.Property(e => e.FileName).HasColumnName("file_name");
            entity.Property(e => e.HasDigital).HasColumnName("has_digital");
            entity.Property(e => e.HasPhysical).HasColumnName("has_physical");
            entity.Property(e => e.Image).HasColumnName("image");
            entity.Property(e => e.IsClosed).HasColumnName("is_closed");
            entity.Property(e => e.IsNeedAdminApproval).HasColumnName("is_need_admin_approval");
            entity.Property(e => e.Isbn)
                .HasColumnType("character varying")
                .HasColumnName("isbn");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LibraryMaterialFormats)
                .HasColumnType("character varying")
                .HasColumnName("library_material_formats");
            entity.Property(e => e.LibraryMaterialTypeId).HasColumnName("library_material_type_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OnlineVideoPrepared).HasColumnName("online_video_prepared");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SectionId).HasColumnName("section_id");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.StatusInKnowledgeMap)
                .HasColumnType("character varying")
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Year).HasColumnName("year");
        });

        modelBuilder.Entity<LibraryPlayer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_player");

            entity.ToTable("library_player", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibraryPlayer)
                .HasForeignKey<LibraryPlayer>(d => d.Id)
                .HasConstraintName("FK_objects_library_player");
        });

        modelBuilder.Entity<LibraryPlayers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_players");

            entity.ToTable("library_players", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Cmi5).HasColumnName("cmi5");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LearningStorageId).HasColumnName("learning_storage_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibrarySection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_section");

            entity.ToTable("library_section", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibrarySection)
                .HasForeignKey<LibrarySection>(d => d.Id)
                .HasConstraintName("FK_objects_library_section");
        });

        modelBuilder.Entity<LibrarySections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_sections");

            entity.ToTable("library_sections", "dbo");

            entity.HasIndex(e => e.ParentObjectId, "idx_library_sections_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_library_sections_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_library_sections_13776481924134574911");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ExternalId)
                .HasColumnType("character varying")
                .HasColumnName("external_id");
            entity.Property(e => e.Link)
                .HasColumnType("character varying")
                .HasColumnName("link");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<LibrarySystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_system");

            entity.ToTable("library_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.LibrarySystem)
                .HasForeignKey<LibrarySystem>(d => d.Id)
                .HasConstraintName("FK_objects_library_system");
        });

        modelBuilder.Entity<LibrarySystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__library_systems");

            entity.ToTable("library_systems", "dbo");

            entity.HasIndex(e => e.Code, "idx_library_systems_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_library_systems_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_library_systems_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_library_systems_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<License>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__license");

            entity.ToTable("license", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.License)
                .HasForeignKey<License>(d => d.Id)
                .HasConstraintName("FK_objects_license");
        });

        modelBuilder.Entity<Licenses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__licenses");

            entity.ToTable("licenses", "dbo");

            entity.HasIndex(e => e.Name, "idx_licenses_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ComputerName)
                .HasColumnType("character varying")
                .HasColumnName("computer_name");
            entity.Property(e => e.Demo).HasColumnName("demo");
            entity.Property(e => e.DomainName)
                .HasColumnType("character varying")
                .HasColumnName("domain_name");
            entity.Property(e => e.DomainShortName)
                .HasColumnType("character varying")
                .HasColumnName("domain_short_name");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsTemporary).HasColumnName("is_temporary");
            entity.Property(e => e.MaintainceDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("maintaince_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.SaleContractId).HasColumnName("sale_contract_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.UserName)
                .HasColumnType("character varying")
                .HasColumnName("user_name");
            entity.Property(e => e.UsersNum).HasColumnName("users_num");
        });

        modelBuilder.Entity<Like>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__like");

            entity.ToTable("like", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Like)
                .HasForeignKey<Like>(d => d.Id)
                .HasConstraintName("FK_objects_like");
        });

        modelBuilder.Entity<Likes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__likes");

            entity.ToTable("likes", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_likes_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_likes_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_likes_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_likes_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_likes_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.MessageId)
                .HasColumnType("character varying")
                .HasColumnName("message_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Reaction)
                .HasColumnType("character varying")
                .HasColumnName("reaction");
            entity.Property(e => e.SecObjectId).HasColumnName("sec_object_id");
            entity.Property(e => e.SecObjectType)
                .HasColumnType("character varying")
                .HasColumnName("sec_object_type");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<MaterialLiability>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__material_liability");

            entity.ToTable("material_liability", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.MaterialLiability)
                .HasForeignKey<MaterialLiability>(d => d.Id)
                .HasConstraintName("FK_objects_material_liability");
        });

        modelBuilder.Entity<MaterialLiabilitys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__material_liabilitys");

            entity.ToTable("material_liabilitys", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<MessengerService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__messenger_service");

            entity.ToTable("messenger_service", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.MessengerService)
                .HasForeignKey<MessengerService>(d => d.Id)
                .HasConstraintName("FK_objects_messenger_service");
        });

        modelBuilder.Entity<MessengerServices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__messenger_services");

            entity.ToTable("messenger_services", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_messenger_services_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<MobileAppConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__mobile_app_config");

            entity.ToTable("mobile_app_config", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.MobileAppConfig)
                .HasForeignKey<MobileAppConfig>(d => d.Id)
                .HasConstraintName("FK_objects_mobile_app_config");
        });

        modelBuilder.Entity<MobileAppConfigs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__mobile_app_configs");

            entity.ToTable("mobile_app_configs", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UseChat).HasColumnName("use_chat");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification");

            entity.ToTable("notification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Notification)
                .HasForeignKey<Notification>(d => d.Id)
                .HasConstraintName("FK_objects_notification");
        });

        modelBuilder.Entity<NotificationSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_system");

            entity.ToTable("notification_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.NotificationSystem)
                .HasForeignKey<NotificationSystem>(d => d.Id)
                .HasConstraintName("FK_objects_notification_system");
        });

        modelBuilder.Entity<NotificationSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_systems");

            entity.ToTable("notification_systems", "dbo");

            entity.HasIndex(e => e.Code, "idx_notification_systems_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_notification_systems_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_notification_systems_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_notification_systems_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_notification_systems_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<NotificationTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_template");

            entity.ToTable("notification_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.NotificationTemplate)
                .HasForeignKey<NotificationTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_notification_template");
        });

        modelBuilder.Entity<NotificationTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notification_templates");

            entity.ToTable("notification_templates", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_notification_templates_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Notifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__notifications");

            entity.ToTable("notifications", "dbo");

            entity.HasIndex(e => e.Code, "idx_notifications_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_notifications_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.ActiveChatbotScript).HasColumnName("active_chatbot_script");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.ChatbotId).HasColumnName("chatbot_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<ObjectClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_claim");

            entity.ToTable("object_claim", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectClaim)
                .HasForeignKey<ObjectClaim>(d => d.Id)
                .HasConstraintName("FK_objects_object_claim");
        });

        modelBuilder.Entity<ObjectClaims>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_claims");

            entity.ToTable("object_claims", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_object_claims_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SourceId, "idx_object_claims_13769318276429381706").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SourceRole, "idx_object_claims_15332644236415286188").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SourceType, "idx_object_claims_15639337982679168909").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_object_claims_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ElementCode, "idx_object_claims_4355093582621987220").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ElementId, "idx_object_claims_498468437546096888").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_object_claims_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectCode, "idx_object_claims_7262619082895775460").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ElementType, "idx_object_claims_9334856172093667833").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DataStr)
                .HasColumnType("character varying")
                .HasColumnName("data_str");
            entity.Property(e => e.Delete).HasColumnName("delete");
            entity.Property(e => e.ElementCode)
                .HasMaxLength(900)
                .HasColumnName("element_code");
            entity.Property(e => e.ElementId).HasColumnName("element_id");
            entity.Property(e => e.ElementName)
                .HasColumnType("character varying")
                .HasColumnName("element_name");
            entity.Property(e => e.ElementType)
                .HasMaxLength(900)
                .HasColumnName("element_type");
            entity.Property(e => e.Execute).HasColumnName("execute");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsManual).HasColumnName("is_manual");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.List).HasColumnName("list");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectCode)
                .HasMaxLength(900)
                .HasColumnName("object_code");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.Read).HasColumnName("read");
            entity.Property(e => e.SourceCode)
                .HasColumnType("character varying")
                .HasColumnName("source_code");
            entity.Property(e => e.SourceId).HasColumnName("source_id");
            entity.Property(e => e.SourceName)
                .HasColumnType("character varying")
                .HasColumnName("source_name");
            entity.Property(e => e.SourceRole)
                .HasMaxLength(900)
                .HasColumnName("source_role");
            entity.Property(e => e.SourceType)
                .HasMaxLength(900)
                .HasColumnName("source_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Value)
                .HasColumnType("character varying")
                .HasColumnName("value");
            entity.Property(e => e.Write).HasColumnName("write");
        });

        modelBuilder.Entity<ObjectData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_data");

            entity.ToTable("object_data", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectData)
                .HasForeignKey<ObjectData>(d => d.Id)
                .HasConstraintName("FK_objects_object_data");
        });

        modelBuilder.Entity<ObjectDataType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_data_type");

            entity.ToTable("object_data_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectDataType)
                .HasForeignKey<ObjectDataType>(d => d.Id)
                .HasConstraintName("FK_objects_object_data_type");
        });

        modelBuilder.Entity<ObjectDataTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_data_types");

            entity.ToTable("object_data_types", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_object_data_types_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SecObjectType, "idx_object_data_types_14558467002817298256").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_object_data_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SecObjectType)
                .HasMaxLength(900)
                .HasColumnName("sec_object_type");
        });

        modelBuilder.Entity<ObjectDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_datas");

            entity.ToTable("object_datas", "dbo");

            entity.HasIndex(e => e.ObjectDataTypeId, "idx_object_datas_10995729889425945874").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SecObjectId, "idx_object_datas_11502215003213000299").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SecObjectName, "idx_object_datas_14159847825832139547").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_object_datas_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_object_datas_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_object_datas_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_object_datas_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.StatusId, "idx_object_datas_799454895745346469").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DataStr)
                .HasColumnType("character varying")
                .HasColumnName("data_str");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectDataTypeId).HasColumnName("object_data_type_id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SecObjectId).HasColumnName("sec_object_id");
            entity.Property(e => e.SecObjectName)
                .HasMaxLength(900)
                .HasColumnName("sec_object_name");
            entity.Property(e => e.SecObjectType)
                .HasColumnType("character varying")
                .HasColumnName("sec_object_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasMaxLength(900)
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ObjectExperts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_experts");

            entity.ToTable("object_experts", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_object_experts_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_object_experts_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_object_experts_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<ObjectLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_link");

            entity.ToTable("object_link", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectLink)
                .HasForeignKey<ObjectLink>(d => d.Id)
                .HasConstraintName("FK_objects_object_link");
        });

        modelBuilder.Entity<ObjectLinks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_links");

            entity.ToTable("object_links", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_object_links_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_object_links_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CalcDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("calc_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.RecommenderAlgorithmId).HasColumnName("recommender_algorithm_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<ObjectParam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_param");

            entity.ToTable("object_param", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectParam)
                .HasForeignKey<ObjectParam>(d => d.Id)
                .HasConstraintName("FK_objects_object_param");
        });

        modelBuilder.Entity<ObjectParams>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_params");

            entity.ToTable("object_params", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_object_params_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BaseObjectName, "idx_object_params_15922016773021890452").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BaseObjectId, "idx_object_params_17256477652165493124").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_object_params_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BaseObjectId).HasColumnName("base_object_id");
            entity.Property(e => e.BaseObjectName)
                .HasMaxLength(900)
                .HasColumnName("base_object_name");
            entity.Property(e => e.BaseObjectType)
                .HasColumnType("character varying")
                .HasColumnName("base_object_type");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.SecObjectCode)
                .HasColumnType("character varying")
                .HasColumnName("sec_object_code");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<ObjectRequirements>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_requirements");

            entity.ToTable("object_requirements", "dbo");

            entity.HasIndex(e => e.ObjectId, "idx_object_requirements_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditionalParam)
                .HasColumnType("character varying")
                .HasColumnName("additional_param");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Obligatory).HasColumnName("obligatory");
            entity.Property(e => e.RequirementObjectId).HasColumnName("requirement_object_id");
            entity.Property(e => e.RequirementObjectType)
                .HasColumnType("character varying")
                .HasColumnName("requirement_object_type");
            entity.Property(e => e.RequirementType)
                .HasColumnType("character varying")
                .HasColumnName("requirement_type");
            entity.Property(e => e.RequirementValue)
                .HasColumnType("character varying")
                .HasColumnName("requirement_value");
            entity.Property(e => e.SecRequirementObjectId).HasColumnName("sec_requirement_object_id");
            entity.Property(e => e.SecRequirementObjectType)
                .HasColumnType("character varying")
                .HasColumnName("sec_requirement_object_type");
        });

        modelBuilder.Entity<ObjectResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_resource");

            entity.ToTable("object_resource", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectResource)
                .HasForeignKey<ObjectResource>(d => d.Id)
                .HasConstraintName("FK_objects_object_resource");
        });

        modelBuilder.Entity<ObjectResources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_resources");

            entity.ToTable("object_resources", "dbo");

            entity.HasIndex(e => e.PlaceId, "idx_object_resources_16946963701283065157").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ObjectVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_version");

            entity.ToTable("object_version", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectVersion)
                .HasForeignKey<ObjectVersion>(d => d.Id)
                .HasConstraintName("FK_objects_object_version");
        });

        modelBuilder.Entity<ObjectVersions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__object_versions");

            entity.ToTable("object_versions", "dbo");

            entity.HasIndex(e => e.CatalogName, "idx_object_versions_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectModificationDate, "idx_object_versions_12095789710763057969").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_object_versions_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_object_versions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_object_versions_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_object_versions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("object_modification_date");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ObjectiveTranslate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__objective_translate");

            entity.ToTable("objective_translate", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ObjectiveTranslate)
                .HasForeignKey<ObjectiveTranslate>(d => d.Id)
                .HasConstraintName("FK_objects_objective_translate");
        });

        modelBuilder.Entity<ObjectiveTranslates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__objective_translates");

            entity.ToTable("objective_translates", "dbo");

            entity.HasIndex(e => e.RecipientPersonId, "idx_objective_translates_10163321062571269731").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TranslatorPersonFullname, "idx_objective_translates_10716799935000568914").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RecipientObjectiveId, "idx_objective_translates_11058826740464074664").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_objective_translates_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TranslatorObjectiveName, "idx_objective_translates_4702955356739935456").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TranslatorObjectiveId, "idx_objective_translates_55177824893004065").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TranslatorPersonId, "idx_objective_translates_5804621369671941047").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RecipientObjectiveName, "idx_objective_translates_7741163683699849491").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.RecipientObjectiveId)
                .HasMaxLength(900)
                .HasColumnName("recipient_objective_id");
            entity.Property(e => e.RecipientObjectiveName)
                .HasMaxLength(900)
                .HasColumnName("recipient_objective_name");
            entity.Property(e => e.RecipientPaId).HasColumnName("recipient_pa_id");
            entity.Property(e => e.RecipientPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("recipient_person_fullname");
            entity.Property(e => e.RecipientPersonId).HasColumnName("recipient_person_id");
            entity.Property(e => e.TranslatorObjectiveId)
                .HasMaxLength(900)
                .HasColumnName("translator_objective_id");
            entity.Property(e => e.TranslatorObjectiveName)
                .HasMaxLength(900)
                .HasColumnName("translator_objective_name");
            entity.Property(e => e.TranslatorPaId).HasColumnName("translator_pa_id");
            entity.Property(e => e.TranslatorPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("translator_person_fullname");
            entity.Property(e => e.TranslatorPersonId).HasColumnName("translator_person_id");
        });

        modelBuilder.Entity<Operation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__operation");

            entity.ToTable("operation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Operation)
                .HasForeignKey<Operation>(d => d.Id)
                .HasConstraintName("FK_objects_operation");
        });

        modelBuilder.Entity<Operations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__operations");

            entity.ToTable("operations", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_operations_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Action)
                .HasColumnType("character varying")
                .HasColumnName("action");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Group)
                .HasColumnType("character varying")
                .HasColumnName("group");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.IsSystem).HasColumnName("is_system");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.OperationCatalogList)
                .HasColumnType("character varying")
                .HasColumnName("operation_catalog_list");
            entity.Property(e => e.OperationType).HasColumnName("operation_type");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.RemoteActionId).HasColumnName("remote_action_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UseAccessEval).HasColumnName("use_access_eval");
            entity.Property(e => e.UseScript).HasColumnName("use_script");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__order");

            entity.ToTable("order", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Order)
                .HasForeignKey<Order>(d => d.Id)
                .HasConstraintName("FK_objects_order");
        });

        modelBuilder.Entity<OrderType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__order_type");

            entity.ToTable("order_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OrderType)
                .HasForeignKey<OrderType>(d => d.Id)
                .HasConstraintName("FK_objects_order_type");
        });

        modelBuilder.Entity<OrderTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__order_types");

            entity.ToTable("order_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DefaultFlag).HasColumnName("default_flag");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.PerformerPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("performer_person_fullname");
            entity.Property(e => e.Prefix)
                .HasColumnType("character varying")
                .HasColumnName("prefix");
            entity.Property(e => e.ResponsiblePersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("responsible_person_fullname");
            entity.Property(e => e.SigningPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("signing_person_fullname");
            entity.Property(e => e.Suffix)
                .HasColumnType("character varying")
                .HasColumnName("suffix");
        });

        modelBuilder.Entity<OrderedCollaborators>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ordered_collaborators", "dbo");

            entity.Property(e => e.CommonDivisionId).HasColumnName("common_division_id");
            entity.Property(e => e.CommonDivisionName).HasColumnName("common_division_name");
            entity.Property(e => e.CommonPositionId).HasColumnName("common_position_id");
            entity.Property(e => e.CommonPositionName).HasColumnName("common_position_name");
            entity.Property(e => e.PositionName).HasColumnName("position_name");
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__orders");

            entity.ToTable("orders", "dbo");

            entity.HasIndex(e => e.IssueDate, "idx_orders_13173815233064294134").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_orders_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PaidDate, "idx_orders_1399943653664221089").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_orders_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_orders_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FormedDate, "idx_orders_5280009441346938527").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_orders_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_orders_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_orders_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_orders_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.FormedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("formed_date");
            entity.Property(e => e.IssueDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("issue_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paid_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.Sum).HasColumnName("sum");
        });

        modelBuilder.Entity<Org>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__org");

            entity.ToTable("org", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Org)
                .HasForeignKey<Org>(d => d.Id)
                .HasConstraintName("FK_objects_org");
        });

        modelBuilder.Entity<OrgVendorState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__org_vendor_state");

            entity.ToTable("org_vendor_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OrgVendorState)
                .HasForeignKey<OrgVendorState>(d => d.Id)
                .HasConstraintName("FK_objects_org_vendor_state");
        });

        modelBuilder.Entity<OrgVendorStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__org_vendor_states");

            entity.ToTable("org_vendor_states", "dbo");

            entity.HasIndex(e => e.Code, "idx_org_vendor_states_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_org_vendor_states_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_org_vendor_states_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_org_vendor_states_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.RecertificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("recertification_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VendorStatusId).HasColumnName("vendor_status_id");
            entity.Property(e => e.VendorStatusTypeId)
                .HasColumnType("character varying")
                .HasColumnName("vendor_status_type_id");
        });

        modelBuilder.Entity<Orgs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__orgs");

            entity.ToTable("orgs", "dbo");

            entity.HasIndex(e => e.AccountId, "idx_orgs_10936151840519211456").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TagId, "idx_orgs_1837432429677149980").HasMethod("gin");

            entity.HasIndex(e => e.Name, "idx_orgs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DispName, "idx_orgs_3870709901753078958").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DispName)
                .HasMaxLength(900)
                .HasColumnName("disp_name");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<OutstaffAdditionalWork>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_additional_work");

            entity.ToTable("outstaff_additional_work", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffAdditionalWork)
                .HasForeignKey<OutstaffAdditionalWork>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_additional_work");
        });

        modelBuilder.Entity<OutstaffAdditionalWorks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_additional_works");

            entity.ToTable("outstaff_additional_works", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_outstaff_additional_works_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_outstaff_additional_works_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<OutstaffContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_contract");

            entity.ToTable("outstaff_contract", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffContract)
                .HasForeignKey<OutstaffContract>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_contract");
        });

        modelBuilder.Entity<OutstaffContracts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_contracts");

            entity.ToTable("outstaff_contracts", "dbo");

            entity.HasIndex(e => e.Code, "idx_outstaff_contracts_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_outstaff_contracts_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DispName, "idx_outstaff_contracts_3870709901753078958").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContractTypeId, "idx_outstaff_contracts_5886835499556141769").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_outstaff_contracts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OutstaffProviderId, "idx_outstaff_contracts_9199433642419462682").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DispName)
                .HasMaxLength(900)
                .HasColumnName("disp_name");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.OutstaffProviderId).HasColumnName("outstaff_provider_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<OutstaffOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order");

            entity.ToTable("outstaff_order", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffOrder)
                .HasForeignKey<OutstaffOrder>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_order");
        });

        modelBuilder.Entity<OutstaffOrderExecution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order_execution");

            entity.ToTable("outstaff_order_execution", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffOrderExecution)
                .HasForeignKey<OutstaffOrderExecution>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_order_execution");
        });

        modelBuilder.Entity<OutstaffOrderExecutionStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order_execution_stages");

            entity.ToTable("outstaff_order_execution_stages", "dbo");

            entity.HasIndex(e => e.OutstaffOrderExecutionId, "idx_outstaff_order_execution_stages_13231308651235634601").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StageId, "idx_outstaff_order_execution_stages_9461439295677836162").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.FormedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("formed_date");
            entity.Property(e => e.OutstaffContractId).HasColumnName("outstaff_contract_id");
            entity.Property(e => e.OutstaffOrderExecutionId).HasColumnName("outstaff_order_execution_id");
            entity.Property(e => e.OutstaffOrderId).HasColumnName("outstaff_order_id");
            entity.Property(e => e.OutstaffProviderId).HasColumnName("outstaff_provider_id");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.StageCollaboratorId).HasColumnName("stage_collaborator_id");
            entity.Property(e => e.StageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stage_date");
            entity.Property(e => e.StageFactDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stage_fact_date");
            entity.Property(e => e.StageHourNum).HasColumnName("stage_hour_num");
            entity.Property(e => e.StageHoursWorked).HasColumnName("stage_hours_worked");
            entity.Property(e => e.StageId)
                .HasMaxLength(900)
                .HasColumnName("stage_id");
            entity.Property(e => e.StageIsAssist).HasColumnName("stage_is_assist");
            entity.Property(e => e.StageParentId)
                .HasColumnType("character varying")
                .HasColumnName("stage_parent_id");
            entity.Property(e => e.StageStatusType)
                .HasColumnType("character varying")
                .HasColumnName("stage_status_type");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
        });

        modelBuilder.Entity<OutstaffOrderExecutions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_order_executions");

            entity.ToTable("outstaff_order_executions", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_outstaff_order_executions_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CollaboratorFullname, "idx_outstaff_order_executions_13054514177241948053").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_outstaff_order_executions_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_outstaff_order_executions_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_outstaff_order_executions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PaidDate, "idx_outstaff_order_executions_1399943653664221089").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionName, "idx_outstaff_order_executions_16033988723761016696").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionCommonId, "idx_outstaff_order_executions_16314848977653227823").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_outstaff_order_executions_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OutstaffContractName, "idx_outstaff_order_executions_17016186186204434895").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_outstaff_order_executions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionCommonName, "idx_outstaff_order_executions_4022581453912695533").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_outstaff_order_executions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FormedDate, "idx_outstaff_order_executions_5280009441346938527").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_outstaff_order_executions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_outstaff_order_executions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_outstaff_order_executions_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OutstaffContractId, "idx_outstaff_order_executions_8939555370767899444").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_outstaff_order_executions_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorFullname)
                .HasMaxLength(900)
                .HasColumnName("collaborator_fullname");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.FormedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("formed_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.OutstaffContractId).HasColumnName("outstaff_contract_id");
            entity.Property(e => e.OutstaffContractName)
                .HasMaxLength(900)
                .HasColumnName("outstaff_contract_name");
            entity.Property(e => e.PaidDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paid_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionCommonName)
                .HasMaxLength(900)
                .HasColumnName("position_common_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasMaxLength(900)
                .HasColumnName("subdivision_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<OutstaffOrders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_orders");

            entity.ToTable("outstaff_orders", "dbo");

            entity.HasIndex(e => e.Code, "idx_outstaff_orders_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PaidDate, "idx_outstaff_orders_1399943653664221089").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_outstaff_orders_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_outstaff_orders_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_outstaff_orders_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FormedDate, "idx_outstaff_orders_5280009441346938527").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_outstaff_orders_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_outstaff_orders_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_outstaff_orders_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_outstaff_orders_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AgreementPersonId).HasColumnName("agreement_person_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CostHour).HasColumnName("cost_hour");
            entity.Property(e => e.CostSum).HasColumnName("cost_sum");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.FormedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("formed_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PaidDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paid_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<OutstaffProvider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_provider");

            entity.ToTable("outstaff_provider", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffProvider)
                .HasForeignKey<OutstaffProvider>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_provider");
        });

        modelBuilder.Entity<OutstaffProviders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_providers");

            entity.ToTable("outstaff_providers", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_outstaff_providers_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_outstaff_providers_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<OutstaffTypeMaterial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_type_material");

            entity.ToTable("outstaff_type_material", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OutstaffTypeMaterial)
                .HasForeignKey<OutstaffTypeMaterial>(d => d.Id)
                .HasConstraintName("FK_objects_outstaff_type_material");
        });

        modelBuilder.Entity<OutstaffTypeMaterials>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__outstaff_type_materials");

            entity.ToTable("outstaff_type_materials", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_outstaff_type_materials_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_outstaff_type_materials_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<OverrideWebTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__override_web_template");

            entity.ToTable("override_web_template", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.OverrideWebTemplate)
                .HasForeignKey<OverrideWebTemplate>(d => d.Id)
                .HasConstraintName("FK_objects_override_web_template");
        });

        modelBuilder.Entity<OverrideWebTemplates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__override_web_templates");

            entity.ToTable("override_web_templates", "dbo");

            entity.HasIndex(e => e.Zone, "idx_override_web_templates_1019161334627425493").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Mode, "idx_override_web_templates_13285943929994488356").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentId, "idx_override_web_templates_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SiteId, "idx_override_web_templates_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Weight, "idx_override_web_templates_6363226784230663564").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WebDesignId, "idx_override_web_templates_6855991949085019777").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_override_web_templates_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_override_web_templates_253815978592854690");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.CustomWebTemplateName)
                .HasColumnType("character varying")
                .HasColumnName("custom_web_template_name");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.Mode)
                .HasMaxLength(900)
                .HasColumnName("mode");
            entity.Property(e => e.ModeException)
                .HasColumnType("character varying")
                .HasColumnName("mode_exception");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.WvarsNum).HasColumnName("wvars_num");
            entity.Property(e => e.Zone)
                .HasMaxLength(900)
                .HasColumnName("zone");
        });

        modelBuilder.Entity<Pa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pa");

            entity.ToTable("pa", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Pa)
                .HasForeignKey<Pa>(d => d.Id)
                .HasConstraintName("FK_objects_pa");
        });

        modelBuilder.Entity<Participant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__participant");

            entity.ToTable("participant", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Participant)
                .HasForeignKey<Participant>(d => d.Id)
                .HasConstraintName("FK_objects_participant");
        });

        modelBuilder.Entity<Participants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__participants");

            entity.ToTable("participants", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContestId).HasColumnName("contest_id");
            entity.Property(e => e.ContestName)
                .HasColumnType("character varying")
                .HasColumnName("contest_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkName)
                .HasColumnType("character varying")
                .HasColumnName("work_name");
        });

        modelBuilder.Entity<Pas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pas");

            entity.ToTable("pas", "dbo");

            entity.HasIndex(e => e.DepartmentId, "idx_pas_14827633953248932632").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpertPersonId, "idx_pas_15179806528777423025").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_pas_15310678443979824546").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_pas_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_pas_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpertPersonFullname, "idx_pas_5890983671244772754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_pas_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsCustomExperts, "idx_pas_8768740737131510458").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_pas_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentPlanId, "idx_pas_9338857772878921297").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseType, "idx_pas_942754169938699908").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CustomExpertsArray, "idx_pas_9862283384034150577").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AppraiseDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("appraise_date");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentAppraiseType)
                .HasMaxLength(900)
                .HasColumnName("assessment_appraise_type");
            entity.Property(e => e.AssessmentPlanId).HasColumnName("assessment_plan_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileId).HasColumnName("competence_profile_id");
            entity.Property(e => e.CustomExperts)
                .HasColumnType("character varying")
                .HasColumnName("custom_experts");
            entity.Property(e => e.CustomExpertsArray).HasColumnName("custom_experts_array");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartmentName)
                .HasColumnType("character varying")
                .HasColumnName("department_name");
            entity.Property(e => e.ExpertPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionId).HasColumnName("expert_person_position_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.ExpertPersonPositionParentId).HasColumnName("expert_person_position_parent_id");
            entity.Property(e => e.FlagAppraiseDepartment).HasColumnName("flag_appraise_department");
            entity.Property(e => e.FlagIsProcessed).HasColumnName("flag_is_processed");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.IsCustomExperts).HasColumnName("is_custom_experts");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsFinal).HasColumnName("is_final");
            entity.Property(e => e.IsReady).HasColumnName("is_ready");
            entity.Property(e => e.IsWorkflowInit).HasColumnName("is_workflow_init");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Overall).HasColumnName("overall");
            entity.Property(e => e.PeriodEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_end");
            entity.Property(e => e.PeriodStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_start");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonPositionParentId).HasColumnName("person_position_parent_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("workflow_end_date");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasColumnType("character varying")
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateLastDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("workflow_state_last_date");
            entity.Property(e => e.WorkflowStateName)
                .HasColumnType("character varying")
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<PayPhase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_phase");

            entity.ToTable("pay_phase", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PayPhase)
                .HasForeignKey<PayPhase>(d => d.Id)
                .HasConstraintName("FK_objects_pay_phase");
        });

        modelBuilder.Entity<PayPhases>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_phases");

            entity.ToTable("pay_phases", "dbo");

            entity.HasIndex(e => e.EventId, "idx_pay_phases_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActSum).HasColumnName("act_sum");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.DraftSum).HasColumnName("draft_sum");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.EventName)
                .HasColumnType("character varying")
                .HasColumnName("event_name");
            entity.Property(e => e.InvoiceSum).HasColumnName("invoice_sum");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PayStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_stage");

            entity.ToTable("pay_stage", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PayStage)
                .HasForeignKey<PayStage>(d => d.Id)
                .HasConstraintName("FK_objects_pay_stage");
        });

        modelBuilder.Entity<PayStages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__pay_stages");

            entity.ToTable("pay_stages", "dbo");

            entity.HasIndex(e => e.AgentContractId, "idx_pay_stages_10567004578866400138").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FinishDate, "idx_pay_stages_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_pay_stages_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CostCenterId, "idx_pay_stages_15646206976949266431").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SaleContractId, "idx_pay_stages_17218485957316326268").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ClientOrgId, "idx_pay_stages_2384106701114904320").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_pay_stages_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_pay_stages_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AgentOrgId, "idx_pay_stages_9955437670064485172").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AgentContractId).HasColumnName("agent_contract_id");
            entity.Property(e => e.AgentOrgId).HasColumnName("agent_org_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AutoclosingPeriod).HasColumnName("autoclosing_period");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.ClosingMethod)
                .HasColumnType("character varying")
                .HasColumnName("closing_method");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.CostType)
                .HasColumnType("character varying")
                .HasColumnName("cost_type");
            entity.Property(e => e.FactCost).HasColumnName("fact_cost");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsAgentSaleContract).HasColumnName("is_agent_sale_contract");
            entity.Property(e => e.IsAutoclosing).HasColumnName("is_autoclosing");
            entity.Property(e => e.IsPrepayment).HasColumnName("is_prepayment");
            entity.Property(e => e.MaxCost).HasColumnName("max_cost");
            entity.Property(e => e.MinCost).HasColumnName("min_cost");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.SaleContractId).HasColumnName("sale_contract_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payment");

            entity.ToTable("payment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Payment)
                .HasForeignKey<Payment>(d => d.Id)
                .HasConstraintName("FK_objects_payment");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payment_type");

            entity.ToTable("payment_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PaymentType)
                .HasForeignKey<PaymentType>(d => d.Id)
                .HasConstraintName("FK_objects_payment_type");
        });

        modelBuilder.Entity<PaymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payment_types");

            entity.ToTable("payment_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_payment_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_payment_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_payment_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__payments");

            entity.ToTable("payments", "dbo");

            entity.HasIndex(e => e.EndDate, "idx_payments_10634200232319714908").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_payments_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PayDate, "idx_payments_15914367247529318506").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetId, "idx_payments_16081977113023356739").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_payments_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_payments_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_payments_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_payments_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PaymentTypeId, "idx_payments_6808913885338124276").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_payments_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetId).HasColumnName("budget_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PayDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("pay_date");
            entity.Property(e => e.PaymentTypeId).HasColumnName("payment_type_id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.Sum).HasColumnName("sum");
        });

        modelBuilder.Entity<PersonActivityInfos>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_activity_infos");

            entity.ToTable("person_activity_infos", "dbo");

            entity.HasIndex(e => e.ChatLastActivityDate, "idx_person_activity_infos_14680781870321813548").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.UpdateDate, "idx_person_activity_infos_4630293937025350100").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_person_activity_infos_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ChatLastActivityDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("chat_last_activity_date");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PresenceStateId).HasColumnName("presence_state_id");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("update_date");
        });

        modelBuilder.Entity<PersonHierarchys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_hierarchys");

            entity.ToTable("person_hierarchys", "dbo");

            entity.HasIndex(e => e.ParentSubId, "idx_person_hierarchys_11186870232302771560").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionId, "idx_person_hierarchys_12300354286168187930").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_person_hierarchys_13395769009383188844").HasMethod("gin");

            entity.HasIndex(e => e.CollaboratorId, "idx_person_hierarchys_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Ready, "idx_person_hierarchys_16339408110522923808").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.ParentSubId).HasColumnName("parent_sub_id");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.Ready).HasColumnName("ready");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
        });

        modelBuilder.Entity<PersonMessages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_messages");

            entity.ToTable("person_messages", "dbo");

            entity.HasIndex(e => e.Role, "idx_person_messages_11878516909473704005").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BlockMessageId, "idx_person_messages_12369987917495790481").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ConversationState, "idx_person_messages_14822528225553521115").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MessageText, "idx_person_messages_14871203438315205600").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Type, "idx_person_messages_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_person_messages_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_person_messages_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FileCount, "idx_person_messages_6481461703262139107").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MessageDate, "idx_person_messages_6936424942374819149").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MessageId, "idx_person_messages_6983428822526443952").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Unread, "idx_person_messages_8260114680666663297").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BlockMessageId).HasColumnName("block_message_id");
            entity.Property(e => e.ConversationState)
                .HasMaxLength(900)
                .HasColumnName("conversation_state");
            entity.Property(e => e.FileCount).HasColumnName("file_count");
            entity.Property(e => e.MessageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("message_date");
            entity.Property(e => e.MessageId)
                .HasMaxLength(900)
                .HasColumnName("message_id");
            entity.Property(e => e.MessageText)
                .HasMaxLength(900)
                .HasColumnName("message_text");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Role)
                .HasMaxLength(900)
                .HasColumnName("role");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
            entity.Property(e => e.Unread).HasColumnName("unread");
        });

        modelBuilder.Entity<PersonObjectLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_link");

            entity.ToTable("person_object_link", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonObjectLink)
                .HasForeignKey<PersonObjectLink>(d => d.Id)
                .HasConstraintName("FK_objects_person_object_link");
        });

        modelBuilder.Entity<PersonObjectLinkObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_link_objects");

            entity.ToTable("person_object_link_objects", "dbo");

            entity.HasIndex(e => e.ObjectCatalog, "idx_person_object_link_objects_10681222423890975726").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonObjectId, "idx_person_object_link_objects_13317646553853760398").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_person_object_link_objects_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_person_object_link_objects_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubjectId, "idx_person_object_link_objects_6797154433548467187").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.CanDelete).HasColumnName("can_delete");
            entity.Property(e => e.CanEdit).HasColumnName("can_edit");
            entity.Property(e => e.ObjectCatalog)
                .HasMaxLength(900)
                .HasColumnName("object_catalog");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonObjectId).HasColumnName("person_object_id");
            entity.Property(e => e.PersonObjectType)
                .HasColumnType("character varying")
                .HasColumnName("person_object_type");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SubjectType)
                .HasColumnType("character varying")
                .HasColumnName("subject_type");
        });

        modelBuilder.Entity<PersonObjectLinks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_links");

            entity.ToTable("person_object_links", "dbo");

            entity.HasIndex(e => e.SubjectId, "idx_person_object_links_6797154433548467187").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllCanCreate).HasColumnName("all_can_create");
            entity.Property(e => e.AllCanDelete).HasColumnName("all_can_delete");
            entity.Property(e => e.AllCanEdit).HasColumnName("all_can_edit");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectCatalog)
                .HasColumnType("character varying")
                .HasColumnName("object_catalog");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SubjectType)
                .HasColumnType("character varying")
                .HasColumnName("subject_type");
            entity.Property(e => e.Title)
                .HasColumnType("character varying")
                .HasColumnName("title");
        });

        modelBuilder.Entity<PersonObjectProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_profile");

            entity.ToTable("person_object_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonObjectProfile)
                .HasForeignKey<PersonObjectProfile>(d => d.Id)
                .HasConstraintName("FK_objects_person_object_profile");
        });

        modelBuilder.Entity<PersonObjectProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person_object_profiles");

            entity.ToTable("person_object_profiles", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectCatalog)
                .HasColumnType("character varying[]")
                .HasColumnName("object_catalog");
        });

        modelBuilder.Entity<PersonalAssistant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personal_assistant");

            entity.ToTable("personal_assistant", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonalAssistant)
                .HasForeignKey<PersonalAssistant>(d => d.Id)
                .HasConstraintName("FK_objects_personal_assistant");
        });

        modelBuilder.Entity<PersonalAssistants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personal_assistants");

            entity.ToTable("personal_assistants", "dbo");

            entity.HasIndex(e => e.Code, "idx_personal_assistants_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_personal_assistants_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_personal_assistants_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ChatbotIds, "idx_personal_assistants_6727148286098981537").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ChatbotIds).HasColumnName("chatbot_ids");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Sex)
                .HasColumnType("character varying")
                .HasColumnName("sex");
        });

        modelBuilder.Entity<PersonalChats>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personal_chats");

            entity.ToTable("personal_chats", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_personal_chats_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LastMessageSenderId, "idx_personal_chats_605401164430108672").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_personal_chats_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PartnerId, "idx_personal_chats_7053313101424025237").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ChatId, "idx_personal_chats_7602677624534958472").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ChatId).HasColumnName("chat_id");
            entity.Property(e => e.Confirmed).HasColumnName("confirmed");
            entity.Property(e => e.LastMessageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_message_date");
            entity.Property(e => e.LastMessageSenderId).HasColumnName("last_message_sender_id");
            entity.Property(e => e.LastMessageText)
                .HasColumnType("character varying")
                .HasColumnName("last_message_text");
            entity.Property(e => e.LastViewDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_view_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PartnerConfirmed).HasColumnName("partner_confirmed");
            entity.Property(e => e.PartnerFullname)
                .HasColumnType("character varying")
                .HasColumnName("partner_fullname");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerProhibited).HasColumnName("partner_prohibited");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Prohibited).HasColumnName("prohibited");
        });

        modelBuilder.Entity<PersonalDataProcessingConsent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personal_data_processing_consent");

            entity.ToTable("personal_data_processing_consent", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonalDataProcessingConsent)
                .HasForeignKey<PersonalDataProcessingConsent>(d => d.Id)
                .HasConstraintName("FK_objects_personal_data_processing_consent");
        });

        modelBuilder.Entity<PersonalDataProcessingConsents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personal_data_processing_consents");

            entity.ToTable("personal_data_processing_consents", "dbo");

            entity.HasIndex(e => e.SiteId, "idx_personal_data_processing_consents_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_personal_data_processing_consents_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_personal_data_processing_consents_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ConsentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("consent_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonType)
                .HasColumnType("character varying")
                .HasColumnName("person_type");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PersonnelCommittee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_committee");

            entity.ToTable("personnel_committee", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonnelCommittee)
                .HasForeignKey<PersonnelCommittee>(d => d.Id)
                .HasConstraintName("FK_objects_personnel_committee");
        });

        modelBuilder.Entity<PersonnelCommittees>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_committees");

            entity.ToTable("personnel_committees", "dbo");

            entity.HasIndex(e => e.EndDate, "idx_personnel_committees_10634200232319714908").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_personnel_committees_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_personnel_committees_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_personnel_committees_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_personnel_committees_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_personnel_committees_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_personnel_committees_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_personnel_committees_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_personnel_committees_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_personnel_committees_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Status, "idx_personnel_committees_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CommitteeDate, "idx_personnel_committees_9277379733295374682").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CommitteeDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("committee_date");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParticipantsStatus)
                .HasColumnType("character varying")
                .HasColumnName("participants_status");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PersonnelDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_document");

            entity.ToTable("personnel_document", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonnelDocument)
                .HasForeignKey<PersonnelDocument>(d => d.Id)
                .HasConstraintName("FK_objects_personnel_document");
        });

        modelBuilder.Entity<PersonnelDocumentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_document_type");

            entity.ToTable("personnel_document_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonnelDocumentType)
                .HasForeignKey<PersonnelDocumentType>(d => d.Id)
                .HasConstraintName("FK_objects_personnel_document_type");
        });

        modelBuilder.Entity<PersonnelDocumentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_document_types");

            entity.ToTable("personnel_document_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_personnel_document_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_personnel_document_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonnelEventCode, "idx_personnel_document_types_4700275503177032674").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_personnel_document_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CustomWebTemplateId).HasColumnName("custom_web_template_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgSignatureTypes)
                .HasColumnType("character varying[]")
                .HasColumnName("org_signature_types");
            entity.Property(e => e.PersonFirstSignature).HasColumnName("person_first_signature");
            entity.Property(e => e.PersonSignatureTypes)
                .HasColumnType("character varying[]")
                .HasColumnName("person_signature_types");
            entity.Property(e => e.PersonnelEventCode)
                .HasMaxLength(900)
                .HasColumnName("personnel_event_code");
            entity.Property(e => e.PrintFormId).HasColumnName("print_form_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<PersonnelDocuments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_documents");

            entity.ToTable("personnel_documents", "dbo");

            entity.HasIndex(e => e.Code, "idx_personnel_documents_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_personnel_documents_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Number, "idx_personnel_documents_7203975113318604942").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_personnel_documents_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AcquaintDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("acquaint_date");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasMaxLength(900)
                .HasColumnName("number");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSignatureDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("person_signature_date");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PersonnelDocumentTypeId).HasColumnName("personnel_document_type_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SignDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sign_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.WredcDataUrl)
                .HasColumnType("character varying")
                .HasColumnName("wredc_data_url");
        });

        modelBuilder.Entity<PersonnelReserve>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_reserve");

            entity.ToTable("personnel_reserve", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PersonnelReserve)
                .HasForeignKey<PersonnelReserve>(d => d.Id)
                .HasConstraintName("FK_objects_personnel_reserve");
        });

        modelBuilder.Entity<PersonnelReserves>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__personnel_reserves");

            entity.ToTable("personnel_reserves", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_personnel_reserves_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DevelopmentPotentialId, "idx_personnel_reserves_12691587570697570624").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_personnel_reserves_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonPositionName, "idx_personnel_reserves_15882167075370757597").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IncludeReserveDate, "idx_personnel_reserves_3027768600700526272").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.NominationId, "idx_personnel_reserves_5526677042975922311").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_personnel_reserves_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CareerReserveTypeId, "idx_personnel_reserves_6446321095670185680").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_personnel_reserves_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_personnel_reserves_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_personnel_reserves_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.EfficiencyEstimationId, "idx_personnel_reserves_7449878280595439136").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExclusionReasonId, "idx_personnel_reserves_7682387432171058214").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_personnel_reserves_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.ExclusionReasonId).HasColumnName("exclusion_reason_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IncludeReserveDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("include_reserve_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.NominationId).HasColumnName("nomination_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasMaxLength(900)
                .HasColumnName("person_position_name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Place>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__place");

            entity.ToTable("place", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Place)
                .HasForeignKey<Place>(d => d.Id)
                .HasConstraintName("FK_objects_place");
        });

        modelBuilder.Entity<Places>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__places");

            entity.ToTable("places", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_places_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_places_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_places_2468159177236120614");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.TimezoneId).HasColumnName("timezone_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Plugin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__plugin");

            entity.ToTable("plugin", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Plugin)
                .HasForeignKey<Plugin>(d => d.Id)
                .HasConstraintName("FK_objects_plugin");
        });

        modelBuilder.Entity<Plugins>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__plugins");

            entity.ToTable("plugins", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Block)
                .HasColumnType("character varying")
                .HasColumnName("block");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PluginId)
                .HasColumnType("character varying")
                .HasColumnName("plugin_id");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<Policy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__policy");

            entity.ToTable("policy", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Policy)
                .HasForeignKey<Policy>(d => d.Id)
                .HasConstraintName("FK_objects_policy");
        });

        modelBuilder.Entity<PolicyType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__policy_type");

            entity.ToTable("policy_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PolicyType)
                .HasForeignKey<PolicyType>(d => d.Id)
                .HasConstraintName("FK_objects_policy_type");
        });

        modelBuilder.Entity<PolicyTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__policy_types");

            entity.ToTable("policy_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Provider)
                .HasColumnType("character varying")
                .HasColumnName("provider");
        });

        modelBuilder.Entity<Policys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__policys");

            entity.ToTable("policys", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_policys_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_policys_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_policys_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PolicyTypeId).HasColumnName("policy_type_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<Poll>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll");

            entity.ToTable("poll", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Poll)
                .HasForeignKey<Poll>(d => d.Id)
                .HasConstraintName("FK_objects_poll");
        });

        modelBuilder.Entity<PollProcedure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_procedure");

            entity.ToTable("poll_procedure", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PollProcedure)
                .HasForeignKey<PollProcedure>(d => d.Id)
                .HasConstraintName("FK_objects_poll_procedure");
        });

        modelBuilder.Entity<PollProcedures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_procedures");

            entity.ToTable("poll_procedures", "dbo");

            entity.HasIndex(e => e.EqualHash, "idx_poll_procedures_11352568237669731440").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TriggerType, "idx_poll_procedures_17037899424259222141").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_poll_procedures_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.EqualHash)
                .HasMaxLength(900)
                .HasColumnName("equal_hash");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StrSubBossesIds)
                .HasColumnType("character varying")
                .HasColumnName("str_sub_bosses_ids");
            entity.Property(e => e.TriggerType)
                .HasMaxLength(900)
                .HasColumnName("trigger_type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebDisplay).HasColumnName("web_display");
        });

        modelBuilder.Entity<PollResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_result");

            entity.ToTable("poll_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PollResult)
                .HasForeignKey<PollResult>(d => d.Id)
                .HasConstraintName("FK_objects_poll_result");
        });

        modelBuilder.Entity<PollResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__poll_results");

            entity.ToTable("poll_results", "dbo");

            entity.HasIndex(e => e.Code, "idx_poll_results_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_poll_results_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_poll_results_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PollProcedureId, "idx_poll_results_3737196962034030934").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MainValue, "idx_poll_results_5233342122905748813").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_poll_results_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_poll_results_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_poll_results_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PollId, "idx_poll_results_6564434302445945014").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.MainValue)
                .HasMaxLength(900)
                .HasColumnName("main_value");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PollId).HasColumnName("poll_id");
            entity.Property(e => e.PollProcedureId).HasColumnName("poll_procedure_id");
            entity.Property(e => e.QuestionId).HasColumnName("question_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Polls>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__polls");

            entity.ToTable("polls", "dbo");

            entity.HasIndex(e => e.Name, "idx_polls_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_polls_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsAnonymous).HasColumnName("is_anonymous");
            entity.Property(e => e.IsMain).HasColumnName("is_main");
            entity.Property(e => e.IsOneTime).HasColumnName("is_one_time");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position");

            entity.ToTable("position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Position)
                .HasForeignKey<Position>(d => d.Id)
                .HasConstraintName("FK_objects_position");
        });

        modelBuilder.Entity<PositionAssessmentForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_assessment_form");

            entity.ToTable("position_assessment_form", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionAssessmentForm)
                .HasForeignKey<PositionAssessmentForm>(d => d.Id)
                .HasConstraintName("FK_objects_position_assessment_form");
        });

        modelBuilder.Entity<PositionAssessmentForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_assessment_forms");

            entity.ToTable("position_assessment_forms", "dbo");

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_position_assessment_forms_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.GradeId).HasColumnName("grade_id");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.Scale).HasColumnName("scale");
        });

        modelBuilder.Entity<PositionCommon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_common");

            entity.ToTable("position_common", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionCommon)
                .HasForeignKey<PositionCommon>(d => d.Id)
                .HasConstraintName("FK_objects_position_common");
        });

        modelBuilder.Entity<PositionCommonInstruction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_common_instruction");

            entity.ToTable("position_common_instruction", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionCommonInstruction)
                .HasForeignKey<PositionCommonInstruction>(d => d.Id)
                .HasConstraintName("FK_objects_position_common_instruction");
        });

        modelBuilder.Entity<PositionCommonInstructions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_common_instructions");

            entity.ToTable("position_common_instructions", "dbo");

            entity.HasIndex(e => e.SectionInstructionId, "idx_position_common_instructions_1007378690142010721").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_position_common_instructions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionCommonId, "idx_position_common_instructions_16314848977653227823").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_position_common_instructions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_position_common_instructions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_position_common_instructions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionCommonName)
                .HasColumnType("character varying")
                .HasColumnName("position_common_name");
            entity.Property(e => e.SectionInstructionId).HasColumnName("section_instruction_id");
            entity.Property(e => e.SectionInstructionName)
                .HasColumnType("character varying")
                .HasColumnName("section_instruction_name");
        });

        modelBuilder.Entity<PositionCommons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_commons");

            entity.ToTable("position_commons", "dbo");

            entity.HasIndex(e => e.Code, "idx_position_commons_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentPositionCommonId, "idx_position_commons_14144040492162869866").HasMethod("gin");

            entity.HasIndex(e => e.Name, "idx_position_commons_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GradeIds, "idx_position_commons_6901695588059212844").HasMethod("gin");

            entity.HasIndex(e => e.RoleId, "idx_position_commons_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllowOutstaff).HasColumnName("allow_outstaff");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.GradeIds).HasColumnName("grade_ids");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KnowledgeProfileId).HasColumnName("knowledge_profile_id");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.MaxSalary).HasColumnName("max_salary");
            entity.Property(e => e.MinSalary).HasColumnName("min_salary");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentPositionCommonId).HasColumnName("parent_position_common_id");
            entity.Property(e => e.PositionFamilys)
                .HasColumnType("character varying")
                .HasColumnName("position_familys");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<PositionFamily>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_family");

            entity.ToTable("position_family", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionFamily)
                .HasForeignKey<PositionFamily>(d => d.Id)
                .HasConstraintName("FK_objects_position_family");
        });

        modelBuilder.Entity<PositionFamilys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_familys");

            entity.ToTable("position_familys", "dbo");

            entity.HasIndex(e => e.Code, "idx_position_familys_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentPositionFamilyId, "idx_position_familys_18422691181093369822").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_position_familys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_position_familys_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_position_familys_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileId).HasColumnName("competence_profile_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentPositionFamilyId).HasColumnName("parent_position_family_id");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PositionLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_level");

            entity.ToTable("position_level", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PositionLevel)
                .HasForeignKey<PositionLevel>(d => d.Id)
                .HasConstraintName("FK_objects_position_level");
        });

        modelBuilder.Entity<PositionLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__position_levels");

            entity.ToTable("position_levels", "dbo");

            entity.HasIndex(e => e.Code, "idx_position_levels_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_position_levels_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_position_levels_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Positions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__positions");

            entity.ToTable("positions", "dbo");

            entity.HasIndex(e => e.StaffPositionId, "idx_positions_12739653343785313456").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_positions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_positions_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BasicCollaboratorId, "idx_positions_2582659475390779620").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_positions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_positions_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_positions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BasicCollaboratorFullname, "idx_positions_6159977822715186253").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_positions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BasicCollaboratorFullname)
                .HasMaxLength(900)
                .HasColumnName("basic_collaborator_fullname");
            entity.Property(e => e.BasicCollaboratorId).HasColumnName("basic_collaborator_id");
            entity.Property(e => e.BasicRate).HasColumnName("basic_rate");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileId).HasColumnName("competence_profile_id");
            entity.Property(e => e.IsBoss).HasColumnName("is_boss");
            entity.Property(e => e.IsPositionFinished).HasColumnName("is_position_finished");
            entity.Property(e => e.KnowledgeProfileId).HasColumnName("knowledge_profile_id");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PositionAppointmentTypeId).HasColumnName("position_appointment_type_id");
            entity.Property(e => e.PositionAssignmentType)
                .HasColumnType("character varying")
                .HasColumnName("position_assignment_type");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("position_date");
            entity.Property(e => e.PositionFamilyId).HasColumnName("position_family_id");
            entity.Property(e => e.PositionFinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("position_finish_date");
            entity.Property(e => e.StaffPositionId).HasColumnName("staff_position_id");
        });

        modelBuilder.Entity<PotentialGrade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__potential_grade");

            entity.ToTable("potential_grade", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PotentialGrade)
                .HasForeignKey<PotentialGrade>(d => d.Id)
                .HasConstraintName("FK_objects_potential_grade");
        });

        modelBuilder.Entity<PotentialGrades>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__potential_grades");

            entity.ToTable("potential_grades", "dbo");

            entity.HasIndex(e => e.SuccessorId, "idx_potential_grades_10748794002060237350").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DevelopmentPotentialId, "idx_potential_grades_12691587570697570624").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonnelReserveId, "idx_potential_grades_17856881109671369851").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentAppraiseId, "idx_potential_grades_2932960264354621638").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_potential_grades_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_potential_grades_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessorId, "idx_potential_grades_6200837959125073660").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_potential_grades_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("assessment_date");
            entity.Property(e => e.AssessmentSource)
                .HasColumnType("character varying")
                .HasColumnName("assessment_source");
            entity.Property(e => e.AssessorId).HasColumnName("assessor_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonnelReserveId).HasColumnName("personnel_reserve_id");
            entity.Property(e => e.SuccessorId).HasColumnName("successor_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PresenceState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__presence_state");

            entity.ToTable("presence_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PresenceState)
                .HasForeignKey<PresenceState>(d => d.Id)
                .HasConstraintName("FK_objects_presence_state");
        });

        modelBuilder.Entity<PresenceStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__presence_states");

            entity.ToTable("presence_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Accessible).HasColumnName("accessible");
            entity.Property(e => e.AllDay).HasColumnName("all_day");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CanCancel).HasColumnName("can_cancel");
            entity.Property(e => e.CanChange).HasColumnName("can_change");
            entity.Property(e => e.CancelWorkflowId).HasColumnName("cancel_workflow_id");
            entity.Property(e => e.ChangeWorkflowId).HasColumnName("change_workflow_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsAbsence).HasColumnName("is_absence");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.IsSubWorkTime).HasColumnName("is_sub_work_time");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.StateName)
                .HasColumnType("character varying")
                .HasColumnName("state_name");
            entity.Property(e => e.StyleCss)
                .HasColumnType("character varying")
                .HasColumnName("style_css");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<Presentation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__presentation");

            entity.ToTable("presentation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Presentation)
                .HasForeignKey<Presentation>(d => d.Id)
                .HasConstraintName("FK_objects_presentation");
        });

        modelBuilder.Entity<Presentations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__presentations");

            entity.ToTable("presentations", "dbo");

            entity.HasIndex(e => e.Code, "idx_presentations_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_presentations_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.FileId).HasColumnName("file_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.VclassSettingId).HasColumnName("vclass_setting_id");
        });

        modelBuilder.Entity<Price>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__price");

            entity.ToTable("price", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Price)
                .HasForeignKey<Price>(d => d.Id)
                .HasConstraintName("FK_objects_price");
        });

        modelBuilder.Entity<Prices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__prices");

            entity.ToTable("prices", "dbo");

            entity.HasIndex(e => e.Code, "idx_prices_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_prices_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_prices_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<PrintForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__print_form");

            entity.ToTable("print_form", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PrintForm)
                .HasForeignKey<PrintForm>(d => d.Id)
                .HasConstraintName("FK_objects_print_form");
        });

        modelBuilder.Entity<PrintForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__print_forms");

            entity.ToTable("print_forms", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_print_forms_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_print_forms_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.FileName)
                .HasColumnType("character varying")
                .HasColumnName("file_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<ProctoringSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__proctoring_system");

            entity.ToTable("proctoring_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProctoringSystem)
                .HasForeignKey<ProctoringSystem>(d => d.Id)
                .HasConstraintName("FK_objects_proctoring_system");
        });

        modelBuilder.Entity<ProctoringSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__proctoring_systems");

            entity.ToTable("proctoring_systems", "dbo");

            entity.HasIndex(e => e.Code, "idx_proctoring_systems_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_proctoring_systems_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_proctoring_systems_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_proctoring_systems_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Profession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profession");

            entity.ToTable("profession", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Profession)
                .HasForeignKey<Profession>(d => d.Id)
                .HasConstraintName("FK_objects_profession");
        });

        modelBuilder.Entity<ProfessionCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profession_category");

            entity.ToTable("profession_category", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProfessionCategory)
                .HasForeignKey<ProfessionCategory>(d => d.Id)
                .HasConstraintName("FK_objects_profession_category");
        });

        modelBuilder.Entity<ProfessionCategorys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profession_categorys");

            entity.ToTable("profession_categorys", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ProfessionalArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professional_area");

            entity.ToTable("professional_area", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProfessionalArea)
                .HasForeignKey<ProfessionalArea>(d => d.Id)
                .HasConstraintName("FK_objects_professional_area");
        });

        modelBuilder.Entity<ProfessionalAreaType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professional_area_type");

            entity.ToTable("professional_area_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProfessionalAreaType)
                .HasForeignKey<ProfessionalAreaType>(d => d.Id)
                .HasConstraintName("FK_objects_professional_area_type");
        });

        modelBuilder.Entity<ProfessionalAreaTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professional_area_types");

            entity.ToTable("professional_area_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ProfessionalAreas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professional_areas");

            entity.ToTable("professional_areas", "dbo");

            entity.HasIndex(e => e.Code, "idx_professional_areas_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentId, "idx_professional_areas_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_professional_areas_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_professional_areas_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_professional_areas_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_professional_areas_449973164739816777");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ProfessionalAreaTypeId).HasColumnName("professional_area_type_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Professions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__professions");

            entity.ToTable("professions", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProfessionalAreaId).HasColumnName("professional_area_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profile");

            entity.ToTable("profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Profile)
                .HasForeignKey<Profile>(d => d.Id)
                .HasConstraintName("FK_objects_profile");
        });

        modelBuilder.Entity<Profiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profiles");

            entity.ToTable("profiles", "dbo");

            entity.HasIndex(e => e.ActivityCode, "idx_profiles_10792972903593008671").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActivityId, "idx_profiles_1272820070198399442").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_profiles_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_profiles_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AgentJsonStr, "idx_profiles_760678047644280099").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityCode)
                .HasMaxLength(900)
                .HasColumnName("activity_code");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AgentJsonStr)
                .HasMaxLength(900)
                .HasColumnName("agent_json_str");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Hash)
                .HasColumnType("character varying")
                .HasColumnName("hash");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<ProfilingRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profiling_record");

            entity.ToTable("profiling_record", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProfilingRecord)
                .HasForeignKey<ProfilingRecord>(d => d.Id)
                .HasConstraintName("FK_objects_profiling_record");
        });

        modelBuilder.Entity<ProfilingRecords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__profiling_records");

            entity.ToTable("profiling_records", "dbo");

            entity.HasIndex(e => e.StartDate, "idx_profiling_records_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TemplateId, "idx_profiling_records_1645172268362935263").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentTemplateId, "idx_profiling_records_8949756777920591643").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentTemplateId, e.Id }, "idxh_profiling_records_7505668514187634539");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ParentTemplateId).HasColumnName("parent_template_id");
            entity.Property(e => e.ParentTemplateType)
                .HasColumnType("character varying")
                .HasColumnName("parent_template_type");
            entity.Property(e => e.Sid)
                .HasColumnType("character varying")
                .HasColumnName("sid");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.TemplateType)
                .HasColumnType("character varying")
                .HasColumnName("template_type");
            entity.Property(e => e.Ticks).HasColumnName("ticks");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project");

            entity.ToTable("project", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Project)
                .HasForeignKey<Project>(d => d.Id)
                .HasConstraintName("FK_objects_project");
        });

        modelBuilder.Entity<ProjectParticipant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_participant");

            entity.ToTable("project_participant", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProjectParticipant)
                .HasForeignKey<ProjectParticipant>(d => d.Id)
                .HasConstraintName("FK_objects_project_participant");
        });

        modelBuilder.Entity<ProjectParticipantRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_participant_role");

            entity.ToTable("project_participant_role", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProjectParticipantRole)
                .HasForeignKey<ProjectParticipantRole>(d => d.Id)
                .HasConstraintName("FK_objects_project_participant_role");
        });

        modelBuilder.Entity<ProjectParticipantRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_participant_roles");

            entity.ToTable("project_participant_roles", "dbo");

            entity.HasIndex(e => e.Code, "idx_project_participant_roles_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_project_participant_roles_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_project_participant_roles_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_project_participant_roles_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParticipantNum).HasColumnName("participant_num");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.ProviderId).HasColumnName("provider_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<ProjectParticipants>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_participants");

            entity.ToTable("project_participants", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_project_participants_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_project_participants_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_project_participants_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ProjectId, "idx_project_participants_14787074480832058041").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_project_participants_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_project_participants_15310678443979824546").HasMethod("gin");

            entity.HasIndex(e => e.ObjectId, "idx_project_participants_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_project_participants_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_project_participants_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Catalog, "idx_project_participants_7497764283949398425").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BossTypeId, "idx_project_participants_9251791295560244622").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .HasColumnName("catalog");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsExcluded).HasColumnName("is_excluded");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ParticipantRolesId).HasColumnName("participant_roles_id");
            entity.Property(e => e.PercentPlanLoad).HasColumnName("percent_plan_load");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PlanLoad).HasColumnName("plan_load");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<ProjectType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_type");

            entity.ToTable("project_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProjectType)
                .HasForeignKey<ProjectType>(d => d.Id)
                .HasConstraintName("FK_objects_project_type");
        });

        modelBuilder.Entity<ProjectTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__project_types");

            entity.ToTable("project_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Projects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__projects");

            entity.ToTable("projects", "dbo");

            entity.HasIndex(e => e.ProjectTypeId, "idx_projects_12101264451330545483").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionId, "idx_projects_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDateFact, "idx_projects_13575372776959358259").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_projects_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsModel, "idx_projects_1571082659538495400").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDatePlan, "idx_projects_15946063884241523668").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EndDatePlan, "idx_projects_16488066393838094534").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SaleContractId, "idx_projects_17218485957316326268").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_projects_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_projects_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_projects_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContractId, "idx_projects_4969670655624616611").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_projects_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_projects_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_projects_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Status, "idx_projects_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EndDateFact, "idx_projects_991144332393264190").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllParticipantViewTask).HasColumnName("all_participant_view_task");
            entity.Property(e => e.AllowAssessment).HasColumnName("allow_assessment");
            entity.Property(e => e.AllowAssigningTasksToAll).HasColumnName("allow_assigning_tasks_to_all");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.EndDateFact)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date_fact");
            entity.Property(e => e.EndDatePlan)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date_plan");
            entity.Property(e => e.FactLaborCosts).HasColumnName("fact_labor_costs");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.JoinMode)
                .HasColumnType("character varying")
                .HasColumnName("join_mode");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PercentComplete).HasColumnName("percent_complete");
            entity.Property(e => e.PlanLaborCosts).HasColumnName("plan_labor_costs");
            entity.Property(e => e.ProjectTypeId).HasColumnName("project_type_id");
            entity.Property(e => e.ResourceTypeId).HasColumnName("resource_type_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SaleContractId).HasColumnName("sale_contract_id");
            entity.Property(e => e.StartDateFact)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date_fact");
            entity.Property(e => e.StartDatePlan)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date_plan");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.TeamSelected).HasColumnName("team_selected");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<Provider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__provider");

            entity.ToTable("provider", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Provider)
                .HasForeignKey<Provider>(d => d.Id)
                .HasConstraintName("FK_objects_provider");
        });

        modelBuilder.Entity<ProviderCourseType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__provider_course_type");

            entity.ToTable("provider_course_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProviderCourseType)
                .HasForeignKey<ProviderCourseType>(d => d.Id)
                .HasConstraintName("FK_objects_provider_course_type");
        });

        modelBuilder.Entity<ProviderCourseTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__provider_course_types");

            entity.ToTable("provider_course_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_provider_course_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_provider_course_types_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_provider_course_types_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_provider_course_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LibraryUrl)
                .HasColumnType("character varying")
                .HasColumnName("library_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Providers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__providers");

            entity.ToTable("providers", "dbo");

            entity.HasIndex(e => e.DimensionId, "idx_providers_10640429270081125699").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_providers_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_providers_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.DimensionId).HasColumnName("dimension_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ProviderProduct).HasColumnName("provider_product");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<QaTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test");

            entity.ToTable("qa_test", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.QaTest)
                .HasForeignKey<QaTest>(d => d.Id)
                .HasConstraintName("FK_objects_qa_test");
        });

        modelBuilder.Entity<QaTestParamset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test_paramset");

            entity.ToTable("qa_test_paramset", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.QaTestParamset)
                .HasForeignKey<QaTestParamset>(d => d.Id)
                .HasConstraintName("FK_objects_qa_test_paramset");
        });

        modelBuilder.Entity<QaTestParamsets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test_paramsets");

            entity.ToTable("qa_test_paramsets", "dbo");

            entity.HasIndex(e => e.Code, "idx_qa_test_paramsets_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_qa_test_paramsets_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_qa_test_paramsets_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_qa_test_paramsets_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_qa_test_paramsets_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
        });

        modelBuilder.Entity<QaTestResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test_result");

            entity.ToTable("qa_test_result", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.QaTestResult)
                .HasForeignKey<QaTestResult>(d => d.Id)
                .HasConstraintName("FK_objects_qa_test_result");
        });

        modelBuilder.Entity<QaTestResults>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test_results");

            entity.ToTable("qa_test_results", "dbo");

            entity.HasIndex(e => e.TestSetId, "idx_qa_test_results_10632646915004342450").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FinishDate, "idx_qa_test_results_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Duration, "idx_qa_test_results_12397754596691519786").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ErrorCode, "idx_qa_test_results_131997525082358486").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_qa_test_results_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestId, "idx_qa_test_results_16892438805290398248").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TestParamsetId, "idx_qa_test_results_17208739358659042559").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkStatus, "idx_qa_test_results_2926290802268672965").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_qa_test_results_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FinishStatus, "idx_qa_test_results_6377499301905407748").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_qa_test_results_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.ErrorCode).HasColumnName("error_code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.FinishStatus)
                .HasMaxLength(900)
                .HasColumnName("finish_status");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.TestId).HasColumnName("test_id");
            entity.Property(e => e.TestParamsetId).HasColumnName("test_paramset_id");
            entity.Property(e => e.TestSetId).HasColumnName("test_set_id");
            entity.Property(e => e.WorkStatus)
                .HasMaxLength(900)
                .HasColumnName("work_status");
        });

        modelBuilder.Entity<QaTestSet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test_set");

            entity.ToTable("qa_test_set", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.QaTestSet)
                .HasForeignKey<QaTestSet>(d => d.Id)
                .HasConstraintName("FK_objects_qa_test_set");
        });

        modelBuilder.Entity<QaTestSets>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_test_sets");

            entity.ToTable("qa_test_sets", "dbo");

            entity.HasIndex(e => e.Code, "idx_qa_test_sets_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_qa_test_sets_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_qa_test_sets_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_qa_test_sets_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_qa_test_sets_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Status, "idx_qa_test_sets_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
        });

        modelBuilder.Entity<QaTests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qa_tests");

            entity.ToTable("qa_tests", "dbo");

            entity.HasIndex(e => e.Code, "idx_qa_tests_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Type, "idx_qa_tests_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_qa_tests_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_qa_tests_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_qa_tests_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_qa_tests_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_qa_tests_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Status, "idx_qa_tests_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectTypeName)
                .HasColumnType("character varying")
                .HasColumnName("object_type_name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Qualification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualification");

            entity.ToTable("qualification", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Qualification)
                .HasForeignKey<Qualification>(d => d.Id)
                .HasConstraintName("FK_objects_qualification");
        });

        modelBuilder.Entity<QualificationAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualification_assignment");

            entity.ToTable("qualification_assignment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.QualificationAssignment)
                .HasForeignKey<QualificationAssignment>(d => d.Id)
                .HasConstraintName("FK_objects_qualification_assignment");
        });

        modelBuilder.Entity<QualificationAssignments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualification_assignments");

            entity.ToTable("qualification_assignments", "dbo");

            entity.HasIndex(e => e.QualificationId, "idx_qualification_assignments_12571663324206385274").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SenderId, "idx_qualification_assignments_13027024355308708928").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ExpirationDate, "idx_qualification_assignments_1542574456443257709").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssignmentDate, "idx_qualification_assignments_2173296359761569796").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_qualification_assignments_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_qualification_assignments_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_qualification_assignments_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CompetenceId, "idx_qualification_assignments_9130850239285963895").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssignmentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("assignment_date");
            entity.Property(e => e.CompetenceId).HasColumnName("competence_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ExpirationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expiration_date");
            entity.Property(e => e.IsReward).HasColumnName("is_reward");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.Reason)
                .HasColumnType("character varying")
                .HasColumnName("reason");
            entity.Property(e => e.SenderId).HasColumnName("sender_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Qualifications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__qualifications");

            entity.ToTable("qualifications", "dbo");

            entity.HasIndex(e => e.Code, "idx_qualifications_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentId, "idx_qualifications_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_qualifications_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_qualifications_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_qualifications_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_qualifications_9583800389969341559");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsReward).HasColumnName("is_reward");
            entity.Property(e => e.JoinMode)
                .HasColumnType("character varying")
                .HasColumnName("join_mode");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.LevelId).HasColumnName("level_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.QualificationId).HasColumnName("qualification_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
            entity.Property(e => e.YourselfStart).HasColumnName("yourself_start");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__rating");

            entity.ToTable("rating", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Rating)
                .HasForeignKey<Rating>(d => d.Id)
                .HasConstraintName("FK_objects_rating");
        });

        modelBuilder.Entity<Ratings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ratings");

            entity.ToTable("ratings", "dbo");

            entity.HasIndex(e => e.ExpertPersonId, "idx_ratings_15179806528777423025").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ExpertPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_fullname");
            entity.Property(e => e.ExpertPersonId).HasColumnName("expert_person_id");
            entity.Property(e => e.ExpertPersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("expert_person_position_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<ReadinessLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__readiness_level");

            entity.ToTable("readiness_level", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ReadinessLevel)
                .HasForeignKey<ReadinessLevel>(d => d.Id)
                .HasConstraintName("FK_objects_readiness_level");
        });

        modelBuilder.Entity<ReadinessLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__readiness_levels");

            entity.ToTable("readiness_levels", "dbo");

            entity.HasIndex(e => e.Code, "idx_readiness_levels_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_readiness_levels_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_readiness_levels_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_readiness_levels_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Recommendation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommendation");

            entity.ToTable("recommendation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Recommendation)
                .HasForeignKey<Recommendation>(d => d.Id)
                .HasConstraintName("FK_objects_recommendation");
        });

        modelBuilder.Entity<Recommendations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommendations");

            entity.ToTable("recommendations", "dbo");

            entity.HasIndex(e => e.SrcPersonId, "idx_recommendations_12164230150303588").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Fullname, "idx_recommendations_7219832511525380348").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.VacancyId, "idx_recommendations_8786587324496118747").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_recommendations_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Email)
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.Fullname)
                .HasMaxLength(900)
                .HasColumnName("fullname");
            entity.Property(e => e.MobilePhone)
                .HasColumnType("character varying")
                .HasColumnName("mobile_phone");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Phone)
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.SrcPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("src_person_fullname");
            entity.Property(e => e.SrcPersonId).HasColumnName("src_person_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .HasColumnType("character varying")
                .HasColumnName("vacancy_name");
            entity.Property(e => e.WorkPhone)
                .HasColumnType("character varying")
                .HasColumnName("work_phone");
        });

        modelBuilder.Entity<RecommenderAlgorithm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommender_algorithm");

            entity.ToTable("recommender_algorithm", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecommenderAlgorithm)
                .HasForeignKey<RecommenderAlgorithm>(d => d.Id)
                .HasConstraintName("FK_objects_recommender_algorithm");
        });

        modelBuilder.Entity<RecommenderAlgorithmApplying>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommender_algorithm_applying");

            entity.ToTable("recommender_algorithm_applying", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecommenderAlgorithmApplying)
                .HasForeignKey<RecommenderAlgorithmApplying>(d => d.Id)
                .HasConstraintName("FK_objects_recommender_algorithm_applying");
        });

        modelBuilder.Entity<RecommenderAlgorithmApplyings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommender_algorithm_applyings");

            entity.ToTable("recommender_algorithm_applyings", "dbo");

            entity.HasIndex(e => e.ContextObjectId, "idx_recommender_algorithm_applyings_11745891025199366722").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_recommender_algorithm_applyings_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_recommender_algorithm_applyings_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContextObjectName, "idx_recommender_algorithm_applyings_18344146857978714765").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_recommender_algorithm_applyings_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ApplyingDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("applying_date");
            entity.Property(e => e.ContextObjectId).HasColumnName("context_object_id");
            entity.Property(e => e.ContextObjectName)
                .HasMaxLength(900)
                .HasColumnName("context_object_name");
            entity.Property(e => e.ContextObjectType)
                .HasColumnType("character varying")
                .HasColumnName("context_object_type");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.RecommenderAlgorithmId).HasColumnName("recommender_algorithm_id");
        });

        modelBuilder.Entity<RecommenderAlgorithms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommender_algorithms");

            entity.ToTable("recommender_algorithms", "dbo");

            entity.HasIndex(e => e.Code, "idx_recommender_algorithms_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_recommender_algorithms_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllDay).HasColumnName("all_day");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CacheTime).HasColumnName("cache_time");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CodeLibraryId).HasColumnName("code_library_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.FinishTime)
                .HasColumnType("character varying")
                .HasColumnName("finish_time");
            entity.Property(e => e.IsCurUser).HasColumnName("is_cur_user");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsObjectType).HasColumnName("is_object_type");
            entity.Property(e => e.LastRunDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_run_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartDay).HasColumnName("start_day");
            entity.Property(e => e.StartTime)
                .HasColumnType("character varying")
                .HasColumnName("start_time");
            entity.Property(e => e.StartWeekDay).HasColumnName("start_week_day");
            entity.Property(e => e.TriggerType)
                .HasColumnType("character varying")
                .HasColumnName("trigger_type");
            entity.Property(e => e.UseCache).HasColumnName("use_cache");
        });

        modelBuilder.Entity<RecommenderSelectCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommender_select_collaborator");

            entity.ToTable("recommender_select_collaborator", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecommenderSelectCollaborator)
                .HasForeignKey<RecommenderSelectCollaborator>(d => d.Id)
                .HasConstraintName("FK_objects_recommender_select_collaborator");
        });

        modelBuilder.Entity<RecommenderSelectCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recommender_select_collaborators");

            entity.ToTable("recommender_select_collaborators", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BaseObjectId).HasColumnName("base_object_id");
            entity.Property(e => e.BaseObjectName)
                .HasColumnType("character varying")
                .HasColumnName("base_object_name");
            entity.Property(e => e.BaseObjectType)
                .HasColumnType("character varying")
                .HasColumnName("base_object_type");
            entity.Property(e => e.CreatedObjectId).HasColumnName("created_object_id");
            entity.Property(e => e.CreatedObjectName)
                .HasColumnType("character varying")
                .HasColumnName("created_object_name");
            entity.Property(e => e.CreatedObjectType)
                .HasColumnType("character varying")
                .HasColumnName("created_object_type");
            entity.Property(e => e.Implemented).HasColumnName("implemented");
            entity.Property(e => e.ImplementedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("implemented_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.RecommenderAlgorithmId).HasColumnName("recommender_algorithm_id");
            entity.Property(e => e.SelectedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("selected_date");
            entity.Property(e => e.SelectedObjectId).HasColumnName("selected_object_id");
            entity.Property(e => e.SelectedObjectName)
                .HasColumnType("character varying")
                .HasColumnName("selected_object_name");
            entity.Property(e => e.SelectedObjectType)
                .HasColumnType("character varying")
                .HasColumnName("selected_object_type");
        });

        modelBuilder.Entity<RecruitmentEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_event");

            entity.ToTable("recruitment_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecruitmentEvent)
                .HasForeignKey<RecruitmentEvent>(d => d.Id)
                .HasConstraintName("FK_objects_recruitment_event");
        });

        modelBuilder.Entity<RecruitmentEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_events");

            entity.ToTable("recruitment_events", "dbo");

            entity.HasIndex(e => e.SiteId, "idx_recruitment_events_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RecruitmentSystemId, "idx_recruitment_events_4822263875530357923").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_recruitment_events_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EstaffEventTypeId, "idx_recruitment_events_873354839976691063").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.VacancyId, "idx_recruitment_events_8786587324496118747").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.EstaffEventTypeId).HasColumnName("estaff_event_type_id");
            entity.Property(e => e.EstaffEventTypeStatusId).HasColumnName("estaff_event_type_status_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RecruitmentSystemId).HasColumnName("recruitment_system_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
        });

        modelBuilder.Entity<RecruitmentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_method");

            entity.ToTable("recruitment_method", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecruitmentMethod)
                .HasForeignKey<RecruitmentMethod>(d => d.Id)
                .HasConstraintName("FK_objects_recruitment_method");
        });

        modelBuilder.Entity<RecruitmentMethods>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_methods");

            entity.ToTable("recruitment_methods", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<RecruitmentPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_plan");

            entity.ToTable("recruitment_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecruitmentPlan)
                .HasForeignKey<RecruitmentPlan>(d => d.Id)
                .HasConstraintName("FK_objects_recruitment_plan");
        });

        modelBuilder.Entity<RecruitmentPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_plans");

            entity.ToTable("recruitment_plans", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionFamilyId).HasColumnName("position_family_id");
            entity.Property(e => e.PositionName)
                .HasColumnType("character varying")
                .HasColumnName("position_name");
            entity.Property(e => e.PositionType)
                .HasColumnType("character varying")
                .HasColumnName("position_type");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.State)
                .HasColumnType("character varying")
                .HasColumnName("state");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyTypeId).HasColumnName("vacancy_type_id");
        });

        modelBuilder.Entity<RecruitmentSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_system");

            entity.ToTable("recruitment_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RecruitmentSystem)
                .HasForeignKey<RecruitmentSystem>(d => d.Id)
                .HasConstraintName("FK_objects_recruitment_system");
        });

        modelBuilder.Entity<RecruitmentSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__recruitment_systems");

            entity.ToTable("recruitment_systems", "dbo");

            entity.HasIndex(e => e.Code, "idx_recruitment_systems_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_recruitment_systems_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__region");

            entity.ToTable("region", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Region)
                .HasForeignKey<Region>(d => d.Id)
                .HasConstraintName("FK_objects_region");
        });

        modelBuilder.Entity<Regions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__regions");

            entity.ToTable("regions", "dbo");

            entity.HasIndex(e => e.Code, "idx_regions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_regions_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_regions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_regions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_regions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_regions_13571687020585439580");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
        });

        modelBuilder.Entity<RemoteAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_action");

            entity.ToTable("remote_action", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteAction)
                .HasForeignKey<RemoteAction>(d => d.Id)
                .HasConstraintName("FK_objects_remote_action");
        });

        modelBuilder.Entity<RemoteActions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_actions");

            entity.ToTable("remote_actions", "dbo");

            entity.HasIndex(e => e.CatalogName, "idx_remote_actions_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_remote_actions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_remote_actions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_remote_actions_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LinkName)
                .HasColumnType("character varying")
                .HasColumnName("link_name");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.ShowInForm).HasColumnName("show_in_form");
            entity.Property(e => e.ShowInList).HasColumnName("show_in_list");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
        });

        modelBuilder.Entity<RemoteApplication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_application");

            entity.ToTable("remote_application", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteApplication)
                .HasForeignKey<RemoteApplication>(d => d.Id)
                .HasConstraintName("FK_objects_remote_application");
        });

        modelBuilder.Entity<RemoteApplications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_applications");

            entity.ToTable("remote_applications", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppId)
                .HasColumnType("character varying")
                .HasColumnName("app_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<RemoteCollection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_collection");

            entity.ToTable("remote_collection", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteCollection)
                .HasForeignKey<RemoteCollection>(d => d.Id)
                .HasConstraintName("FK_objects_remote_collection");
        });

        modelBuilder.Entity<RemoteCollections>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_collections");

            entity.ToTable("remote_collections", "dbo");

            entity.HasIndex(e => e.ApiVer, "idx_remote_collections_10869761412617106817").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CatalogName, "idx_remote_collections_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_remote_collections_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ReadyToAnalytics, "idx_remote_collections_1471887525335762660").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_remote_collections_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_remote_collections_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ApiVer)
                .HasMaxLength(900)
                .HasColumnName("api_ver");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Category)
                .HasColumnType("character varying")
                .HasColumnName("category");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ReadyToAnalytics).HasColumnName("ready_to_analytics");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<RemoteSecurityProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_security_profile");

            entity.ToTable("remote_security_profile", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RemoteSecurityProfile)
                .HasForeignKey<RemoteSecurityProfile>(d => d.Id)
                .HasConstraintName("FK_objects_remote_security_profile");
        });

        modelBuilder.Entity<RemoteSecurityProfiles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__remote_security_profiles");

            entity.ToTable("remote_security_profiles", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<Repositorium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositorium");

            entity.ToTable("repositorium", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Repositorium)
                .HasForeignKey<Repositorium>(d => d.Id)
                .HasConstraintName("FK_objects_repositorium");
        });

        modelBuilder.Entity<RepositoriumAuthors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositorium_authors");

            entity.ToTable("repositorium_authors", "dbo");

            entity.HasIndex(e => e.RepositoriumId, "idx_repositorium_authors_3986471992787481250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_repositorium_authors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RepositoriumId).HasColumnName("repositorium_id");
            entity.Property(e => e.RepositoriumName)
                .HasColumnType("character varying")
                .HasColumnName("repositorium_name");
        });

        modelBuilder.Entity<RepositoriumResources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositorium_resources");

            entity.ToTable("repositorium_resources", "dbo");

            entity.HasIndex(e => e.RepositoriumId, "idx_repositorium_resources_3986471992787481250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ResourceId, "idx_repositorium_resources_9972421085840453961").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.RepositoriumId).HasColumnName("repositorium_id");
            entity.Property(e => e.RepositoriumName)
                .HasColumnType("character varying")
                .HasColumnName("repositorium_name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<Repositoriums>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__repositoriums");

            entity.ToTable("repositoriums", "dbo");

            entity.HasIndex(e => e.ParentObjectId, "idx_repositoriums_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_repositoriums_516959767640835462");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorsCount).HasColumnName("authors_count");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<Reprimand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimand");

            entity.ToTable("reprimand", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Reprimand)
                .HasForeignKey<Reprimand>(d => d.Id)
                .HasConstraintName("FK_objects_reprimand");
        });

        modelBuilder.Entity<ReprimandType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimand_type");

            entity.ToTable("reprimand_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ReprimandType)
                .HasForeignKey<ReprimandType>(d => d.Id)
                .HasConstraintName("FK_objects_reprimand_type");
        });

        modelBuilder.Entity<ReprimandTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimand_types");

            entity.ToTable("reprimand_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<Reprimands>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__reprimands");

            entity.ToTable("reprimands", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ReprimandTypeId).HasColumnName("reprimand_type_id");
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request");

            entity.ToTable("request", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Request)
                .HasForeignKey<Request>(d => d.Id)
                .HasConstraintName("FK_objects_request");
        });

        modelBuilder.Entity<RequestCollaborators>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request_collaborators");

            entity.ToTable("request_collaborators", "dbo");

            entity.HasIndex(e => e.Type, "idx_request_collaborators_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_request_collaborators_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_request_collaborators_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RequestId, "idx_request_collaborators_9242324761380620215").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.IsGroup).HasColumnName("is_group");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.RequestTypeId).HasColumnName("request_type_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<RequestType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request_type");

            entity.ToTable("request_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RequestType)
                .HasForeignKey<RequestType>(d => d.Id)
                .HasConstraintName("FK_objects_request_type");
        });

        modelBuilder.Entity<RequestTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__request_types");

            entity.ToTable("request_types", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_request_types_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_request_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ForbidRejection).HasColumnName("forbid_rejection");
            entity.Property(e => e.IsGroup).HasColumnName("is_group");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectQueryQual)
                .HasColumnType("character varying")
                .HasColumnName("object_query_qual");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.RemoteActionId).HasColumnName("remote_action_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<Requests>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__requests");

            entity.ToTable("requests", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_requests_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CloseDate, "idx_requests_12407610443708243086").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_requests_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_requests_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_requests_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_requests_15310678443979824546").HasMethod("gin");

            entity.HasIndex(e => e.Type, "idx_requests_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_requests_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TagId, "idx_requests_1837432429677149980").HasMethod("gin");

            entity.HasIndex(e => e.WorkflowMainPersonId, "idx_requests_2876725375229571153").HasMethod("gin");

            entity.HasIndex(e => e.ObjectId, "idx_requests_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_requests_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_requests_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_requests_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_requests_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RequestTypeId, "idx_requests_8915630903727800072").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CloseDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("close_date");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsGroup).HasColumnName("is_group");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonNum).HasColumnName("person_num");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.RequestTypeId).HasColumnName("request_type_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMainPersonId).HasColumnName("workflow_main_person_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resource");

            entity.ToTable("resource", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Resource)
                .HasForeignKey<Resource>(d => d.Id)
                .HasConstraintName("FK_objects_resource");
        });

        modelBuilder.Entity<ResourceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resource_type");

            entity.ToTable("resource_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ResourceType)
                .HasForeignKey<ResourceType>(d => d.Id)
                .HasConstraintName("FK_objects_resource_type");
        });

        modelBuilder.Entity<ResourceTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resource_types");

            entity.ToTable("resource_types", "dbo");

            entity.HasIndex(e => e.Code, "idx_resource_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_resource_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Resources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resources");

            entity.ToTable("resources", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_resources_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_resources_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_resources_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_resources_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_resources_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_resources_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.Status, "idx_resources_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AllowDownload).HasColumnName("allow_download");
            entity.Property(e => e.AllowSearch).HasColumnName("allow_search");
            entity.Property(e => e.AllowUnauthorizedDownload).HasColumnName("allow_unauthorized_download");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Checksum)
                .HasColumnType("character varying")
                .HasColumnName("checksum");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.FileName)
                .HasColumnType("character varying")
                .HasColumnName("file_name");
            entity.Property(e => e.FilePath)
                .HasColumnType("character varying")
                .HasColumnName("file_path");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ResourceTypeId).HasColumnName("resource_type_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UseCount).HasColumnName("use_count");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<Response>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response");

            entity.ToTable("response", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Response)
                .HasForeignKey<Response>(d => d.Id)
                .HasConstraintName("FK_objects_response");
        });

        modelBuilder.Entity<ResponseType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response_type");

            entity.ToTable("response_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ResponseType)
                .HasForeignKey<ResponseType>(d => d.Id)
                .HasConstraintName("FK_objects_response_type");
        });

        modelBuilder.Entity<ResponseTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response_types");

            entity.ToTable("response_types", "dbo");

            entity.HasIndex(e => e.ObjectType, "idx_response_types_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_response_types_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BasicDescField)
                .HasColumnType("character varying")
                .HasColumnName("basic_desc_field");
            entity.Property(e => e.BasicScoreField)
                .HasColumnType("character varying")
                .HasColumnName("basic_score_field");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Responses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__responses");

            entity.ToTable("responses", "dbo");

            entity.HasIndex(e => e.Code, "idx_responses_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_responses_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Type, "idx_responses_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_responses_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_responses_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_responses_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_responses_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_responses_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ResponseTypeId, "idx_responses_9378510421110200973").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BasicDesc)
                .HasColumnType("character varying")
                .HasColumnName("basic_desc");
            entity.Property(e => e.BasicScore).HasColumnName("basic_score");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DoneDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("done_date");
            entity.Property(e => e.IsPublic).HasColumnName("is_public");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.OwnerPersonId).HasColumnName("owner_person_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.ResponseTypeId).HasColumnName("response_type_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<RestrictingCollaboratorSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__restricting_collaborator_schedule");

            entity.ToTable("restricting_collaborator_schedule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RestrictingCollaboratorSchedule)
                .HasForeignKey<RestrictingCollaboratorSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_restricting_collaborator_schedule");
        });

        modelBuilder.Entity<RestrictingCollaboratorSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__restricting_collaborator_schedules");

            entity.ToTable("restricting_collaborator_schedules", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.RestrictionTypeId).HasColumnName("restriction_type_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<RestrictingType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__restricting_type");

            entity.ToTable("restricting_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RestrictingType)
                .HasForeignKey<RestrictingType>(d => d.Id)
                .HasConstraintName("FK_objects_restricting_type");
        });

        modelBuilder.Entity<RestrictingTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__restricting_types");

            entity.ToTable("restricting_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PeriodTypeId)
                .HasColumnType("character varying")
                .HasColumnName("period_type_id");
            entity.Property(e => e.StateId)
                .HasColumnType("character varying")
                .HasColumnName("state_id");
        });

        modelBuilder.Entity<Resume>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resume");

            entity.ToTable("resume", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Resume)
                .HasForeignKey<Resume>(d => d.Id)
                .HasConstraintName("FK_objects_resume");
        });

        modelBuilder.Entity<ResumeSkills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resume_skills");

            entity.ToTable("resume_skills", "dbo");

            entity.HasIndex(e => e.ResumeId, "idx_resume_skills_14627996086807549749").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CreatorPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("creator_person_fullname");
            entity.Property(e => e.CreatorPersonId).HasColumnName("creator_person_id");
            entity.Property(e => e.LevelId)
                .HasColumnType("character varying")
                .HasColumnName("level_id");
            entity.Property(e => e.LevelName)
                .HasColumnType("character varying")
                .HasColumnName("level_name");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPosition)
                .HasColumnType("character varying")
                .HasColumnName("person_position");
            entity.Property(e => e.ResumeId).HasColumnName("resume_id");
            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.SkillIdWithLevels).HasColumnName("skill_id_with_levels");
            entity.Property(e => e.SkillName)
                .HasColumnType("character varying")
                .HasColumnName("skill_name");
        });

        modelBuilder.Entity<Resumes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__resumes");

            entity.ToTable("resumes", "dbo");

            entity.HasIndex(e => e.ExpYears, "idx_resumes_10154979065487146670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ScheduleWorkId, "idx_resumes_10980125583456118789").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Email, "idx_resumes_13021460415823014527").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ProfessionAreaId, "idx_resumes_13051299433066399128").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_resumes_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EmploymentTypeId, "idx_resumes_14646064655541716531").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ScheduleId, "idx_resumes_15013740474053760855").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MaxWage, "idx_resumes_181548709704535693").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.VacancySourceId, "idx_resumes_2413099764287266219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_resumes_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RegionId, "idx_resumes_5247231687958631385").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CurrencyTypeId, "idx_resumes_6006144048989286690").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_resumes_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MinWage, "idx_resumes_6603712067064541674").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.FamilyStatus, "idx_resumes_759755436246066446").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MainEducTypeId, "idx_resumes_9615726599203749487").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BirthDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("birth_date");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreatorPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("creator_person_fullname");
            entity.Property(e => e.CreatorPersonId).HasColumnName("creator_person_id");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.EducTypeId)
                .HasColumnType("character varying[]")
                .HasColumnName("educ_type_id");
            entity.Property(e => e.Education)
                .HasColumnType("character varying")
                .HasColumnName("education");
            entity.Property(e => e.EducationTypeId).HasColumnName("education_type_id");
            entity.Property(e => e.Email)
                .HasMaxLength(900)
                .HasColumnName("email");
            entity.Property(e => e.EmploymentTypeId)
                .HasMaxLength(900)
                .HasColumnName("employment_type_id");
            entity.Property(e => e.ExpYears).HasColumnName("exp_years");
            entity.Property(e => e.FamilyStatus)
                .HasMaxLength(900)
                .HasColumnName("family_status");
            entity.Property(e => e.FillingType)
                .HasColumnType("character varying")
                .HasColumnName("filling_type");
            entity.Property(e => e.ForbidPortalDelete).HasColumnName("forbid_portal_delete");
            entity.Property(e => e.IsArchive).HasColumnName("is_archive");
            entity.Property(e => e.IsCandidate).HasColumnName("is_candidate");
            entity.Property(e => e.IsWillingRelocate).HasColumnName("is_willing_relocate");
            entity.Property(e => e.LngId)
                .HasColumnType("character varying[]")
                .HasColumnName("lng_id");
            entity.Property(e => e.MainEducTypeId)
                .HasMaxLength(900)
                .HasColumnName("main_educ_type_id");
            entity.Property(e => e.MaxWage).HasColumnName("max_wage");
            entity.Property(e => e.MinWage).HasColumnName("min_wage");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPosition)
                .HasColumnType("character varying")
                .HasColumnName("person_position");
            entity.Property(e => e.PersonSubdivision)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision");
            entity.Property(e => e.ProfessionArea)
                .HasColumnType("character varying")
                .HasColumnName("profession_area");
            entity.Property(e => e.ProfessionAreaId)
                .HasMaxLength(900)
                .HasColumnName("profession_area_id");
            entity.Property(e => e.ProfessionId).HasColumnName("profession_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ScheduleWorkId)
                .HasMaxLength(900)
                .HasColumnName("schedule_work_id");
            entity.Property(e => e.Sex)
                .HasColumnType("character varying")
                .HasColumnName("sex");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancySourceId).HasColumnName("vacancy_source_id");
            entity.Property(e => e.WillingnessTravelTypeId)
                .HasColumnType("character varying")
                .HasColumnName("willingness_travel_type_id");
        });

        modelBuilder.Entity<RiskLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_level");

            entity.ToTable("risk_level", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RiskLevel)
                .HasForeignKey<RiskLevel>(d => d.Id)
                .HasConstraintName("FK_objects_risk_level");
        });

        modelBuilder.Entity<RiskLevels>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_levels");

            entity.ToTable("risk_levels", "dbo");

            entity.HasIndex(e => e.Code, "idx_risk_levels_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_risk_levels_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_risk_levels_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_risk_levels_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<RiskPerspective>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_perspective");

            entity.ToTable("risk_perspective", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RiskPerspective)
                .HasForeignKey<RiskPerspective>(d => d.Id)
                .HasConstraintName("FK_objects_risk_perspective");
        });

        modelBuilder.Entity<RiskPerspectives>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__risk_perspectives");

            entity.ToTable("risk_perspectives", "dbo");

            entity.HasIndex(e => e.Code, "idx_risk_perspectives_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_risk_perspectives_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_risk_perspectives_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_risk_perspectives_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__role");

            entity.ToTable("role", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Role)
                .HasForeignKey<Role>(d => d.Id)
                .HasConstraintName("FK_objects_role");
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__roles");

            entity.ToTable("roles", "dbo");

            entity.HasIndex(e => e.CatalogName, "idx_roles_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_roles_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentRoleId, "idx_roles_3175108158718492957").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_roles_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentRoleId, e.Id }, "idxh_roles_9368652474292711377");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ParentRoleId).HasColumnName("parent_role_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<SalaryPaymentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_payment_type");

            entity.ToTable("salary_payment_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SalaryPaymentType)
                .HasForeignKey<SalaryPaymentType>(d => d.Id)
                .HasConstraintName("FK_objects_salary_payment_type");
        });

        modelBuilder.Entity<SalaryPaymentTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_payment_types");

            entity.ToTable("salary_payment_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<SalarySurvey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_survey");

            entity.ToTable("salary_survey", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SalarySurvey)
                .HasForeignKey<SalarySurvey>(d => d.Id)
                .HasConstraintName("FK_objects_salary_survey");
        });

        modelBuilder.Entity<SalarySurveySource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_survey_source");

            entity.ToTable("salary_survey_source", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SalarySurveySource)
                .HasForeignKey<SalarySurveySource>(d => d.Id)
                .HasConstraintName("FK_objects_salary_survey_source");
        });

        modelBuilder.Entity<SalarySurveySources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_survey_sources");

            entity.ToTable("salary_survey_sources", "dbo");

            entity.HasIndex(e => e.Code, "idx_salary_survey_sources_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_salary_survey_sources_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_salary_survey_sources_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SalarySurveys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__salary_surveys");

            entity.ToTable("salary_surveys", "dbo");

            entity.HasIndex(e => e.SalarySurveySourceId, "idx_salary_surveys_1043302674051990818").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionLevelId, "idx_salary_surveys_13471999773188638233").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionCommonId, "idx_salary_surveys_16314848977653227823").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_salary_surveys_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_salary_surveys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RegionId, "idx_salary_surveys_5247231687958631385").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_salary_surveys_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PositionName, "idx_salary_surveys_7850265971443817575").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AvgSalary).HasColumnName("avg_salary");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.MaxSalary).HasColumnName("max_salary");
            entity.Property(e => e.MinSalary).HasColumnName("min_salary");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.PositionLevelId).HasColumnName("position_level_id");
            entity.Property(e => e.PositionName)
                .HasMaxLength(900)
                .HasColumnName("position_name");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.SalarySurveySourceId).HasColumnName("salary_survey_source_id");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale");

            entity.ToTable("sale", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Sale)
                .HasForeignKey<Sale>(d => d.Id)
                .HasConstraintName("FK_objects_sale");
        });

        modelBuilder.Entity<SaleContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_contract");

            entity.ToTable("sale_contract", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SaleContract)
                .HasForeignKey<SaleContract>(d => d.Id)
                .HasConstraintName("FK_objects_sale_contract");
        });

        modelBuilder.Entity<SaleContractType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_contract_type");

            entity.ToTable("sale_contract_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SaleContractType)
                .HasForeignKey<SaleContractType>(d => d.Id)
                .HasConstraintName("FK_objects_sale_contract_type");
        });

        modelBuilder.Entity<SaleContractTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_contract_types");

            entity.ToTable("sale_contract_types", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_sale_contract_types_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<SaleContracts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_contracts");

            entity.ToTable("sale_contracts", "dbo");

            entity.HasIndex(e => e.CurrencyTypeId, "idx_sale_contracts_6006144048989286690").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_sale_contracts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AgentOrgId).HasColumnName("agent_org_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BadDebt).HasColumnName("bad_debt");
            entity.Property(e => e.ClientLegal)
                .HasColumnType("character varying")
                .HasColumnName("client_legal");
            entity.Property(e => e.ClientLegalName)
                .HasColumnType("character varying")
                .HasColumnName("client_legal_name");
            entity.Property(e => e.ClientManagerId).HasColumnName("client_manager_id");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConsignmentDocumentNumber)
                .HasColumnType("character varying")
                .HasColumnName("consignment_document_number");
            entity.Property(e => e.ContractCost).HasColumnName("contract_cost");
            entity.Property(e => e.ContractSignature)
                .HasColumnType("character varying")
                .HasColumnName("contract_signature");
            entity.Property(e => e.ContractType).HasColumnName("contract_type");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CurrencyTypeId)
                .HasMaxLength(900)
                .HasColumnName("currency_type_id");
            entity.Property(e => e.DateSignature)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_signature");
            entity.Property(e => e.DocsComment)
                .HasColumnType("character varying")
                .HasColumnName("docs_comment");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsAgentContract).HasColumnName("is_agent_contract");
            entity.Property(e => e.IsReceived).HasColumnName("is_received");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentSaleContractId).HasColumnName("parent_sale_contract_id");
            entity.Property(e => e.PrevContractId).HasColumnName("prev_contract_id");
            entity.Property(e => e.ProviderLegal)
                .HasColumnType("character varying")
                .HasColumnName("provider_legal");
            entity.Property(e => e.ProviderLegalName)
                .HasColumnType("character varying")
                .HasColumnName("provider_legal_name");
            entity.Property(e => e.ReceivedDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("received_date");
            entity.Property(e => e.Recipient)
                .HasColumnType("character varying")
                .HasColumnName("recipient");
            entity.Property(e => e.SentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_date");
            entity.Property(e => e.SerialNumber)
                .HasColumnType("character varying")
                .HasColumnName("serial_number");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SaleStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_status");

            entity.ToTable("sale_status", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SaleStatus)
                .HasForeignKey<SaleStatus>(d => d.Id)
                .HasConstraintName("FK_objects_sale_status");
        });

        modelBuilder.Entity<SaleStatuss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sale_statuss");

            entity.ToTable("sale_statuss", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_sale_statuss_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<Sales>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sales");

            entity.ToTable("sales", "dbo");

            entity.HasIndex(e => e.Code, "idx_sales_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_sales_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_sales_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ClientManagerId).HasColumnName("client_manager_id");
            entity.Property(e => e.ClientOrgId).HasColumnName("client_org_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StatusId).HasColumnName("status_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Scale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__scale");

            entity.ToTable("scale", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Scale)
                .HasForeignKey<Scale>(d => d.Id)
                .HasConstraintName("FK_objects_scale");
        });

        modelBuilder.Entity<Scales>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__scales");

            entity.ToTable("scales", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.MaxLimit).HasColumnName("max_limit");
            entity.Property(e => e.MinLimit).HasColumnName("min_limit");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<ScheduleDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_day");

            entity.ToTable("schedule_day", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ScheduleDay)
                .HasForeignKey<ScheduleDay>(d => d.Id)
                .HasConstraintName("FK_objects_schedule_day");
        });

        modelBuilder.Entity<ScheduleDays>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_days");

            entity.ToTable("schedule_days", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.FinishTime)
                .HasColumnType("character varying")
                .HasColumnName("finish_time");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.RestCollaboratorScheduleId).HasColumnName("rest_collaborator_schedule_id");
            entity.Property(e => e.ScheduleTypeId).HasColumnName("schedule_type_id");
            entity.Property(e => e.ScheduleTypeName)
                .HasColumnType("character varying")
                .HasColumnName("schedule_type_name");
            entity.Property(e => e.StartTime)
                .HasColumnType("character varying")
                .HasColumnName("start_time");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
        });

        modelBuilder.Entity<ScheduleType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_type");

            entity.ToTable("schedule_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ScheduleType)
                .HasForeignKey<ScheduleType>(d => d.Id)
                .HasConstraintName("FK_objects_schedule_type");
        });

        modelBuilder.Entity<ScheduleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__schedule_types");

            entity.ToTable("schedule_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsShedule).HasColumnName("is_shedule");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
        });

        modelBuilder.Entity<ScriptQueueElem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__script_queue_elem");

            entity.ToTable("script_queue_elem", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ScriptQueueElem)
                .HasForeignKey<ScriptQueueElem>(d => d.Id)
                .HasConstraintName("FK_objects_script_queue_elem");
        });

        modelBuilder.Entity<ScriptQueueElems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__script_queue_elems");

            entity.ToTable("script_queue_elems", "dbo");

            entity.HasIndex(e => e.Completed, "idx_script_queue_elems_1529037560406320595").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_script_queue_elems_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DeleteAutomatically, "idx_script_queue_elems_607972068274470445").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_script_queue_elems_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_script_queue_elems_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Block)
                .HasColumnType("character varying")
                .HasColumnName("block");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Completed).HasColumnName("completed");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Delay).HasColumnName("delay");
            entity.Property(e => e.DeleteAutomatically).HasColumnName("delete_automatically");
            entity.Property(e => e.FinishTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_time");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_time");
        });

        modelBuilder.Entity<SectionInstruction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__section_instruction");

            entity.ToTable("section_instruction", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SectionInstruction)
                .HasForeignKey<SectionInstruction>(d => d.Id)
                .HasConstraintName("FK_objects_section_instruction");
        });

        modelBuilder.Entity<SectionInstructions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__section_instructions");

            entity.ToTable("section_instructions", "dbo");

            entity.HasIndex(e => e.ParentObjectId, "idx_section_instructions_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_section_instructions_15158900443509137349");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
        });

        modelBuilder.Entity<SelectedResume>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_resume");

            entity.ToTable("selected_resume", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SelectedResume)
                .HasForeignKey<SelectedResume>(d => d.Id)
                .HasConstraintName("FK_objects_selected_resume");
        });

        modelBuilder.Entity<SelectedResumes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_resumes");

            entity.ToTable("selected_resumes", "dbo");

            entity.HasIndex(e => e.Code, "idx_selected_resumes_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_selected_resumes_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_selected_resumes_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_selected_resumes_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_selected_resumes_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResumeId).HasColumnName("resume_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SelectedVacancy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_vacancy");

            entity.ToTable("selected_vacancy", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SelectedVacancy)
                .HasForeignKey<SelectedVacancy>(d => d.Id)
                .HasConstraintName("FK_objects_selected_vacancy");
        });

        modelBuilder.Entity<SelectedVacancys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__selected_vacancys");

            entity.ToTable("selected_vacancys", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_selected_vacancys_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_selected_vacancys_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .HasColumnType("character varying")
                .HasColumnName("vacancy_name");
        });

        modelBuilder.Entity<ServerAgent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__server_agent");

            entity.ToTable("server_agent", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ServerAgent)
                .HasForeignKey<ServerAgent>(d => d.Id)
                .HasConstraintName("FK_objects_server_agent");
        });

        modelBuilder.Entity<ServerAgents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__server_agents");

            entity.ToTable("server_agents", "dbo");

            entity.HasIndex(e => e.Code, "idx_server_agents_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_server_agents_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_server_agents_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AllDay).HasColumnName("all_day");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Block)
                .HasColumnType("character varying")
                .HasColumnName("block");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.FinishTime)
                .HasColumnType("character varying")
                .HasColumnName("finish_time");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LastRunDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_run_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartDay).HasColumnName("start_day");
            entity.Property(e => e.StartTime)
                .HasColumnType("character varying")
                .HasColumnName("start_time");
            entity.Property(e => e.StartWeekDay).HasColumnName("start_week_day");
            entity.Property(e => e.TriggerType)
                .HasColumnType("character varying")
                .HasColumnName("trigger_type");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<Site>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__site");

            entity.ToTable("site", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Site)
                .HasForeignKey<Site>(d => d.Id)
                .HasConstraintName("FK_objects_site");
        });

        modelBuilder.Entity<SiteOwnerObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__site_owner_objects");

            entity.ToTable("site_owner_objects", "dbo");

            entity.HasIndex(e => e.SiteId, "idx_site_owner_objects_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_site_owner_objects_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CatalogName)
                .HasColumnType("character varying")
                .HasColumnName("catalog_name");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
        });

        modelBuilder.Entity<Sites>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sites");

            entity.ToTable("sites", "dbo");

            entity.HasIndex(e => e.ObjectId, "idx_sites_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_sites_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_sites_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LngId)
                .HasColumnType("character varying")
                .HasColumnName("lng_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.OwnerObject).HasColumnName("owner_object");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
        });

        modelBuilder.Entity<Skill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__skill");

            entity.ToTable("skill", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Skill)
                .HasForeignKey<Skill>(d => d.Id)
                .HasConstraintName("FK_objects_skill");
        });

        modelBuilder.Entity<SkillType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__skill_type");

            entity.ToTable("skill_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SkillType)
                .HasForeignKey<SkillType>(d => d.Id)
                .HasConstraintName("FK_objects_skill_type");
        });

        modelBuilder.Entity<SkillTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__skill_types");

            entity.ToTable("skill_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Skills>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__skills");

            entity.ToTable("skills", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_skills_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_skills_798293984171749630");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UseParentLevels).HasColumnName("use_parent_levels");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SocialEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__social_entrys");

            entity.ToTable("social_entrys", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_social_entrys_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_social_entrys_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_social_entrys_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_social_entrys_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_social_entrys_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_social_entrys_15773556111995590054");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.CatalogName)
                .HasColumnType("character varying")
                .HasColumnName("catalog_name");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.LikeId).HasColumnName("like_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<SpxmlBlobs>(entity =>
        {
            entity.HasKey(e => e.Url).HasName("(spxml_blobs)_PK");

            entity.ToTable("(spxml_blobs)", "dbo");

            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .HasColumnName("url");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data).HasColumnName("data");
            entity.Property(e => e.Ext)
                .HasMaxLength(8)
                .HasColumnName("ext");
            entity.Property(e => e.Ftime).HasColumnName("ftime");
            entity.Property(e => e.Hashdata)
                .HasMaxLength(160)
                .HasColumnName("hashdata");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");
        });

        modelBuilder.Entity<SpxmlForeignArrays>(entity =>
        {
            entity.HasKey(e => new { e.Catalog, e.CatalogElem, e.Name }).HasName("PK_(spxml_foreign_arrays)_1");

            entity.ToTable("(spxml_foreign_arrays)", "dbo");

            entity.Property(e => e.Catalog)
                .HasMaxLength(64)
                .HasColumnName("catalog");
            entity.Property(e => e.CatalogElem)
                .HasMaxLength(64)
                .HasColumnName("catalog_elem");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasColumnName("name");
            entity.Property(e => e.ForeignArray)
                .HasMaxLength(96)
                .HasColumnName("foreign_array");
        });

        modelBuilder.Entity<SpxmlMetadata>(entity =>
        {
            entity.HasKey(e => new { e.Schema, e.Form }).HasName("pk_spxml_metadata");

            entity.ToTable("(spxml_metadata)", "dbo");

            entity.Property(e => e.Schema)
                .HasMaxLength(64)
                .HasColumnName("schema");
            entity.Property(e => e.Form)
                .HasMaxLength(64)
                .HasColumnName("form");
            entity.Property(e => e.DocList).HasColumnName("doc_list");
            entity.Property(e => e.FtIdx).HasColumnName("ft_idx");
            entity.Property(e => e.Hash)
                .HasMaxLength(64)
                .HasColumnName("hash");
            entity.Property(e => e.ParentIdElem)
                .HasMaxLength(64)
                .HasColumnName("parent_id_elem");
            entity.Property(e => e.PrimaryKey)
                .HasMaxLength(64)
                .HasColumnName("primary_key");
            entity.Property(e => e.SingleTenant).HasColumnName("single_tenant");
            entity.Property(e => e.SpxmlForm)
                .HasMaxLength(512)
                .HasColumnName("spxml_form");
            entity.Property(e => e.SpxmlFormElem)
                .HasMaxLength(96)
                .HasColumnName("spxml_form_elem");
            entity.Property(e => e.SpxmlFormType).HasColumnName("spxml_form_type");
            entity.Property(e => e.Tablename)
                .HasMaxLength(64)
                .HasColumnName("tablename");
        });

        modelBuilder.Entity<SpxmlObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_spxml_objects");

            entity.ToTable("(spxml_objects)", "dbo");

            entity.HasIndex(e => e.IsDeleted, "ix_del_spxml_objects");

            entity.HasIndex(e => new { e.Form, e.Modified }, "ix_form_mod");

            entity.HasIndex(e => e.Form, "ix_modified");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Form)
                .HasMaxLength(64)
                .HasColumnName("form");
            entity.Property(e => e.IsDeleted).HasColumnName("is_deleted");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");
            entity.Property(e => e.SpxmlForm)
                .HasMaxLength(512)
                .HasColumnName("spxml_form");
        });

        modelBuilder.Entity<StaffPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position");

            entity.ToTable("staff_position", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StaffPosition)
                .HasForeignKey<StaffPosition>(d => d.Id)
                .HasConstraintName("FK_objects_staff_position");
        });

        modelBuilder.Entity<StaffPositionFinish>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position_finish");

            entity.ToTable("staff_position_finish", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StaffPositionFinish)
                .HasForeignKey<StaffPositionFinish>(d => d.Id)
                .HasConstraintName("FK_objects_staff_position_finish");
        });

        modelBuilder.Entity<StaffPositionFinishs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position_finishs");

            entity.ToTable("staff_position_finishs", "dbo");

            entity.HasIndex(e => e.Name, "idx_staff_position_finishs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_staff_position_finishs_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_staff_position_finishs_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionFinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("position_finish_date");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasColumnType("character varying")
                .HasColumnName("position_name");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("subdivision_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<StaffPositionMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position_move");

            entity.ToTable("staff_position_move", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StaffPositionMove)
                .HasForeignKey<StaffPositionMove>(d => d.Id)
                .HasConstraintName("FK_objects_staff_position_move");
        });

        modelBuilder.Entity<StaffPositionMoves>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position_moves");

            entity.ToTable("staff_position_moves", "dbo");

            entity.HasIndex(e => e.Name, "idx_staff_position_moves_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_staff_position_moves_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_staff_position_moves_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.MoveDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("move_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasColumnType("character varying")
                .HasColumnName("position_name");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("subdivision_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<StaffPositionStart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position_start");

            entity.ToTable("staff_position_start", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StaffPositionStart)
                .HasForeignKey<StaffPositionStart>(d => d.Id)
                .HasConstraintName("FK_objects_staff_position_start");
        });

        modelBuilder.Entity<StaffPositionStarts>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_position_starts");

            entity.ToTable("staff_position_starts", "dbo");

            entity.HasIndex(e => e.Name, "idx_staff_position_starts_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_staff_position_starts_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_staff_position_starts_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PositionDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("position_date");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.PositionName)
                .HasColumnType("character varying")
                .HasColumnName("position_name");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("subdivision_name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<StaffPositions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_positions");

            entity.ToTable("staff_positions", "dbo");

            entity.HasIndex(e => e.SubdivisionId, "idx_staff_positions_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_staff_positions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_staff_positions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_staff_positions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_staff_positions_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CompetenceProfileId).HasColumnName("competence_profile_id");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KnowledgeProfileId).HasColumnName("knowledge_profile_id");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgName)
                .HasColumnType("character varying")
                .HasColumnName("org_name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.ProfessionCategoryId).HasColumnName("profession_category_id");
            entity.Property(e => e.ProfessionId).HasColumnName("profession_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("subdivision_name");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<StaffSubs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__staff_subs");

            entity.ToTable("staff_subs", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_staff_subs_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Type, "idx_staff_subs_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BasicCollaboratorId, "idx_staff_subs_2582659475390779620").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_staff_subs_16395452365324970782");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BasicCollaboratorFullname)
                .HasColumnType("character varying")
                .HasColumnName("basic_collaborator_fullname");
            entity.Property(e => e.BasicCollaboratorId).HasColumnName("basic_collaborator_id");
            entity.Property(e => e.IsBoss).HasColumnName("is_boss");
            entity.Property(e => e.IsDisbanded).HasColumnName("is_disbanded");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Statement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement");

            entity.ToTable("statement", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Statement)
                .HasForeignKey<Statement>(d => d.Id)
                .HasConstraintName("FK_objects_statement");
        });

        modelBuilder.Entity<StatementActor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_actor");

            entity.ToTable("statement_actor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatementActor)
                .HasForeignKey<StatementActor>(d => d.Id)
                .HasConstraintName("FK_objects_statement_actor");
        });

        modelBuilder.Entity<StatementActors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_actors");

            entity.ToTable("statement_actors", "dbo");

            entity.HasIndex(e => e.StatementId, "idx_statement_actors_13557696635830626551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_statement_actors_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_statement_actors_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccountHomePage)
                .HasColumnType("character varying")
                .HasColumnName("account_home_page");
            entity.Property(e => e.AccountName)
                .HasColumnType("character varying")
                .HasColumnName("account_name");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Mbox)
                .HasColumnType("character varying")
                .HasColumnName("mbox");
            entity.Property(e => e.MboxSha1sum)
                .HasColumnType("character varying")
                .HasColumnName("mbox_sha1sum");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Openid)
                .HasColumnType("character varying")
                .HasColumnName("openid");
            entity.Property(e => e.Path)
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
        });

        modelBuilder.Entity<StatementAdditional>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_additional");

            entity.ToTable("statement_additional", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatementAdditional)
                .HasForeignKey<StatementAdditional>(d => d.Id)
                .HasConstraintName("FK_objects_statement_additional");
        });

        modelBuilder.Entity<StatementAdditionals>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_additionals");

            entity.ToTable("statement_additionals", "dbo");

            entity.HasIndex(e => e.StatementId, "idx_statement_additionals_13557696635830626551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_statement_additionals_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_statement_additionals_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Path)
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
            entity.Property(e => e.Value)
                .HasColumnType("character varying")
                .HasColumnName("value");
        });

        modelBuilder.Entity<StatementAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_attachment");

            entity.ToTable("statement_attachment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatementAttachment)
                .HasForeignKey<StatementAttachment>(d => d.Id)
                .HasConstraintName("FK_objects_statement_attachment");
        });

        modelBuilder.Entity<StatementAttachments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_attachments");

            entity.ToTable("statement_attachments", "dbo");

            entity.HasIndex(e => e.StatementId, "idx_statement_attachments_13557696635830626551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_statement_attachments_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_statement_attachments_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContentType)
                .HasColumnType("character varying")
                .HasColumnName("content_type");
            entity.Property(e => e.FileHash)
                .HasColumnType("character varying")
                .HasColumnName("file_hash");
            entity.Property(e => e.FileUrl)
                .HasColumnType("character varying")
                .HasColumnName("file_url");
            entity.Property(e => e.Length)
                .HasColumnType("character varying")
                .HasColumnName("length");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Path)
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
            entity.Property(e => e.UsageType)
                .HasColumnType("character varying")
                .HasColumnName("usage_type");
        });

        modelBuilder.Entity<StatementComponent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_component");

            entity.ToTable("statement_component", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatementComponent)
                .HasForeignKey<StatementComponent>(d => d.Id)
                .HasConstraintName("FK_objects_statement_component");
        });

        modelBuilder.Entity<StatementComponents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_components");

            entity.ToTable("statement_components", "dbo");

            entity.HasIndex(e => e.StatementId, "idx_statement_components_13557696635830626551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_statement_components_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_statement_components_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ComponentId)
                .HasColumnType("character varying")
                .HasColumnName("component_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Path)
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.PropertyName)
                .HasColumnType("character varying")
                .HasColumnName("property_name");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
        });

        modelBuilder.Entity<StatementObject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_object");

            entity.ToTable("statement_object", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatementObject)
                .HasForeignKey<StatementObject>(d => d.Id)
                .HasConstraintName("FK_objects_statement_object");
        });

        modelBuilder.Entity<StatementObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_objects");

            entity.ToTable("statement_objects", "dbo");

            entity.HasIndex(e => e.StatementId, "idx_statement_objects_13557696635830626551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_statement_objects_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_statement_objects_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContextActivityType)
                .HasColumnType("character varying")
                .HasColumnName("context_activity_type");
            entity.Property(e => e.DefinitionInteractionType)
                .HasColumnType("character varying")
                .HasColumnName("definition_interaction_type");
            entity.Property(e => e.DefinitionMoreInfo)
                .HasColumnType("character varying")
                .HasColumnName("definition_more_info");
            entity.Property(e => e.DefinitionType)
                .HasColumnType("character varying")
                .HasColumnName("definition_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId)
                .HasColumnType("character varying")
                .HasColumnName("object_id");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Path)
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
        });

        modelBuilder.Entity<StatementPattern>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_pattern");

            entity.ToTable("statement_pattern", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatementPattern)
                .HasForeignKey<StatementPattern>(d => d.Id)
                .HasConstraintName("FK_objects_statement_pattern");
        });

        modelBuilder.Entity<StatementPatterns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statement_patterns");

            entity.ToTable("statement_patterns", "dbo");

            entity.HasIndex(e => e.StatementId, "idx_statement_patterns_13557696635830626551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_statement_patterns_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_statement_patterns_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Path)
                .HasColumnType("character varying")
                .HasColumnName("path");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
            entity.Property(e => e.Value)
                .HasColumnType("character varying")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Statements>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statements");

            entity.ToTable("statements", "dbo");

            entity.HasIndex(e => e.VerbId, "idx_statements_10157943988803770171").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActivityCode, "idx_statements_10792972903593008671").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActivityId, "idx_statements_1272820070198399442").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_statements_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StatementRefId, "idx_statements_14222843630091618710").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_statements_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Timestamp, "idx_statements_3624804094994142537").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_statements_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_statements_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ContextRegistration, "idx_statements_7545547003022722700").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AgentJsonStr, "idx_statements_760678047644280099").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActivityCode)
                .HasMaxLength(900)
                .HasColumnName("activity_code");
            entity.Property(e => e.ActivityId).HasColumnName("activity_id");
            entity.Property(e => e.AgentJsonStr)
                .HasMaxLength(900)
                .HasColumnName("agent_json_str");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ContextInstructor)
                .HasColumnType("character varying")
                .HasColumnName("context_instructor");
            entity.Property(e => e.ContextLanguage)
                .HasColumnType("character varying")
                .HasColumnName("context_language");
            entity.Property(e => e.ContextPlatform)
                .HasColumnType("character varying")
                .HasColumnName("context_platform");
            entity.Property(e => e.ContextRegistration)
                .HasMaxLength(900)
                .HasColumnName("context_registration");
            entity.Property(e => e.ContextRevision)
                .HasColumnType("character varying")
                .HasColumnName("context_revision");
            entity.Property(e => e.ContextStatement)
                .HasColumnType("character varying")
                .HasColumnName("context_statement");
            entity.Property(e => e.ContextTeam)
                .HasColumnType("character varying")
                .HasColumnName("context_team");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateTicks).HasColumnName("create_ticks");
            entity.Property(e => e.LearningStorageId).HasColumnName("learning_storage_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.Processed).HasColumnName("processed");
            entity.Property(e => e.Registration)
                .HasColumnType("character varying")
                .HasColumnName("registration");
            entity.Property(e => e.ResultCompletion).HasColumnName("result_completion");
            entity.Property(e => e.ResultDuration)
                .HasColumnType("character varying")
                .HasColumnName("result_duration");
            entity.Property(e => e.ResultResponse)
                .HasColumnType("character varying")
                .HasColumnName("result_response");
            entity.Property(e => e.ResultScoreMax).HasColumnName("result_score_max");
            entity.Property(e => e.ResultScoreMin).HasColumnName("result_score_min");
            entity.Property(e => e.ResultScoreRaw).HasColumnName("result_score_raw");
            entity.Property(e => e.ResultScoreScaled).HasColumnName("result_score_scaled");
            entity.Property(e => e.ResultSuccess).HasColumnName("result_success");
            entity.Property(e => e.StatementRefId)
                .HasMaxLength(900)
                .HasColumnName("statement_ref_id");
            entity.Property(e => e.Timestamp)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("timestamp");
            entity.Property(e => e.VerbId)
                .HasMaxLength(900)
                .HasColumnName("verb_id");
            entity.Property(e => e.VerbName)
                .HasColumnType("character varying")
                .HasColumnName("verb_name");
            entity.Property(e => e.Voided).HasColumnName("voided");
        });

        modelBuilder.Entity<StatisticData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_data");

            entity.ToTable("statistic_data", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatisticData)
                .HasForeignKey<StatisticData>(d => d.Id)
                .HasConstraintName("FK_objects_statistic_data");
        });

        modelBuilder.Entity<StatisticDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_datas");

            entity.ToTable("statistic_datas", "dbo");

            entity.HasIndex(e => e.StatisticRecId, "idx_statistic_datas_13518625577089365922").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_statistic_datas_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_statistic_datas_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PeriodType, "idx_statistic_datas_6482507355918386316").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdditinalInfo)
                .HasColumnType("character varying")
                .HasColumnName("additinal_info");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PeriodDay).HasColumnName("period_day");
            entity.Property(e => e.PeriodHour).HasColumnName("period_hour");
            entity.Property(e => e.PeriodMinute).HasColumnName("period_minute");
            entity.Property(e => e.PeriodMonth).HasColumnName("period_month");
            entity.Property(e => e.PeriodQuarter).HasColumnName("period_quarter");
            entity.Property(e => e.PeriodType)
                .HasMaxLength(900)
                .HasColumnName("period_type");
            entity.Property(e => e.PeriodYear).HasColumnName("period_year");
            entity.Property(e => e.StatisticDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("statistic_date");
            entity.Property(e => e.StatisticRecId).HasColumnName("statistic_rec_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.ValueDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("value_date");
            entity.Property(e => e.ValueStr)
                .HasColumnType("character varying")
                .HasColumnName("value_str");
        });

        modelBuilder.Entity<StatisticRec>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_rec");

            entity.ToTable("statistic_rec", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.StatisticRec)
                .HasForeignKey<StatisticRec>(d => d.Id)
                .HasConstraintName("FK_objects_statistic_rec");
        });

        modelBuilder.Entity<StatisticRecs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statistic_recs");

            entity.ToTable("statistic_recs", "dbo");

            entity.HasIndex(e => e.LastCalculateDate, "idx_statistic_recs_11938291058981596685").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_statistic_recs_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ReadyToAnalytics, "idx_statistic_recs_1471887525335762660").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AutoCalc, "idx_statistic_recs_14817500974966095662").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_statistic_recs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PeriodType, "idx_statistic_recs_6482507355918386316").HasMethod("gin");

            entity.HasIndex(e => e.RoleId, "idx_statistic_recs_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.IsEnabled, "idx_statistic_recs_7390842820262011573").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessBlockType)
                .HasColumnType("character varying")
                .HasColumnName("access_block_type");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AutoCalc).HasColumnName("auto_calc");
            entity.Property(e => e.CalcPeriod).HasColumnName("calc_period");
            entity.Property(e => e.Catalog)
                .HasColumnType("character varying[]")
                .HasColumnName("catalog");
            entity.Property(e => e.CatalogName)
                .HasColumnType("character varying")
                .HasColumnName("catalog_name");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ContextCalc).HasColumnName("context_calc");
            entity.Property(e => e.Depth).HasColumnName("depth");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LastCalculateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_calculate_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.NormFrom).HasColumnName("norm_from");
            entity.Property(e => e.NormTo).HasColumnName("norm_to");
            entity.Property(e => e.NotificationTypeId).HasColumnName("notification_type_id");
            entity.Property(e => e.PeriodCalcType)
                .HasColumnType("character varying")
                .HasColumnName("period_calc_type");
            entity.Property(e => e.PeriodType)
                .HasColumnType("character varying[]")
                .HasColumnName("period_type");
            entity.Property(e => e.ReadyToAnalytics).HasColumnName("ready_to_analytics");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<Subdivision>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision");

            entity.ToTable("subdivision", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Subdivision)
                .HasForeignKey<Subdivision>(d => d.Id)
                .HasConstraintName("FK_objects_subdivision");
        });

        modelBuilder.Entity<SubdivisionGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision_group");

            entity.ToTable("subdivision_group", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SubdivisionGroup)
                .HasForeignKey<SubdivisionGroup>(d => d.Id)
                .HasConstraintName("FK_objects_subdivision_group");
        });

        modelBuilder.Entity<SubdivisionGroupSubdivisions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision_group_subdivisions");

            entity.ToTable("subdivision_group_subdivisions", "dbo");

            entity.HasIndex(e => e.SubdivisionId, "idx_subdivision_group_subdivisions_13395769009383188844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubdivisionGroupId, "idx_subdivision_group_subdivisions_15283384802194214391").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.SubdivisionGroupId).HasColumnName("subdivision_group_id");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.SubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("subdivision_name");
        });

        modelBuilder.Entity<SubdivisionGroups>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivision_groups");

            entity.ToTable("subdivision_groups", "dbo");

            entity.HasIndex(e => e.ModificationDate, "idx_subdivision_groups_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsDynamic).HasColumnName("is_dynamic");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Subdivisions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subdivisions");

            entity.ToTable("subdivisions", "dbo");

            entity.HasIndex(e => e.Code, "idx_subdivisions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CostCenterId, "idx_subdivisions_15646206976949266431").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ParentObjectId, "idx_subdivisions_17905456794067492044").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_subdivisions_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_subdivisions_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_subdivisions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_subdivisions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.IsDisbanded, "idx_subdivisions_6941592504511931019").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentObjectId, e.Id }, "idxh_subdivisions_1309641353831489064");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BonusProfileId).HasColumnName("bonus_profile_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CostCenterId).HasColumnName("cost_center_id");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.IsDisbanded).HasColumnName("is_disbanded");
            entity.Property(e => e.IsFaculty).HasColumnName("is_faculty");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.KpiProfileId).HasColumnName("kpi_profile_id");
            entity.Property(e => e.KpiProfilesId).HasColumnName("kpi_profiles_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
        });

        modelBuilder.Entity<Submission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission");

            entity.ToTable("submission", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Submission)
                .HasForeignKey<Submission>(d => d.Id)
                .HasConstraintName("FK_objects_submission");
        });

        modelBuilder.Entity<SubmissionRecipients>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission_recipients");

            entity.ToTable("submission_recipients", "dbo");

            entity.HasIndex(e => e.CollaboratorId, "idx_submission_recipients_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_submission_recipients_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubmissionTypeId, "idx_submission_recipients_8960283443383607714").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.SubmissionTypeId).HasColumnName("submission_type_id");
            entity.Property(e => e.SubmissionTypeName)
                .HasColumnType("character varying")
                .HasColumnName("submission_type_name");
        });

        modelBuilder.Entity<SubmissionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission_type");

            entity.ToTable("submission_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SubmissionType)
                .HasForeignKey<SubmissionType>(d => d.Id)
                .HasConstraintName("FK_objects_submission_type");
        });

        modelBuilder.Entity<SubmissionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submission_types");

            entity.ToTable("submission_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PeriodityId)
                .HasColumnType("character varying")
                .HasColumnName("periodity_id");
        });

        modelBuilder.Entity<Submissions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__submissions");

            entity.ToTable("submissions", "dbo");

            entity.HasIndex(e => e.PersonId, "idx_submissions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubmissionTypeId, "idx_submissions_8960283443383607714").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PeriodDateFinish)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_date_finish");
            entity.Property(e => e.PeriodDateStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("period_date_start");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PhaseId).HasColumnName("phase_id");
            entity.Property(e => e.PhaseName)
                .HasColumnType("character varying")
                .HasColumnName("phase_name");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.SubmissionTypeId).HasColumnName("submission_type_id");
            entity.Property(e => e.SubmissionTypeName)
                .HasColumnType("character varying")
                .HasColumnName("submission_type_name");
        });

        modelBuilder.Entity<Subs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subs");

            entity.ToTable("subs", "dbo");

            entity.HasIndex(e => e.ParentId, "idx_subs_14610032252585043976").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Type, "idx_subs_15634068439363443844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BasicCollaboratorId, "idx_subs_2582659475390779620").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => new { e.ParentId, e.Id }, "idxh_subs_7997311968381458343");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BasicCollaboratorFullname)
                .HasColumnType("character varying")
                .HasColumnName("basic_collaborator_fullname");
            entity.Property(e => e.BasicCollaboratorId).HasColumnName("basic_collaborator_id");
            entity.Property(e => e.IsBoss).HasColumnName("is_boss");
            entity.Property(e => e.IsDisbanded).HasColumnName("is_disbanded");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Type)
                .HasMaxLength(900)
                .HasColumnName("type");
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subscription");

            entity.ToTable("subscription", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Subscription)
                .HasForeignKey<Subscription>(d => d.Id)
                .HasConstraintName("FK_objects_subscription");
        });

        modelBuilder.Entity<Subscriptions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__subscriptions");

            entity.ToTable("subscriptions", "dbo");

            entity.HasIndex(e => e.CreateDate, "idx_subscriptions_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DocumentId, "idx_subscriptions_5164967155976800037").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_subscriptions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_subscriptions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_subscriptions_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DateLastAction)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_action");
            entity.Property(e => e.DateTo)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.DocumentId).HasColumnName("document_id");
            entity.Property(e => e.IncludeSubdocs).HasColumnName("include_subdocs");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Substitution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitution");

            entity.ToTable("substitution", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Substitution)
                .HasForeignKey<Substitution>(d => d.Id)
                .HasConstraintName("FK_objects_substitution");
        });

        modelBuilder.Entity<SubstitutionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitution_type");

            entity.ToTable("substitution_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SubstitutionType)
                .HasForeignKey<SubstitutionType>(d => d.Id)
                .HasConstraintName("FK_objects_substitution_type");
        });

        modelBuilder.Entity<SubstitutionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitution_types");

            entity.ToTable("substitution_types", "dbo");

            entity.HasIndex(e => e.IsActive, "idx_substitution_types_1069884002403450454").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectType, "idx_substitution_types_13284559755283697764").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_substitution_types_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OperationId, "idx_substitution_types_2664738675440095622").HasMethod("gin");

            entity.HasIndex(e => e.RoleId, "idx_substitution_types_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => e.RemoteActionId, "idx_substitution_types_9268340797480345272").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DataStr)
                .HasColumnType("character varying")
                .HasColumnName("data_str");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectType)
                .HasMaxLength(900)
                .HasColumnName("object_type");
            entity.Property(e => e.OperationCodes)
                .HasColumnType("character varying")
                .HasColumnName("operation_codes");
            entity.Property(e => e.OperationId).HasColumnName("operation_id");
            entity.Property(e => e.RemoteActionCodes)
                .HasColumnType("character varying")
                .HasColumnName("remote_action_codes");
            entity.Property(e => e.RemoteActionId).HasColumnName("remote_action_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<Substitutions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__substitutions");

            entity.ToTable("substitutions", "dbo");

            entity.HasIndex(e => e.TargetObjectType, "idx_substitutions_11122416743725478595").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TargetObjectId, "idx_substitutions_13502533900172059528").HasMethod("gin");

            entity.HasIndex(e => e.Code, "idx_substitutions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_substitutions_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_substitutions_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_substitutions_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_substitutions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_substitutions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_substitutions_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.DataStr)
                .HasColumnType("character varying")
                .HasColumnName("data_str");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonSelector)
                .HasColumnType("character varying")
                .HasColumnName("person_selector");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.SubstitutionTypeId).HasColumnName("substitution_type_id");
            entity.Property(e => e.TargetObjectId).HasColumnName("target_object_id");
            entity.Property(e => e.TargetObjectSelector)
                .HasColumnType("character varying")
                .HasColumnName("target_object_selector");
            entity.Property(e => e.TargetObjectType)
                .HasMaxLength(900)
                .HasColumnName("target_object_type");
        });

        modelBuilder.Entity<Successor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__successor");

            entity.ToTable("successor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Successor)
                .HasForeignKey<Successor>(d => d.Id)
                .HasConstraintName("FK_objects_successor");
        });

        modelBuilder.Entity<Successors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__successors");

            entity.ToTable("successors", "dbo");

            entity.HasIndex(e => e.KeyPersonId, "idx_successors_11613754197752960493").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DevelopmentPotentialId, "idx_successors_12691587570697570624").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_successors_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.KeyPositionId, "idx_successors_14024226780264996647").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_successors_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_successors_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_successors_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ReadinessLevelId, "idx_successors_5043042465217303844").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_successors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_successors_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_successors_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EfficiencyEstimationId, "idx_successors_7449878280595439136").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.KeyPersonFullname, "idx_successors_8823096957982627014").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_successors_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RequestId, "idx_successors_9242324761380620215").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DevelopmentPotentialId).HasColumnName("development_potential_id");
            entity.Property(e => e.EfficiencyEstimationId).HasColumnName("efficiency_estimation_id");
            entity.Property(e => e.KeyPersonFullname)
                .HasMaxLength(900)
                .HasColumnName("key_person_fullname");
            entity.Property(e => e.KeyPersonId).HasColumnName("key_person_id");
            entity.Property(e => e.KeyPositionId).HasColumnName("key_position_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.ReadinessLevelId).HasColumnName("readiness_level_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SupplementaryQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__supplementary_question");

            entity.ToTable("supplementary_question", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SupplementaryQuestion)
                .HasForeignKey<SupplementaryQuestion>(d => d.Id)
                .HasConstraintName("FK_objects_supplementary_question");
        });

        modelBuilder.Entity<SupplementaryQuestions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__supplementary_questions");

            entity.ToTable("supplementary_questions", "dbo");

            entity.HasIndex(e => e.AppInstanceId, "idx_supplementary_questions_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Section)
                .HasColumnType("character varying")
                .HasColumnName("section");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<SystemEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__system_event");

            entity.ToTable("system_event", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SystemEvent)
                .HasForeignKey<SystemEvent>(d => d.Id)
                .HasConstraintName("FK_objects_system_event");
        });

        modelBuilder.Entity<SystemEventHandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__system_event_handler");

            entity.ToTable("system_event_handler", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SystemEventHandler)
                .HasForeignKey<SystemEventHandler>(d => d.Id)
                .HasConstraintName("FK_objects_system_event_handler");
        });

        modelBuilder.Entity<SystemEventHandlers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__system_event_handlers");

            entity.ToTable("system_event_handlers", "dbo");

            entity.HasIndex(e => e.Code, "idx_system_event_handlers_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SystemEventId, "idx_system_event_handlers_1823388818043314951").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_system_event_handlers_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_system_event_handlers_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_system_event_handlers_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CodeType)
                .HasColumnType("character varying")
                .HasColumnName("code_type");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.SystemEventId).HasColumnName("system_event_id");
        });

        modelBuilder.Entity<SystemEvents>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__system_events");

            entity.ToTable("system_events", "dbo");

            entity.HasIndex(e => e.Code, "idx_system_events_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_system_events_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tag");

            entity.ToTable("tag", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Tag)
                .HasForeignKey<Tag>(d => d.Id)
                .HasConstraintName("FK_objects_tag");
        });

        modelBuilder.Entity<TaggedObjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tagged_objects");

            entity.ToTable("tagged_objects", "dbo");

            entity.HasIndex(e => e.TagId, "idx_tagged_objects_1837432429677149980").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_tagged_objects_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Catalog, "idx_tagged_objects_7497764283949398425").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .HasColumnName("catalog");
            entity.Property(e => e.DocCreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("doc_create_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.TagId).HasColumnName("tag_id");
            entity.Property(e => e.TagName)
                .HasColumnType("character varying")
                .HasColumnName("tag_name");
        });

        modelBuilder.Entity<Tags>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tags");

            entity.ToTable("tags", "dbo");

            entity.HasIndex(e => e.Name, "idx_tags_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_tags_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgePartId).HasColumnName("knowledge_part_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.RequireAcknowledgement).HasColumnName("require_acknowledgement");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
        });

        modelBuilder.Entity<TalentPoolFuncManagers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__talent_pool_func_managers");

            entity.ToTable("talent_pool_func_managers", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_talent_pool_func_managers_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_talent_pool_func_managers_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_talent_pool_func_managers_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_talent_pool_func_managers_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Catalog, "idx_talent_pool_func_managers_7497764283949398425").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BossTypeId, "idx_talent_pool_func_managers_9251791295560244622").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BossTypeId).HasColumnName("boss_type_id");
            entity.Property(e => e.Catalog)
                .HasMaxLength(900)
                .HasColumnName("catalog");
            entity.Property(e => e.IsNative).HasColumnName("is_native");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
        });

        modelBuilder.Entity<TalentPoolNomination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__talent_pool_nomination");

            entity.ToTable("talent_pool_nomination", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TalentPoolNomination)
                .HasForeignKey<TalentPoolNomination>(d => d.Id)
                .HasConstraintName("FK_objects_talent_pool_nomination");
        });

        modelBuilder.Entity<TalentPoolNominations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__talent_pool_nominations");

            entity.ToTable("talent_pool_nominations", "dbo");

            entity.HasIndex(e => e.Code, "idx_talent_pool_nominations_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_talent_pool_nominations_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_talent_pool_nominations_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_talent_pool_nominations_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__task");

            entity.ToTable("task", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Task)
                .HasForeignKey<Task>(d => d.Id)
                .HasConstraintName("FK_objects_task");
        });

        modelBuilder.Entity<TaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__task_type");

            entity.ToTable("task_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TaskType)
                .HasForeignKey<TaskType>(d => d.Id)
                .HasConstraintName("FK_objects_task_type");
        });

        modelBuilder.Entity<TaskTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__task_types");

            entity.ToTable("task_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CanChangeStatus).HasColumnName("can_change_status");
            entity.Property(e => e.CanChangeTask).HasColumnName("can_change_task");
            entity.Property(e => e.CanDeleteTask).HasColumnName("can_delete_task");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConsiderTimeInWorkspace).HasColumnName("consider_time_in_workspace");
            entity.Property(e => e.CreateTaskTypeId)
                .HasColumnType("character varying")
                .HasColumnName("create_task_type_id");
            entity.Property(e => e.EditTaskTypeId)
                .HasColumnType("character varying")
                .HasColumnName("edit_task_type_id");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RelatedConversationTypeId).HasColumnName("related_conversation_type_id");
            entity.Property(e => e.RelatedObjectType)
                .HasColumnType("character varying")
                .HasColumnName("related_object_type");
            entity.Property(e => e.RelatedToProjects).HasColumnName("related_to_projects");
            entity.Property(e => e.ShowInWorkspace).HasColumnName("show_in_workspace");
            entity.Property(e => e.UseCustomWvars).HasColumnName("use_custom_wvars");
            entity.Property(e => e.ViewTaskTypeId)
                .HasColumnType("character varying")
                .HasColumnName("view_task_type_id");
            entity.Property(e => e.Virtual).HasColumnName("virtual");
            entity.Property(e => e.VirtualRemoteActionId).HasColumnName("virtual_remote_action_id");
            entity.Property(e => e.VirtualRemoteCollectionId).HasColumnName("virtual_remote_collection_id");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
        });

        modelBuilder.Entity<Tasks>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tasks");

            entity.ToTable("tasks", "dbo");

            entity.HasIndex(e => e.WorkflowStateName, "idx_tasks_10453039908541897369").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowState, "idx_tasks_13282578484034717219").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WorkflowPersonId, "idx_tasks_15310678443979824546").HasMethod("gin");

            entity.HasIndex(e => e.ParentTaskId, "idx_tasks_15976467665700788149").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PreparationId, "idx_tasks_1998345724190753164").HasMethod("gin");

            entity.HasIndex(e => e.RoleId, "idx_tasks_7229801639646773814").HasMethod("gin");

            entity.HasIndex(e => new { e.ParentTaskId, e.Id }, "idxh_tasks_14256011018292834790");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssignerId).HasColumnName("assigner_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.CustomStateId)
                .HasColumnType("character varying")
                .HasColumnName("custom_state_id");
            entity.Property(e => e.DateFact)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_fact");
            entity.Property(e => e.DatePlan)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_plan");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.EndDatePlan)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date_plan");
            entity.Property(e => e.ExecutorId).HasColumnName("executor_id");
            entity.Property(e => e.ExecutorType)
                .HasColumnType("character varying")
                .HasColumnName("executor_type");
            entity.Property(e => e.ExpertId).HasColumnName("expert_id");
            entity.Property(e => e.Fact)
                .HasColumnType("character varying")
                .HasColumnName("fact");
            entity.Property(e => e.FactBudgetPeriodId).HasColumnName("fact_budget_period_id");
            entity.Property(e => e.FactLaborCosts).HasColumnName("fact_labor_costs");
            entity.Property(e => e.FactObjectId).HasColumnName("fact_object_id");
            entity.Property(e => e.FactObjectType)
                .HasColumnType("character varying")
                .HasColumnName("fact_object_type");
            entity.Property(e => e.FactValue).HasColumnName("fact_value");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ParentTaskId).HasColumnName("parent_task_id");
            entity.Property(e => e.PayStageId).HasColumnName("pay_stage_id");
            entity.Property(e => e.Plan)
                .HasColumnType("character varying")
                .HasColumnName("plan");
            entity.Property(e => e.PlanBudgetPeriodId).HasColumnName("plan_budget_period_id");
            entity.Property(e => e.PlanLaborCosts).HasColumnName("plan_labor_costs");
            entity.Property(e => e.PlanValue).HasColumnName("plan_value");
            entity.Property(e => e.PreparationId).HasColumnName("preparation_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ReadinessPercent).HasColumnName("readiness_percent");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SourceObjectId).HasColumnName("source_object_id");
            entity.Property(e => e.SourceObjectType)
                .HasColumnType("character varying")
                .HasColumnName("source_object_type");
            entity.Property(e => e.StartDatePlan)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date_plan");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.TargetObjectId).HasColumnName("target_object_id");
            entity.Property(e => e.TargetObjectType)
                .HasColumnType("character varying")
                .HasColumnName("target_object_type");
            entity.Property(e => e.TaskTypeId).HasColumnName("task_type_id");
            entity.Property(e => e.TranslatedTargetId).HasColumnName("translated_target_id");
            entity.Property(e => e.TranslatedTargetType)
                .HasColumnType("character varying")
                .HasColumnName("translated_target_type");
            entity.Property(e => e.TranslatedTaskId).HasColumnName("translated_task_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.WorkflowId).HasColumnName("workflow_id");
            entity.Property(e => e.WorkflowMatchingType)
                .HasColumnType("character varying")
                .HasColumnName("workflow_matching_type");
            entity.Property(e => e.WorkflowPersonId).HasColumnName("workflow_person_id");
            entity.Property(e => e.WorkflowState)
                .HasMaxLength(900)
                .HasColumnName("workflow_state");
            entity.Property(e => e.WorkflowStateName)
                .HasMaxLength(900)
                .HasColumnName("workflow_state_name");
        });

        modelBuilder.Entity<TestLearning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_learning");

            entity.ToTable("test_learning", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TestLearning)
                .HasForeignKey<TestLearning>(d => d.Id)
                .HasConstraintName("FK_objects_test_learning");
        });

        modelBuilder.Entity<TestLearnings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_learnings");

            entity.ToTable("test_learnings", "dbo");

            entity.HasIndex(e => e.AssessmentId, "idx_test_learnings_1260655685115992298").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Score, "idx_test_learnings_1274816053449134588").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_test_learnings_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartUsageDate, "idx_test_learnings_14685550398137120485").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartLearningDate, "idx_test_learnings_15507069630625229787").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.MaxEndDate, "idx_test_learnings_15811904719283636476").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ActiveTestLearningId, "idx_test_learnings_15995621245222084672").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_test_learnings_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonCurrentState, "idx_test_learnings_18249609201350823935").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AssessmentName, "idx_test_learnings_2447176992773035151").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.LastUsageDate, "idx_test_learnings_2805863787306454597").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_test_learnings_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_test_learnings_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.GroupId, "idx_test_learnings_6055816856872497840").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_test_learnings_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonOrgName, "idx_test_learnings_6476940258633105754").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_test_learnings_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ActiveTestLearningId).HasColumnName("active_test_learning_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AssessmentAppraiseId).HasColumnName("assessment_appraise_id");
            entity.Property(e => e.AssessmentId).HasColumnName("assessment_id");
            entity.Property(e => e.AssessmentName)
                .HasMaxLength(900)
                .HasColumnName("assessment_name");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.EducationPlanId).HasColumnName("education_plan_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsSelfEnrolled).HasColumnName("is_self_enrolled");
            entity.Property(e => e.LastUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_usage_date");
            entity.Property(e => e.LinkReport)
                .HasColumnType("character varying")
                .HasColumnName("link_report");
            entity.Property(e => e.MaxEndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("max_end_date");
            entity.Property(e => e.MaxScore).HasColumnName("max_score");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.PersonCurrentState)
                .HasMaxLength(900)
                .HasColumnName("person_current_state");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgName)
                .HasMaxLength(900)
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.QuestionAnsweredNum).HasColumnName("question_answered_num");
            entity.Property(e => e.QuestionNum).HasColumnName("question_num");
            entity.Property(e => e.QuestionPassedNum).HasColumnName("question_passed_num");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.StartLearningDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_learning_date");
            entity.Property(e => e.StartUsageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_usage_date");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.TextResult)
                .HasColumnType("character varying")
                .HasColumnName("text_result");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.UseProctoring).HasColumnName("use_proctoring");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TestProject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_project");

            entity.ToTable("test_project", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TestProject)
                .HasForeignKey<TestProject>(d => d.Id)
                .HasConstraintName("FK_objects_test_project");
        });

        modelBuilder.Entity<TestProjects>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__test_projects");

            entity.ToTable("test_projects", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<TestingSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__testing_system");

            entity.ToTable("testing_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TestingSystem)
                .HasForeignKey<TestingSystem>(d => d.Id)
                .HasConstraintName("FK_objects_testing_system");
        });

        modelBuilder.Entity<TestingSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__testing_systems");

            entity.ToTable("testing_systems", "dbo");

            entity.HasIndex(e => e.Code, "idx_testing_systems_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_testing_systems_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_testing_systems_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_testing_systems_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TimeEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__time_entry");

            entity.ToTable("time_entry", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TimeEntry)
                .HasForeignKey<TimeEntry>(d => d.Id)
                .HasConstraintName("FK_objects_time_entry");
        });

        modelBuilder.Entity<TimeEntrys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__time_entrys");

            entity.ToTable("time_entrys", "dbo");

            entity.HasIndex(e => e.Code, "idx_time_entrys_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Description, "idx_time_entrys_18150201322533190223").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.TaskName, "idx_time_entrys_1978578262145045620").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_time_entrys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_time_entrys_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(900)
                .HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.TaskName)
                .HasMaxLength(900)
                .HasColumnName("task_name");
        });

        modelBuilder.Entity<TrainingPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__training_plan");

            entity.ToTable("training_plan", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TrainingPlan)
                .HasForeignKey<TrainingPlan>(d => d.Id)
                .HasConstraintName("FK_objects_training_plan");
        });

        modelBuilder.Entity<TrainingPlans>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__training_plans");

            entity.ToTable("training_plans", "dbo");

            entity.HasIndex(e => e.Code, "idx_training_plans_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.BudgetPeriodId, "idx_training_plans_16357070293561524102").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_training_plans_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_training_plans_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_training_plans_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.BudgetPeriodId).HasColumnName("budget_period_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TraningOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__traning_order");

            entity.ToTable("traning_order", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TraningOrder)
                .HasForeignKey<TraningOrder>(d => d.Id)
                .HasConstraintName("FK_objects_traning_order");
        });

        modelBuilder.Entity<TraningOrders>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__traning_orders");

            entity.ToTable("traning_orders", "dbo");

            entity.HasIndex(e => e.EducationOrgId, "idx_traning_orders_17197945710645368703").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.EventId, "idx_traning_orders_4047608012312160394").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.Currency)
                .HasColumnType("character varying")
                .HasColumnName("currency");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Number)
                .HasColumnType("character varying")
                .HasColumnName("number");
            entity.Property(e => e.OrderTypeId).HasColumnName("order_type_id");
            entity.Property(e => e.PayPhaseId).HasColumnName("pay_phase_id");
            entity.Property(e => e.PerformerPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("performer_person_fullname");
            entity.Property(e => e.ResponsiblePersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("responsible_person_fullname");
            entity.Property(e => e.SigningPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("signing_person_fullname");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__transaction");

            entity.ToTable("transaction", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Transaction)
                .HasForeignKey<Transaction>(d => d.Id)
                .HasConstraintName("FK_objects_transaction");
        });

        modelBuilder.Entity<Transactions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__transactions");

            entity.ToTable("transactions", "dbo");

            entity.HasIndex(e => e.AccountId, "idx_transactions_10936151840519211456").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Date, "idx_transactions_13327119919005540841").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_transactions_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectName, "idx_transactions_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_transactions_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_transactions_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_transactions_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_transactions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_transactions_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
            entity.Property(e => e.Objects).HasColumnName("objects");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TrashDocs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__trash_docs");

            entity.ToTable("trash_docs", "dbo");

            entity.HasIndex(e => e.DelDate, "idx_trash_docs_4325389738203027413").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.DelDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("del_date");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
        });

        modelBuilder.Entity<Tutor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tutor");

            entity.ToTable("tutor", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Tutor)
                .HasForeignKey<Tutor>(d => d.Id)
                .HasConstraintName("FK_objects_tutor");
        });

        modelBuilder.Entity<Tutors>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tutors");

            entity.ToTable("tutors", "dbo");

            entity.HasIndex(e => e.TypicalDevelopmentProgramId, "idx_tutors_10482484570218215872").HasMethod("gin");

            entity.HasIndex(e => e.SubdivisionId, "idx_tutors_13395769009383188844").HasMethod("gin");

            entity.HasIndex(e => e.Code, "idx_tutors_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_tutors_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_tutors_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CareerReserveTypeId, "idx_tutors_6446321095670185680").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_tutors_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonFullname, "idx_tutors_6503579315402865003").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_tutors_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveTypeId).HasColumnName("career_reserve_type_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PersonFullname)
                .HasMaxLength(900)
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.SubdivisionId).HasColumnName("subdivision_id");
            entity.Property(e => e.TypicalDevelopmentProgramId).HasColumnName("typical_development_program_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<TypicalDevelopmentProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__typical_development_program");

            entity.ToTable("typical_development_program", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TypicalDevelopmentProgram)
                .HasForeignKey<TypicalDevelopmentProgram>(d => d.Id)
                .HasConstraintName("FK_objects_typical_development_program");
        });

        modelBuilder.Entity<TypicalDevelopmentPrograms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__typical_development_programs");

            entity.ToTable("typical_development_programs", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .HasColumnType("character varying")
                .HasColumnName("desc");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<UiData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ui_data");

            entity.ToTable("ui_data", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UiData)
                .HasForeignKey<UiData>(d => d.Id)
                .HasConstraintName("FK_objects_ui_data");
        });

        modelBuilder.Entity<UiDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ui_datas");

            entity.ToTable("ui_datas", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_ui_datas_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_ui_datas_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Data)
                .HasColumnType("character varying")
                .HasColumnName("data");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
        });

        modelBuilder.Entity<UploadPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__upload_package");

            entity.ToTable("upload_package", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UploadPackage)
                .HasForeignKey<UploadPackage>(d => d.Id)
                .HasConstraintName("FK_objects_upload_package");
        });

        modelBuilder.Entity<UploadPackages>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__upload_packages");

            entity.ToTable("upload_packages", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.FileUrl)
                .HasColumnType("character varying")
                .HasColumnName("file_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.PackageDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("package_date");
            entity.Property(e => e.Type)
                .HasColumnType("character varying")
                .HasColumnName("type");
        });

        modelBuilder.Entity<UserAssignment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_assignment");

            entity.ToTable("user_assignment", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UserAssignment)
                .HasForeignKey<UserAssignment>(d => d.Id)
                .HasConstraintName("FK_objects_user_assignment");
        });

        modelBuilder.Entity<UserAssignments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_assignments");

            entity.ToTable("user_assignments", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_user_assignments_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ObjectName)
                .HasColumnType("character varying")
                .HasColumnName("object_name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<UserData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_data");

            entity.ToTable("user_data", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UserData)
                .HasForeignKey<UserData>(d => d.Id)
                .HasConstraintName("FK_objects_user_data");
        });

        modelBuilder.Entity<UserDatas>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_datas");

            entity.ToTable("user_datas", "dbo");

            entity.HasIndex(e => e.CreationUserId, "idx_user_datas_13173935549052528492").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_user_datas_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_user_datas_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_user_datas_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.DeleteDate, "idx_user_datas_8647456959344893169").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CreationUserId).HasColumnName("creation_user_id");
            entity.Property(e => e.DeleteDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("delete_date");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ModificationUserId).HasColumnName("modification_user_id");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<UserRecommendation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_recommendation");

            entity.ToTable("user_recommendation", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.UserRecommendation)
                .HasForeignKey<UserRecommendation>(d => d.Id)
                .HasConstraintName("FK_objects_user_recommendation");
        });

        modelBuilder.Entity<UserRecommendations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_recommendations");

            entity.ToTable("user_recommendations", "dbo");

            entity.HasIndex(e => e.ObjectName, "idx_user_recommendations_1505434499112222876").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ObjectId, "idx_user_recommendations_4061740505141040670").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.ContextObjectId).HasColumnName("context_object_id");
            entity.Property(e => e.ContextObjectName)
                .HasColumnType("character varying")
                .HasColumnName("context_object_name");
            entity.Property(e => e.ContextObjectType)
                .HasColumnType("character varying")
                .HasColumnName("context_object_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(900)
                .HasColumnName("object_name");
            entity.Property(e => e.ObjectType)
                .HasColumnType("character varying")
                .HasColumnName("object_type");
        });

        modelBuilder.Entity<Vacancy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy");

            entity.ToTable("vacancy", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Vacancy)
                .HasForeignKey<Vacancy>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy");
        });

        modelBuilder.Entity<VacancyReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_reason");

            entity.ToTable("vacancy_reason", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancyReason)
                .HasForeignKey<VacancyReason>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_reason");
        });

        modelBuilder.Entity<VacancyReasons>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_reasons");

            entity.ToTable("vacancy_reasons", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<VacancyResponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_response");

            entity.ToTable("vacancy_response", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancyResponse)
                .HasForeignKey<VacancyResponse>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_response");
        });

        modelBuilder.Entity<VacancyResponses>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_responses");

            entity.ToTable("vacancy_responses", "dbo");

            entity.HasIndex(e => e.ResponseAuthorPersonId, "idx_vacancy_responses_10373926480865217712").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_vacancy_responses_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ResumeId, "idx_vacancy_responses_14627996086807549749").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RecruiterPersonId, "idx_vacancy_responses_17889641256446266231").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PersonId, "idx_vacancy_responses_5646951568057938250").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_vacancy_responses_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CareerReserveId, "idx_vacancy_responses_7697738964987669189").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.VacancyId, "idx_vacancy_responses_8786587324496118747").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Status, "idx_vacancy_responses_9033759137052829968").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CareerReserveId).HasColumnName("career_reserve_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DateInvitation)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_invitation");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.RecruiterPersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("recruiter_person_fullname");
            entity.Property(e => e.RecruiterPersonId).HasColumnName("recruiter_person_id");
            entity.Property(e => e.ResponseAuthorFullname)
                .HasColumnType("character varying")
                .HasColumnName("response_author_fullname");
            entity.Property(e => e.ResponseAuthorPersonId).HasColumnName("response_author_person_id");
            entity.Property(e => e.ResumeId).HasColumnName("resume_id");
            entity.Property(e => e.Status)
                .HasMaxLength(900)
                .HasColumnName("status");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyId).HasColumnName("vacancy_id");
            entity.Property(e => e.VacancyName)
                .HasColumnType("character varying")
                .HasColumnName("vacancy_name");
        });

        modelBuilder.Entity<VacancySource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_source");

            entity.ToTable("vacancy_source", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancySource)
                .HasForeignKey<VacancySource>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_source");
        });

        modelBuilder.Entity<VacancySources>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_sources");

            entity.ToTable("vacancy_sources", "dbo");

            entity.HasIndex(e => e.Code, "idx_vacancy_sources_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_vacancy_sources_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_vacancy_sources_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_vacancy_sources_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<VacancySubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_subscription");

            entity.ToTable("vacancy_subscription", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancySubscription)
                .HasForeignKey<VacancySubscription>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_subscription");
        });

        modelBuilder.Entity<VacancySubscriptions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_subscriptions");

            entity.ToTable("vacancy_subscriptions", "dbo");

            entity.HasIndex(e => e.CreationDate, "idx_vacancy_subscriptions_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_vacancy_subscriptions_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SendVacancyDate, "idx_vacancy_subscriptions_9962999653731341707").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.FullTextSearchStr)
                .HasColumnType("character varying")
                .HasColumnName("full_text_search_str");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.SendVacancyDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("send_vacancy_date");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<VacancyType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_type");

            entity.ToTable("vacancy_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VacancyType)
                .HasForeignKey<VacancyType>(d => d.Id)
                .HasConstraintName("FK_objects_vacancy_type");
        });

        modelBuilder.Entity<VacancyTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancy_types");

            entity.ToTable("vacancy_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Vacancys>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vacancys");

            entity.ToTable("vacancys", "dbo");

            entity.HasIndex(e => e.IsClosed, "idx_vacancys_1251773779209720028").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreationDate, "idx_vacancys_13765986872606405551").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_vacancys_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ScheduleId, "idx_vacancys_15013740474053760855").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CollaboratorId, "idx_vacancys_15719026605224656568").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SubId, "idx_vacancys_16652956084133324449").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SiteId, "idx_vacancys_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_vacancys_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.OrgId, "idx_vacancys_3861907144790559126").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_vacancys_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AvgWage).HasColumnName("avg_wage");
            entity.Property(e => e.BudgetCurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("budget_currency_type_id");
            entity.Property(e => e.CloseDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("close_date");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CollaboratorId).HasColumnName("collaborator_id");
            entity.Property(e => e.Comment)
                .HasColumnType("character varying")
                .HasColumnName("comment");
            entity.Property(e => e.CreationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("creation_date");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.EditDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("edit_date");
            entity.Property(e => e.EducTypeId)
                .HasColumnType("character varying")
                .HasColumnName("educ_type_id");
            entity.Property(e => e.EmploymentTypeId)
                .HasColumnType("character varying")
                .HasColumnName("employment_type_id");
            entity.Property(e => e.IsClosed).HasColumnName("is_closed");
            entity.Property(e => e.MaterialLiabilityId).HasColumnName("material_liability_id");
            entity.Property(e => e.MaxAge).HasColumnName("max_age");
            entity.Property(e => e.MaxBudget).HasColumnName("max_budget");
            entity.Property(e => e.MaxWage).HasColumnName("max_wage");
            entity.Property(e => e.MinAge).HasColumnName("min_age");
            entity.Property(e => e.MinBudget).HasColumnName("min_budget");
            entity.Property(e => e.MinWage).HasColumnName("min_wage");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.OrgId).HasColumnName("org_id");
            entity.Property(e => e.OrgName)
                .HasColumnType("character varying")
                .HasColumnName("org_name");
            entity.Property(e => e.PositionCommonId).HasColumnName("position_common_id");
            entity.Property(e => e.ProfessionAreaId)
                .HasColumnType("character varying")
                .HasColumnName("profession_area_id");
            entity.Property(e => e.ProfessionId).HasColumnName("profession_id");
            entity.Property(e => e.PubDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("pub_date");
            entity.Property(e => e.PubPeriod).HasColumnName("pub_period");
            entity.Property(e => e.RecruiterId).HasColumnName("recruiter_id");
            entity.Property(e => e.RegionId).HasColumnName("region_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.ScheduleWorkId)
                .HasColumnType("character varying")
                .HasColumnName("schedule_work_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.SourceId)
                .HasColumnType("character varying")
                .HasColumnName("source_id");
            entity.Property(e => e.SubId).HasColumnName("sub_id");
            entity.Property(e => e.SubName)
                .HasColumnType("character varying")
                .HasColumnName("sub_name");
            entity.Property(e => e.Subordination)
                .HasColumnType("character varying")
                .HasColumnName("subordination");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VacancyReasonId).HasColumnName("vacancy_reason_id");
            entity.Property(e => e.WageSystemId).HasColumnName("wage_system_id");
            entity.Property(e => e.WorkConditionId).HasColumnName("work_condition_id");
            entity.Property(e => e.WorkExperienceId).HasColumnName("work_experience_id");
            entity.Property(e => e.WorkModeId).HasColumnName("work_mode_id");
        });

        modelBuilder.Entity<VclassSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vclass_setting");

            entity.ToTable("vclass_setting", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VclassSetting)
                .HasForeignKey<VclassSetting>(d => d.Id)
                .HasConstraintName("FK_objects_vclass_setting");
        });

        modelBuilder.Entity<VclassSettings>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vclass_settings");

            entity.ToTable("vclass_settings", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<VendorState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vendor_state");

            entity.ToTable("vendor_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VendorState)
                .HasForeignKey<VendorState>(d => d.Id)
                .HasConstraintName("FK_objects_vendor_state");
        });

        modelBuilder.Entity<VendorStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__vendor_states");

            entity.ToTable("vendor_states", "dbo");

            entity.HasIndex(e => e.Code, "idx_vendor_states_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_vendor_states_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_vendor_states_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_vendor_states_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.EducationOrgId).HasColumnName("education_org_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
            entity.Property(e => e.VendorStatusTypeId)
                .HasColumnType("character varying")
                .HasColumnName("vendor_status_type_id");
        });

        modelBuilder.Entity<Verb>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__verb");

            entity.ToTable("verb", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Verb)
                .HasForeignKey<Verb>(d => d.Id)
                .HasConstraintName("FK_objects_verb");
        });

        modelBuilder.Entity<Verbs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__verbs");

            entity.ToTable("verbs", "dbo");

            entity.HasIndex(e => e.Code, "idx_verbs_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Processed).HasColumnName("processed");
        });

        modelBuilder.Entity<ViewConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__view_configuration");

            entity.ToTable("view_configuration", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ViewConfiguration)
                .HasForeignKey<ViewConfiguration>(d => d.Id)
                .HasConstraintName("FK_objects_view_configuration");
        });

        modelBuilder.Entity<ViewConfigurations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__view_configurations");

            entity.ToTable("view_configurations", "dbo");

            entity.HasIndex(e => e.Code, "idx_view_configurations_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_view_configurations_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_view_configurations_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_view_configurations_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
        });

        modelBuilder.Entity<WageSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wage_system");

            entity.ToTable("wage_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WageSystem)
                .HasForeignKey<WageSystem>(d => d.Id)
                .HasConstraintName("FK_objects_wage_system");
        });

        modelBuilder.Entity<WageSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wage_systems");

            entity.ToTable("wage_systems", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Walkthrough>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__walkthrough");

            entity.ToTable("walkthrough", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Walkthrough)
                .HasForeignKey<Walkthrough>(d => d.Id)
                .HasConstraintName("FK_objects_walkthrough");
        });

        modelBuilder.Entity<Walkthroughs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__walkthroughs");

            entity.ToTable("walkthroughs", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ExternalSystemId).HasColumnName("external_system_id");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WebDesign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_design");

            entity.ToTable("web_design", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebDesign)
                .HasForeignKey<WebDesign>(d => d.Id)
                .HasConstraintName("FK_objects_web_design");
        });

        modelBuilder.Entity<WebDesigns>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_designs");

            entity.ToTable("web_designs", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<WebMode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_mode");

            entity.ToTable("web_mode", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebMode)
                .HasForeignKey<WebMode>(d => d.Id)
                .HasConstraintName("FK_objects_web_mode");
        });

        modelBuilder.Entity<WebModes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_modes");

            entity.ToTable("web_modes", "dbo");

            entity.HasIndex(e => e.CatalogName, "idx_web_modes_1203644612602949244").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Code, "idx_web_modes_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.SiteId, "idx_web_modes_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WebDesignId, "idx_web_modes_6855991949085019777").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_web_modes_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.CatalogName)
                .HasMaxLength(900)
                .HasColumnName("catalog_name");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PlaceholderTemplateId).HasColumnName("placeholder_template_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SearchablePortal).HasColumnName("searchable_portal");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.UseFcache).HasColumnName("use_fcache");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
        });

        modelBuilder.Entity<WebPersonState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_person_state");

            entity.ToTable("web_person_state", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebPersonState)
                .HasForeignKey<WebPersonState>(d => d.Id)
                .HasConstraintName("FK_objects_web_person_state");
        });

        modelBuilder.Entity<WebPersonStates>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_person_states");

            entity.ToTable("web_person_states", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.TypeId)
                .HasColumnType("character varying")
                .HasColumnName("type_id");
        });

        modelBuilder.Entity<WebRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_rule");

            entity.ToTable("web_rule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebRule)
                .HasForeignKey<WebRule>(d => d.Id)
                .HasConstraintName("FK_objects_web_rule");
        });

        modelBuilder.Entity<WebRules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__web_rules");

            entity.ToTable("web_rules", "dbo");

            entity.HasIndex(e => e.SiteId, "idx_web_rules_2520687580145494467").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.WebDesignId, "idx_web_rules_6855991949085019777").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.RoleId, "idx_web_rules_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsPattern).HasColumnName("is_pattern");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RedirectType).HasColumnName("redirect_type");
            entity.Property(e => e.RedirectUrl)
                .HasColumnType("character varying")
                .HasColumnName("redirect_url");
            entity.Property(e => e.RedirectWebModeId).HasColumnName("redirect_web_mode_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.SiteId).HasColumnName("site_id");
            entity.Property(e => e.Url)
                .HasColumnType("character varying")
                .HasColumnName("url");
            entity.Property(e => e.UseMatches).HasColumnName("use_matches");
            entity.Property(e => e.WebDesignId).HasColumnName("web_design_id");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<WebinarSystem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__webinar_system");

            entity.ToTable("webinar_system", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WebinarSystem)
                .HasForeignKey<WebinarSystem>(d => d.Id)
                .HasConstraintName("FK_objects_webinar_system");
        });

        modelBuilder.Entity<WebinarSystems>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__webinar_systems");

            entity.ToTable("webinar_systems", "dbo");

            entity.HasIndex(e => e.Code, "idx_webinar_systems_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_webinar_systems_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_webinar_systems_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_webinar_systems_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WikiArticle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article");

            entity.ToTable("wiki_article", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticle)
                .HasForeignKey<WikiArticle>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article");
        });

        modelBuilder.Entity<WikiArticleCommunication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communication");

            entity.ToTable("wiki_article_communication", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticleCommunication)
                .HasForeignKey<WikiArticleCommunication>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article_communication");
        });

        modelBuilder.Entity<WikiArticleCommunicationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communication_type");

            entity.ToTable("wiki_article_communication_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticleCommunicationType)
                .HasForeignKey<WikiArticleCommunicationType>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article_communication_type");
        });

        modelBuilder.Entity<WikiArticleCommunicationTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communication_types");

            entity.ToTable("wiki_article_communication_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BaseWikiArticleTypeId).HasColumnName("base_wiki_article_type_id");
            entity.Property(e => e.ChildWikiArticleTypeId).HasColumnName("child_wiki_article_type_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.IsMandatory).HasColumnName("is_mandatory");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.WikiCommunicationTypeId)
                .HasColumnType("character varying")
                .HasColumnName("wiki_communication_type_id");
        });

        modelBuilder.Entity<WikiArticleCommunications>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_communications");

            entity.ToTable("wiki_article_communications", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.BaseWikiArticleId).HasColumnName("base_wiki_article_id");
            entity.Property(e => e.ChildWikiArticleId).HasColumnName("child_wiki_article_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.WikiArticleCommTypeId).HasColumnName("wiki_article_comm_type_id");
        });

        modelBuilder.Entity<WikiArticleType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_type");

            entity.ToTable("wiki_article_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiArticleType)
                .HasForeignKey<WikiArticleType>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_article_type");
        });

        modelBuilder.Entity<WikiArticleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_article_types");

            entity.ToTable("wiki_article_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
        });

        modelBuilder.Entity<WikiArticles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_articles");

            entity.ToTable("wiki_articles", "dbo");

            entity.HasIndex(e => e.Code, "idx_wiki_articles_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ProcessedEmbeddingHash, "idx_wiki_articles_16800783804721668033").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CreateDate, "idx_wiki_articles_17950951508718158292").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_wiki_articles_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.PublicateDate, "idx_wiki_articles_327488805346235807").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CriticalPublicateDate, "idx_wiki_articles_8067971113505954667").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.CurrentHash, "idx_wiki_articles_995949563724565294").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroupIds).HasColumnName("access_group_ids");
            entity.Property(e => e.AcquaintGroupIds).HasColumnName("acquaint_group_ids");
            entity.Property(e => e.AcquaintTypeId)
                .HasColumnType("character varying")
                .HasColumnName("acquaint_type_id");
            entity.Property(e => e.Annotation)
                .HasColumnType("character varying")
                .HasColumnName("annotation");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.CreateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CriticalPublicateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("critical_publicate_date");
            entity.Property(e => e.CurrentHash)
                .HasMaxLength(900)
                .HasColumnName("current_hash");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.FilesId).HasColumnName("files_id");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ProcessedEmbeddingHash)
                .HasMaxLength(900)
                .HasColumnName("processed_embedding_hash");
            entity.Property(e => e.PublicateDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("publicate_date");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.StatusId)
                .HasColumnType("character varying")
                .HasColumnName("status_id");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.WikiArticleTypeId).HasColumnName("wiki_article_type_id");
            entity.Property(e => e.WikiBaseId).HasColumnName("wiki_base_id");
        });

        modelBuilder.Entity<WikiBase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_base");

            entity.ToTable("wiki_base", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WikiBase)
                .HasForeignKey<WikiBase>(d => d.Id)
                .HasConstraintName("FK_objects_wiki_base");
        });

        modelBuilder.Entity<WikiBases>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__wiki_bases");

            entity.ToTable("wiki_bases", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AccessGroups)
                .HasColumnType("xml")
                .HasColumnName("access_groups");
            entity.Property(e => e.AccessHostId).HasColumnName("access_host_id");
            entity.Property(e => e.AccessLevel).HasColumnName("access_level");
            entity.Property(e => e.AccessOrgId).HasColumnName("access_org_id");
            entity.Property(e => e.AccessRoles)
                .HasColumnType("xml")
                .HasColumnName("access_roles");
            entity.Property(e => e.AccessSiteId).HasColumnName("access_site_id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.Conditions)
                .HasColumnType("xml")
                .HasColumnName("conditions");
            entity.Property(e => e.ConditionsQual)
                .HasColumnType("character varying")
                .HasColumnName("conditions_qual");
            entity.Property(e => e.CopyAccessInNewArticle).HasColumnName("copy_access_in_new_article");
            entity.Property(e => e.EnableAnonymousAccess).HasColumnName("enable_anonymous_access");
            entity.Property(e => e.Experts)
                .HasColumnType("character varying")
                .HasColumnName("experts");
            entity.Property(e => e.KnowledgeParts)
                .HasColumnType("character varying")
                .HasColumnName("knowledge_parts");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.Operator)
                .HasColumnType("character varying")
                .HasColumnName("operator");
            entity.Property(e => e.PreviousVersionObjectId).HasColumnName("previous_version_object_id");
            entity.Property(e => e.ProcessEmbedding).HasColumnName("process_embedding");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasColumnType("character varying")
                .HasColumnName("status");
            entity.Property(e => e.StatusInKnowledgeMap)
                .HasColumnType("character varying")
                .HasColumnName("status_in_knowledge_map");
            entity.Property(e => e.Tags)
                .HasColumnType("character varying")
                .HasColumnName("tags");
            entity.Property(e => e.WebModeId).HasColumnName("web_mode_id");
            entity.Property(e => e.WikiBaseTypeId)
                .HasColumnType("character varying")
                .HasColumnName("wiki_base_type_id");
        });

        modelBuilder.Entity<WorkCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_condition");

            entity.ToTable("work_condition", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkCondition)
                .HasForeignKey<WorkCondition>(d => d.Id)
                .HasConstraintName("FK_objects_work_condition");
        });

        modelBuilder.Entity<WorkConditions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_conditions");

            entity.ToTable("work_conditions", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WorkExperience>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_experience");

            entity.ToTable("work_experience", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkExperience)
                .HasForeignKey<WorkExperience>(d => d.Id)
                .HasConstraintName("FK_objects_work_experience");
        });

        modelBuilder.Entity<WorkExperiences>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_experiences");

            entity.ToTable("work_experiences", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WorkForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_form");

            entity.ToTable("work_form", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkForm)
                .HasForeignKey<WorkForm>(d => d.Id)
                .HasConstraintName("FK_objects_work_form");
        });

        modelBuilder.Entity<WorkForms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_forms");

            entity.ToTable("work_forms", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<WorkMode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_mode");

            entity.ToTable("work_mode", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkMode)
                .HasForeignKey<WorkMode>(d => d.Id)
                .HasConstraintName("FK_objects_work_mode");
        });

        modelBuilder.Entity<WorkModes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_modes");

            entity.ToTable("work_modes", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<WorkSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_schedule");

            entity.ToTable("work_schedule", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkSchedule)
                .HasForeignKey<WorkSchedule>(d => d.Id)
                .HasConstraintName("FK_objects_work_schedule");
        });

        modelBuilder.Entity<WorkScheduleType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_schedule_type");

            entity.ToTable("work_schedule_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkScheduleType)
                .HasForeignKey<WorkScheduleType>(d => d.Id)
                .HasConstraintName("FK_objects_work_schedule_type");
        });

        modelBuilder.Entity<WorkScheduleTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_schedule_types");

            entity.ToTable("work_schedule_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<WorkSchedules>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__work_schedules");

            entity.ToTable("work_schedules", "dbo");

            entity.HasIndex(e => e.Code, "idx_work_schedules_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_work_schedules_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.AppInstanceId, "idx_work_schedules_4538846482694284591").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.ModificationDate, "idx_work_schedules_6463852862173942500").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasMaxLength(900)
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.UserAccessRole)
                .HasColumnType("character varying")
                .HasColumnName("user_access_role");
            entity.Property(e => e.UserGroupId).HasColumnName("user_group_id");
        });

        modelBuilder.Entity<Workflow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__workflow");

            entity.ToTable("workflow", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Workflow)
                .HasForeignKey<Workflow>(d => d.Id)
                .HasConstraintName("FK_objects_workflow");
        });

        modelBuilder.Entity<Workflows>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__workflows");

            entity.ToTable("workflows", "dbo");

            entity.HasIndex(e => e.RoleId, "idx_workflows_7229801639646773814").HasMethod("gin");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ConditionEvalStr)
                .HasColumnType("character varying")
                .HasColumnName("condition_eval_str");
            entity.Property(e => e.EscalationStagesStr)
                .HasColumnType("character varying")
                .HasColumnName("escalation_stages_str");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UseTriggers).HasColumnName("use_triggers");
        });

        modelBuilder.Entity<WorkingCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__working_condition");

            entity.ToTable("working_condition", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkingCondition)
                .HasForeignKey<WorkingCondition>(d => d.Id)
                .HasConstraintName("FK_objects_working_condition");
        });

        modelBuilder.Entity<WorkingConditionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__working_condition_type");

            entity.ToTable("working_condition_type", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkingConditionType)
                .HasForeignKey<WorkingConditionType>(d => d.Id)
                .HasConstraintName("FK_objects_working_condition_type");
        });

        modelBuilder.Entity<WorkingConditionTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__working_condition_types");

            entity.ToTable("working_condition_types", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
        });

        modelBuilder.Entity<WorkingConditions>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__working_conditions");

            entity.ToTable("working_conditions", "dbo");

            entity.HasIndex(e => e.FinishDate, "idx_working_conditions_11773865666016174341").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StartDate, "idx_working_conditions_13439109362781094427").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.StateId, "idx_working_conditions_17305662602066842695").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Code)
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.CurrencyTypeId)
                .HasColumnType("character varying")
                .HasColumnName("currency_type_id");
            entity.Property(e => e.DailyDuration).HasColumnName("daily_duration");
            entity.Property(e => e.EndLunchBreakTime)
                .HasColumnType("character varying")
                .HasColumnName("end_lunch_break_time");
            entity.Property(e => e.EndWorkTime)
                .HasColumnType("character varying")
                .HasColumnName("end_work_time");
            entity.Property(e => e.FinishDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finish_date");
            entity.Property(e => e.IsModel).HasColumnName("is_model");
            entity.Property(e => e.LunchBreakDuration).HasColumnName("lunch_break_duration");
            entity.Property(e => e.LunchBreakType)
                .HasColumnType("character varying")
                .HasColumnName("lunch_break_type");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasColumnType("character varying")
                .HasColumnName("name");
            entity.Property(e => e.PaymentRemuneration)
                .HasColumnType("character varying")
                .HasColumnName("payment_remuneration");
            entity.Property(e => e.PersonCode)
                .HasColumnType("character varying")
                .HasColumnName("person_code");
            entity.Property(e => e.PersonFullname)
                .HasColumnType("character varying")
                .HasColumnName("person_fullname");
            entity.Property(e => e.PersonId).HasColumnName("person_id");
            entity.Property(e => e.PersonInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("person_instance_id");
            entity.Property(e => e.PersonOrgCode)
                .HasColumnType("character varying")
                .HasColumnName("person_org_code");
            entity.Property(e => e.PersonOrgId).HasColumnName("person_org_id");
            entity.Property(e => e.PersonOrgName)
                .HasColumnType("character varying")
                .HasColumnName("person_org_name");
            entity.Property(e => e.PersonPositionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_position_code");
            entity.Property(e => e.PersonPositionId).HasColumnName("person_position_id");
            entity.Property(e => e.PersonPositionName)
                .HasColumnType("character varying")
                .HasColumnName("person_position_name");
            entity.Property(e => e.PersonSubdivisionCode)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_code");
            entity.Property(e => e.PersonSubdivisionId).HasColumnName("person_subdivision_id");
            entity.Property(e => e.PersonSubdivisionName)
                .HasColumnType("character varying")
                .HasColumnName("person_subdivision_name");
            entity.Property(e => e.PlaceId).HasColumnName("place_id");
            entity.Property(e => e.PlaceName)
                .HasColumnType("character varying")
                .HasColumnName("place_name");
            entity.Property(e => e.PositionName)
                .HasColumnType("character varying")
                .HasColumnName("position_name");
            entity.Property(e => e.ProbationaryDuration).HasColumnName("probationary_duration");
            entity.Property(e => e.Salary).HasColumnName("salary");
            entity.Property(e => e.SalaryPaymentTypeId).HasColumnName("salary_payment_type_id");
            entity.Property(e => e.ShiftsNumber).HasColumnName("shifts_number");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.StartLunchBreakTime)
                .HasColumnType("character varying")
                .HasColumnName("start_lunch_break_time");
            entity.Property(e => e.StartWorkTime)
                .HasColumnType("character varying")
                .HasColumnName("start_work_time");
            entity.Property(e => e.StartWorkType)
                .HasColumnType("character varying")
                .HasColumnName("start_work_type");
            entity.Property(e => e.StateId)
                .HasMaxLength(900)
                .HasColumnName("state_id");
            entity.Property(e => e.WeeklyDuration).HasColumnName("weekly_duration");
            entity.Property(e => e.WorkFormId).HasColumnName("work_form_id");
            entity.Property(e => e.WorkScheduleTypeId).HasColumnName("work_schedule_type_id");
            entity.Property(e => e.WorkingConditionTypeId).HasColumnName("working_condition_type_id");
        });

        modelBuilder.Entity<WorkspaceConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__workspace_config");

            entity.ToTable("workspace_config", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Created)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created");
            entity.Property(e => e.Data)
                .HasColumnType("xml")
                .HasColumnName("data");
            entity.Property(e => e.Modified)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modified");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.WorkspaceConfig)
                .HasForeignKey<WorkspaceConfig>(d => d.Id)
                .HasConstraintName("FK_objects_workspace_config");
        });

        modelBuilder.Entity<WorkspaceConfigs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__workspace_configs");

            entity.ToTable("workspace_configs", "dbo");

            entity.HasIndex(e => e.Code, "idx_workspace_configs_13835809364122374161").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.HasIndex(e => e.Name, "idx_workspace_configs_3176614295700716463").HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AppInstanceId)
                .HasColumnType("character varying")
                .HasColumnName("app_instance_id");
            entity.Property(e => e.Changed).HasColumnName("changed");
            entity.Property(e => e.Code)
                .HasMaxLength(900)
                .HasColumnName("code");
            entity.Property(e => e.DefaultThemeId)
                .HasColumnType("character varying")
                .HasColumnName("default_theme_id");
            entity.Property(e => e.IsEnabled).HasColumnName("is_enabled");
            entity.Property(e => e.IsStd).HasColumnName("is_std");
            entity.Property(e => e.LabelsFileUrl)
                .HasColumnType("character varying")
                .HasColumnName("labels_file_url");
            entity.Property(e => e.ModificationDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("modification_date");
            entity.Property(e => e.Name)
                .HasMaxLength(900)
                .HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.ShowCalendar).HasColumnName("show_calendar");
            entity.Property(e => e.ShowConversation).HasColumnName("show_conversation");
            entity.Property(e => e.ShowTask).HasColumnName("show_task");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
